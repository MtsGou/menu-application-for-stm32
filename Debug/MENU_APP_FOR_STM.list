
MENU_APP_FOR_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000784c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  080079e0  080079e0  000179e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d70  08007d70  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007d70  08007d70  00017d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d78  08007d78  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d7c  08007d7c  00017d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000088  08007e08  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08007e08  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013870  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028aa  00000000  00000000  00033928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  000361d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00037228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028139  00000000  00000000  00038168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141a6  00000000  00000000  000602a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4de3  00000000  00000000  00074447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016922a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb0  00000000  00000000  0016927c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079c4 	.word	0x080079c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080079c4 	.word	0x080079c4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <Handle_user>:
  *
  * @param  ms_time:  time waiting for data(ms).
  *
  * @retval void
  */
void Handle_user(int ms_time){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

	// After enters menu, MENU_INIT = 1
	static uint8_t MENU_INIT = 0;

	memset(BUFFER_RECEIVE_DATA, 0, strlen(BUFFER_RECEIVE_DATA));
 8000f24:	2300      	movs	r3, #0
 8000f26:	461a      	mov	r2, r3
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4850      	ldr	r0, [pc, #320]	; (800106c <Handle_user+0x150>)
 8000f2c:	f005 f9b2 	bl	8006294 <memset>
	if (HAL_UART_Receive(&huart4, &BUFFER_RECEIVE_DATA, 1, ms_time) == HAL_OK){
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	494d      	ldr	r1, [pc, #308]	; (800106c <Handle_user+0x150>)
 8000f36:	484e      	ldr	r0, [pc, #312]	; (8001070 <Handle_user+0x154>)
 8000f38:	f004 f88a 	bl	8005050 <HAL_UART_Receive>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f040 8090 	bne.w	8001064 <Handle_user+0x148>

		if(strcmp(BUFFER_RECEIVE_DATA, "M") == 0){
 8000f44:	494b      	ldr	r1, [pc, #300]	; (8001074 <Handle_user+0x158>)
 8000f46:	4849      	ldr	r0, [pc, #292]	; (800106c <Handle_user+0x150>)
 8000f48:	f7ff f942 	bl	80001d0 <strcmp>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d105      	bne.n	8000f5e <Handle_user+0x42>
			MENU_INIT = 1;
 8000f52:	4b49      	ldr	r3, [pc, #292]	; (8001078 <Handle_user+0x15c>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
			print_menu();
 8000f58:	f000 fbba 	bl	80016d0 <print_menu>
			write_UART("\r");
			MENU_INIT = 0;
		}
	}

}
 8000f5c:	e082      	b.n	8001064 <Handle_user+0x148>
		else if (!MENU_INIT){}
 8000f5e:	4b46      	ldr	r3, [pc, #280]	; (8001078 <Handle_user+0x15c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d07e      	beq.n	8001064 <Handle_user+0x148>
		else if(strcmp(BUFFER_RECEIVE_DATA, "A") == 0){
 8000f66:	4945      	ldr	r1, [pc, #276]	; (800107c <Handle_user+0x160>)
 8000f68:	4840      	ldr	r0, [pc, #256]	; (800106c <Handle_user+0x150>)
 8000f6a:	f7ff f931 	bl	80001d0 <strcmp>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10a      	bne.n	8000f8a <Handle_user+0x6e>
			edit_string();
 8000f74:	f000 fab6 	bl	80014e4 <edit_string>
			print_menu();
 8000f78:	f000 fbaa 	bl	80016d0 <print_menu>
			write_UART("\n\r\n\rSTRING_VAR: ");
 8000f7c:	4840      	ldr	r0, [pc, #256]	; (8001080 <Handle_user+0x164>)
 8000f7e:	f000 fc4f 	bl	8001820 <write_UART>
			write_UART((char *) STRING_VAR);
 8000f82:	4840      	ldr	r0, [pc, #256]	; (8001084 <Handle_user+0x168>)
 8000f84:	f000 fc4c 	bl	8001820 <write_UART>
}
 8000f88:	e06c      	b.n	8001064 <Handle_user+0x148>
		else if(strcmp(BUFFER_RECEIVE_DATA, "B") == 0){
 8000f8a:	493f      	ldr	r1, [pc, #252]	; (8001088 <Handle_user+0x16c>)
 8000f8c:	4837      	ldr	r0, [pc, #220]	; (800106c <Handle_user+0x150>)
 8000f8e:	f7ff f91f 	bl	80001d0 <strcmp>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d11a      	bne.n	8000fce <Handle_user+0xb2>
			INT_VAR = edit_int(INT_VAR);
 8000f98:	4b3c      	ldr	r3, [pc, #240]	; (800108c <Handle_user+0x170>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f889 	bl	80010b4 <edit_int>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a39      	ldr	r2, [pc, #228]	; (800108c <Handle_user+0x170>)
 8000fa6:	6013      	str	r3, [r2, #0]
			memset(INT_VAR_CHAR, 0, strlen(INT_VAR_CHAR));
 8000fa8:	4839      	ldr	r0, [pc, #228]	; (8001090 <Handle_user+0x174>)
 8000faa:	f7ff f91b 	bl	80001e4 <strlen>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4836      	ldr	r0, [pc, #216]	; (8001090 <Handle_user+0x174>)
 8000fb6:	f005 f96d 	bl	8006294 <memset>
			sprintf(INT_VAR_CHAR, "%d", INT_VAR);
 8000fba:	4b34      	ldr	r3, [pc, #208]	; (800108c <Handle_user+0x170>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4934      	ldr	r1, [pc, #208]	; (8001094 <Handle_user+0x178>)
 8000fc2:	4833      	ldr	r0, [pc, #204]	; (8001090 <Handle_user+0x174>)
 8000fc4:	f005 f96e 	bl	80062a4 <siprintf>
			print_menu();
 8000fc8:	f000 fb82 	bl	80016d0 <print_menu>
}
 8000fcc:	e04a      	b.n	8001064 <Handle_user+0x148>
		else if(strcmp(BUFFER_RECEIVE_DATA, "C") == 0){
 8000fce:	4932      	ldr	r1, [pc, #200]	; (8001098 <Handle_user+0x17c>)
 8000fd0:	4826      	ldr	r0, [pc, #152]	; (800106c <Handle_user+0x150>)
 8000fd2:	f7ff f8fd 	bl	80001d0 <strcmp>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d120      	bne.n	800101e <Handle_user+0x102>
			FLOAT_VAR = edit_float(FLOAT_VAR);
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <Handle_user+0x180>)
 8000fde:	edd3 7a00 	vldr	s15, [r3]
 8000fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe6:	f000 f93b 	bl	8001260 <edit_float>
 8000fea:	eef0 7a40 	vmov.f32	s15, s0
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <Handle_user+0x180>)
 8000ff0:	edc3 7a00 	vstr	s15, [r3]
			memset(FLOAT_VAR_CHAR, 0, strlen(FLOAT_VAR_CHAR));
 8000ff4:	482a      	ldr	r0, [pc, #168]	; (80010a0 <Handle_user+0x184>)
 8000ff6:	f7ff f8f5 	bl	80001e4 <strlen>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	4827      	ldr	r0, [pc, #156]	; (80010a0 <Handle_user+0x184>)
 8001002:	f005 f947 	bl	8006294 <memset>
			ftoa(FLOAT_VAR, FLOAT_VAR_CHAR, 2);
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <Handle_user+0x180>)
 8001008:	edd3 7a00 	vldr	s15, [r3]
 800100c:	2102      	movs	r1, #2
 800100e:	4824      	ldr	r0, [pc, #144]	; (80010a0 <Handle_user+0x184>)
 8001010:	eeb0 0a67 	vmov.f32	s0, s15
 8001014:	f000 fc90 	bl	8001938 <ftoa>
			print_menu();
 8001018:	f000 fb5a 	bl	80016d0 <print_menu>
}
 800101c:	e022      	b.n	8001064 <Handle_user+0x148>
		else if (strcmp(BUFFER_RECEIVE_DATA, "D") == 0){
 800101e:	4921      	ldr	r1, [pc, #132]	; (80010a4 <Handle_user+0x188>)
 8001020:	4812      	ldr	r0, [pc, #72]	; (800106c <Handle_user+0x150>)
 8001022:	f7ff f8d5 	bl	80001d0 <strcmp>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <Handle_user+0x116>
			use_default_values();
 800102c:	f000 fb26 	bl	800167c <use_default_values>
}
 8001030:	e018      	b.n	8001064 <Handle_user+0x148>
		else if (strcmp(BUFFER_RECEIVE_DATA, "E") == 0){
 8001032:	491d      	ldr	r1, [pc, #116]	; (80010a8 <Handle_user+0x18c>)
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <Handle_user+0x150>)
 8001036:	f7ff f8cb 	bl	80001d0 <strcmp>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <Handle_user+0x12a>
			see_parameters();
 8001040:	f000 fb78 	bl	8001734 <see_parameters>
}
 8001044:	e00e      	b.n	8001064 <Handle_user+0x148>
		else if(strcmp(BUFFER_RECEIVE_DATA, "X") == 0){
 8001046:	4919      	ldr	r1, [pc, #100]	; (80010ac <Handle_user+0x190>)
 8001048:	4808      	ldr	r0, [pc, #32]	; (800106c <Handle_user+0x150>)
 800104a:	f7ff f8c1 	bl	80001d0 <strcmp>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d107      	bne.n	8001064 <Handle_user+0x148>
			clear_screen();
 8001054:	f000 fafc 	bl	8001650 <clear_screen>
			write_UART("\r");
 8001058:	4815      	ldr	r0, [pc, #84]	; (80010b0 <Handle_user+0x194>)
 800105a:	f000 fbe1 	bl	8001820 <write_UART>
			MENU_INIT = 0;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <Handle_user+0x15c>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000294 	.word	0x20000294
 8001070:	2000018c 	.word	0x2000018c
 8001074:	080079e0 	.word	0x080079e0
 8001078:	200000a4 	.word	0x200000a4
 800107c:	080079e4 	.word	0x080079e4
 8001080:	080079e8 	.word	0x080079e8
 8001084:	20000008 	.word	0x20000008
 8001088:	080079fc 	.word	0x080079fc
 800108c:	20000004 	.word	0x20000004
 8001090:	20000298 	.word	0x20000298
 8001094:	08007a00 	.word	0x08007a00
 8001098:	08007a04 	.word	0x08007a04
 800109c:	20000000 	.word	0x20000000
 80010a0:	200002a0 	.word	0x200002a0
 80010a4:	08007a08 	.word	0x08007a08
 80010a8:	08007a0c 	.word	0x08007a0c
 80010ac:	08007a10 	.word	0x08007a10
 80010b0:	08007a14 	.word	0x08007a14

080010b4 <edit_int>:
  *
  * @param  value:  value passed.
  *
  * @retval value
  */
uint32_t edit_int(uint32_t value){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

	char data_rcv[10];
	char* command;
	int change = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t Standard = value;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
	char value_CHAR[10];

	write_UART("\r\n");
 80010c4:	485a      	ldr	r0, [pc, #360]	; (8001230 <edit_int+0x17c>)
 80010c6:	f000 fbab 	bl	8001820 <write_UART>
	write_UART("\r\nw - INCREASE\r\n");
 80010ca:	485a      	ldr	r0, [pc, #360]	; (8001234 <edit_int+0x180>)
 80010cc:	f000 fba8 	bl	8001820 <write_UART>
	write_UART("\r\ns - DECREASE\r\n");
 80010d0:	4859      	ldr	r0, [pc, #356]	; (8001238 <edit_int+0x184>)
 80010d2:	f000 fba5 	bl	8001820 <write_UART>
	write_UART("\r\nA - SAVE\r\n");
 80010d6:	4859      	ldr	r0, [pc, #356]	; (800123c <edit_int+0x188>)
 80010d8:	f000 fba2 	bl	8001820 <write_UART>
	write_UART("\r\nX - RETURN TO MENU\r\n\r\n");
 80010dc:	4858      	ldr	r0, [pc, #352]	; (8001240 <edit_int+0x18c>)
 80010de:	f000 fb9f 	bl	8001820 <write_UART>

	IntToString(value, value_CHAR, 10);
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	220a      	movs	r2, #10
 80010e8:	4619      	mov	r1, r3
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 fb4a 	bl	8001784 <IntToString>
	write_UART(value_CHAR);
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fb93 	bl	8001820 <write_UART>
	write_UART("\r");
 80010fa:	4852      	ldr	r0, [pc, #328]	; (8001244 <edit_int+0x190>)
 80010fc:	f000 fb90 	bl	8001820 <write_UART>

	while(1){

		memset(data_rcv, 0, strlen(data_rcv));
 8001100:	f107 0318 	add.w	r3, r7, #24
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff f86d 	bl	80001e4 <strlen>
 800110a:	4602      	mov	r2, r0
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f005 f8be 	bl	8006294 <memset>
		memset(command, 0, strlen(command));
 8001118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800111a:	f7ff f863 	bl	80001e4 <strlen>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	2100      	movs	r1, #0
 8001124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001126:	f005 f8b5 	bl	8006294 <memset>

		if(HAL_UART_Receive(&huart4, &data_rcv, 1,100) == HAL_OK){
 800112a:	f107 0118 	add.w	r1, r7, #24
 800112e:	2364      	movs	r3, #100	; 0x64
 8001130:	2201      	movs	r2, #1
 8001132:	4845      	ldr	r0, [pc, #276]	; (8001248 <edit_int+0x194>)
 8001134:	f003 ff8c 	bl	8005050 <HAL_UART_Receive>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1e0      	bne.n	8001100 <edit_int+0x4c>

			command = data_rcv;
 800113e:	f107 0318 	add.w	r3, r7, #24
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
			command = clean_data_uart(command);
 8001144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001146:	f000 fa55 	bl	80015f4 <clean_data_uart>
 800114a:	62f8      	str	r0, [r7, #44]	; 0x2c

			if(strcmp(command, "w") == 0){
 800114c:	493f      	ldr	r1, [pc, #252]	; (800124c <edit_int+0x198>)
 800114e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001150:	f7ff f83e 	bl	80001d0 <strcmp>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d11f      	bne.n	800119a <edit_int+0xe6>
				value += change;
 800115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	607b      	str	r3, [r7, #4]
				memset(value_CHAR, 0, strlen(value_CHAR));
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f83c 	bl	80001e4 <strlen>
 800116c:	4602      	mov	r2, r0
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f005 f88d 	bl	8006294 <memset>
				IntToString(value, value_CHAR, 10);
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	220a      	movs	r2, #10
 8001180:	4619      	mov	r1, r3
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 fafe 	bl	8001784 <IntToString>
				write_UART(value_CHAR);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fb47 	bl	8001820 <write_UART>
				write_UART("\r");
 8001192:	482c      	ldr	r0, [pc, #176]	; (8001244 <edit_int+0x190>)
 8001194:	f000 fb44 	bl	8001820 <write_UART>
 8001198:	e7b2      	b.n	8001100 <edit_int+0x4c>
			}

			else if (strcmp(command, "s") == 0){
 800119a:	492d      	ldr	r1, [pc, #180]	; (8001250 <edit_int+0x19c>)
 800119c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800119e:	f7ff f817 	bl	80001d0 <strcmp>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d11f      	bne.n	80011e8 <edit_int+0x134>
				value -= change;
 80011a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	607b      	str	r3, [r7, #4]
				memset(value_CHAR, 0, strlen(value_CHAR));
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f815 	bl	80001e4 <strlen>
 80011ba:	4602      	mov	r2, r0
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f005 f866 	bl	8006294 <memset>
				IntToString(value, value_CHAR, 10);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	220a      	movs	r2, #10
 80011ce:	4619      	mov	r1, r3
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 fad7 	bl	8001784 <IntToString>
				write_UART(value_CHAR);
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fb20 	bl	8001820 <write_UART>
				write_UART("\r");
 80011e0:	4818      	ldr	r0, [pc, #96]	; (8001244 <edit_int+0x190>)
 80011e2:	f000 fb1d 	bl	8001820 <write_UART>
 80011e6:	e78b      	b.n	8001100 <edit_int+0x4c>
			}

			else if(strcmp(command, "A") == 0){
 80011e8:	491a      	ldr	r1, [pc, #104]	; (8001254 <edit_int+0x1a0>)
 80011ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011ec:	f7fe fff0 	bl	80001d0 <strcmp>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d103      	bne.n	80011fe <edit_int+0x14a>
				write_UART("\n\rSaved! ");
 80011f6:	4818      	ldr	r0, [pc, #96]	; (8001258 <edit_int+0x1a4>)
 80011f8:	f000 fb12 	bl	8001820 <write_UART>
				break;
 80011fc:	e009      	b.n	8001212 <edit_int+0x15e>
			}

			else if(strcmp(command, "X") == 0){
 80011fe:	4917      	ldr	r1, [pc, #92]	; (800125c <edit_int+0x1a8>)
 8001200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001202:	f7fe ffe5 	bl	80001d0 <strcmp>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	f47f af79 	bne.w	8001100 <edit_int+0x4c>
				value = Standard;
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	607b      	str	r3, [r7, #4]
				break;
			}

		}
	}
	memset(command, 0, strlen(command));
 8001212:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001214:	f7fe ffe6 	bl	80001e4 <strlen>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	2100      	movs	r1, #0
 800121e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001220:	f005 f838 	bl	8006294 <memset>
	return value;
 8001224:	687b      	ldr	r3, [r7, #4]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3730      	adds	r7, #48	; 0x30
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	08007a18 	.word	0x08007a18
 8001234:	08007a1c 	.word	0x08007a1c
 8001238:	08007a30 	.word	0x08007a30
 800123c:	08007a44 	.word	0x08007a44
 8001240:	08007a54 	.word	0x08007a54
 8001244:	08007a14 	.word	0x08007a14
 8001248:	2000018c 	.word	0x2000018c
 800124c:	08007a70 	.word	0x08007a70
 8001250:	08007a74 	.word	0x08007a74
 8001254:	080079e4 	.word	0x080079e4
 8001258:	08007a78 	.word	0x08007a78
 800125c:	08007a10 	.word	0x08007a10

08001260 <edit_float>:
  *
  * @param  value:  value passed.
  *
  * @retval value
  */
float edit_float(float value){
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	ed87 0a01 	vstr	s0, [r7, #4]

	char rcvd_data[10];
	char* command;
	float change = 0.01;
 800126a:	4b8b      	ldr	r3, [pc, #556]	; (8001498 <edit_float+0x238>)
 800126c:	623b      	str	r3, [r7, #32]
	float Standard = value;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	61fb      	str	r3, [r7, #28]
	char value_CHAR[6];

	write_UART("\r\n\r\n");
 8001272:	488a      	ldr	r0, [pc, #552]	; (800149c <edit_float+0x23c>)
 8001274:	f000 fad4 	bl	8001820 <write_UART>
	write_UART("\r\nw - INCREASE\r\n");
 8001278:	4889      	ldr	r0, [pc, #548]	; (80014a0 <edit_float+0x240>)
 800127a:	f000 fad1 	bl	8001820 <write_UART>
	write_UART("\r\ns - DECREASE\r\n");
 800127e:	4889      	ldr	r0, [pc, #548]	; (80014a4 <edit_float+0x244>)
 8001280:	f000 face 	bl	8001820 <write_UART>
	write_UART("\r\na - <-- CHOOSE DECIMAL TO THE LEFT\r\n");
 8001284:	4888      	ldr	r0, [pc, #544]	; (80014a8 <edit_float+0x248>)
 8001286:	f000 facb 	bl	8001820 <write_UART>
	write_UART("\r\nd - --> CHOOSE DECIMAL TO THE RIGHT\r\n");
 800128a:	4888      	ldr	r0, [pc, #544]	; (80014ac <edit_float+0x24c>)
 800128c:	f000 fac8 	bl	8001820 <write_UART>
	write_UART("\r\nA - SAVE\r\n");
 8001290:	4887      	ldr	r0, [pc, #540]	; (80014b0 <edit_float+0x250>)
 8001292:	f000 fac5 	bl	8001820 <write_UART>
	write_UART("\r\nX - RETURN TO MENU\r\n");
 8001296:	4887      	ldr	r0, [pc, #540]	; (80014b4 <edit_float+0x254>)
 8001298:	f000 fac2 	bl	8001820 <write_UART>
	write_UART("\r\n");
 800129c:	4886      	ldr	r0, [pc, #536]	; (80014b8 <edit_float+0x258>)
 800129e:	f000 fabf 	bl	8001820 <write_UART>

	ftoa(value, value_CHAR, 2);
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	2102      	movs	r1, #2
 80012a8:	4618      	mov	r0, r3
 80012aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80012ae:	f000 fb43 	bl	8001938 <ftoa>
	write_UART(value_CHAR);
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fab2 	bl	8001820 <write_UART>
	write_UART("\r");
 80012bc:	487f      	ldr	r0, [pc, #508]	; (80014bc <edit_float+0x25c>)
 80012be:	f000 faaf 	bl	8001820 <write_UART>

	while(1){

		memset(rcvd_data, 0, strlen(rcvd_data));
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7fe ff8c 	bl	80001e4 <strlen>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 ffdd 	bl	8006294 <memset>
		memset(command, 0, strlen(command));
 80012da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012dc:	f7fe ff82 	bl	80001e4 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	2100      	movs	r1, #0
 80012e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012e8:	f004 ffd4 	bl	8006294 <memset>

		if(HAL_UART_Receive(&huart4, &rcvd_data, 1,100) == HAL_OK){
 80012ec:	f107 0110 	add.w	r1, r7, #16
 80012f0:	2364      	movs	r3, #100	; 0x64
 80012f2:	2201      	movs	r2, #1
 80012f4:	4872      	ldr	r0, [pc, #456]	; (80014c0 <edit_float+0x260>)
 80012f6:	f003 feab 	bl	8005050 <HAL_UART_Receive>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1e0      	bne.n	80012c2 <edit_float+0x62>

			command = rcvd_data;
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
			command = clean_data_uart(command);
 8001306:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001308:	f000 f974 	bl	80015f4 <clean_data_uart>
 800130c:	6278      	str	r0, [r7, #36]	; 0x24

			if(strcmp(command, "w") == 0){
 800130e:	496d      	ldr	r1, [pc, #436]	; (80014c4 <edit_float+0x264>)
 8001310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001312:	f7fe ff5d 	bl	80001d0 <strcmp>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d128      	bne.n	800136e <edit_float+0x10e>
				value += change;
 800131c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001320:	edd7 7a08 	vldr	s15, [r7, #32]
 8001324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001328:	edc7 7a01 	vstr	s15, [r7, #4]
				memset(value_CHAR, 0, strlen(value_CHAR));
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	4618      	mov	r0, r3
 8001332:	f7fe ff57 	bl	80001e4 <strlen>
 8001336:	4602      	mov	r2, r0
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f004 ffa8 	bl	8006294 <memset>
				IntToString(value, value_CHAR, 10);
 8001344:	edd7 7a01 	vldr	s15, [r7, #4]
 8001348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	220a      	movs	r2, #10
 8001352:	4619      	mov	r1, r3
 8001354:	ee17 0a90 	vmov	r0, s15
 8001358:	f000 fa14 	bl	8001784 <IntToString>
				write_UART(value_CHAR);
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fa5d 	bl	8001820 <write_UART>
				write_UART("\r");
 8001366:	4855      	ldr	r0, [pc, #340]	; (80014bc <edit_float+0x25c>)
 8001368:	f000 fa5a 	bl	8001820 <write_UART>
 800136c:	e7a9      	b.n	80012c2 <edit_float+0x62>
			}

			else if (strcmp(command, "s") == 0){
 800136e:	4956      	ldr	r1, [pc, #344]	; (80014c8 <edit_float+0x268>)
 8001370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001372:	f7fe ff2d 	bl	80001d0 <strcmp>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d128      	bne.n	80013ce <edit_float+0x16e>
				value -= change;
 800137c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001380:	edd7 7a08 	vldr	s15, [r7, #32]
 8001384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001388:	edc7 7a01 	vstr	s15, [r7, #4]
				memset(value_CHAR, 0, strlen(value_CHAR));
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	4618      	mov	r0, r3
 8001392:	f7fe ff27 	bl	80001e4 <strlen>
 8001396:	4602      	mov	r2, r0
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 ff78 	bl	8006294 <memset>
				IntToString(value, value_CHAR, 10);
 80013a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	220a      	movs	r2, #10
 80013b2:	4619      	mov	r1, r3
 80013b4:	ee17 0a90 	vmov	r0, s15
 80013b8:	f000 f9e4 	bl	8001784 <IntToString>
				write_UART(value_CHAR);
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fa2d 	bl	8001820 <write_UART>
				write_UART("\r");
 80013c6:	483d      	ldr	r0, [pc, #244]	; (80014bc <edit_float+0x25c>)
 80013c8:	f000 fa2a 	bl	8001820 <write_UART>
 80013cc:	e779      	b.n	80012c2 <edit_float+0x62>
			}

			else if (strcmp(command, "d") == 0){
 80013ce:	493f      	ldr	r1, [pc, #252]	; (80014cc <edit_float+0x26c>)
 80013d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013d2:	f7fe fefd 	bl	80001d0 <strcmp>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d115      	bne.n	8001408 <edit_float+0x1a8>
				change = change/10;
 80013dc:	ed97 7a08 	vldr	s14, [r7, #32]
 80013e0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80013e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e8:	edc7 7a08 	vstr	s15, [r7, #32]
				if (change < 0.01){ change = 0.01;}
 80013ec:	6a38      	ldr	r0, [r7, #32]
 80013ee:	f7ff f8bb 	bl	8000568 <__aeabi_f2d>
 80013f2:	a327      	add	r3, pc, #156	; (adr r3, 8001490 <edit_float+0x230>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff fb80 	bl	8000afc <__aeabi_dcmplt>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d033      	beq.n	800146a <edit_float+0x20a>
 8001402:	4b25      	ldr	r3, [pc, #148]	; (8001498 <edit_float+0x238>)
 8001404:	623b      	str	r3, [r7, #32]
 8001406:	e75c      	b.n	80012c2 <edit_float+0x62>
			}

			else if (strcmp(command, "a") == 0){
 8001408:	4931      	ldr	r1, [pc, #196]	; (80014d0 <edit_float+0x270>)
 800140a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800140c:	f7fe fee0 	bl	80001d0 <strcmp>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d113      	bne.n	800143e <edit_float+0x1de>
				change = change*10;
 8001416:	edd7 7a08 	vldr	s15, [r7, #32]
 800141a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800141e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001422:	edc7 7a08 	vstr	s15, [r7, #32]
				if (change > 10){ change = 10;}
 8001426:	edd7 7a08 	vldr	s15, [r7, #32]
 800142a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800142e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001436:	dd18      	ble.n	800146a <edit_float+0x20a>
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <edit_float+0x274>)
 800143a:	623b      	str	r3, [r7, #32]
 800143c:	e741      	b.n	80012c2 <edit_float+0x62>
			}

			else if(strcmp(command, "A") == 0){
 800143e:	4926      	ldr	r1, [pc, #152]	; (80014d8 <edit_float+0x278>)
 8001440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001442:	f7fe fec5 	bl	80001d0 <strcmp>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d103      	bne.n	8001454 <edit_float+0x1f4>
				write_UART("\n\rSaved! ");
 800144c:	4823      	ldr	r0, [pc, #140]	; (80014dc <edit_float+0x27c>)
 800144e:	f000 f9e7 	bl	8001820 <write_UART>
				break;
 8001452:	e00b      	b.n	800146c <edit_float+0x20c>
			}

			else if(strcmp(command, "X") == 0){
 8001454:	4922      	ldr	r1, [pc, #136]	; (80014e0 <edit_float+0x280>)
 8001456:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001458:	f7fe feba 	bl	80001d0 <strcmp>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	f47f af2f 	bne.w	80012c2 <edit_float+0x62>
				value = Standard;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	607b      	str	r3, [r7, #4]
				break;
 8001468:	e000      	b.n	800146c <edit_float+0x20c>
		memset(rcvd_data, 0, strlen(rcvd_data));
 800146a:	e72a      	b.n	80012c2 <edit_float+0x62>
			}
		}

	}
	memset(command, 0, strlen(command));
 800146c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800146e:	f7fe feb9 	bl	80001e4 <strlen>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	2100      	movs	r1, #0
 8001478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800147a:	f004 ff0b 	bl	8006294 <memset>
	return value;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	ee07 3a90 	vmov	s15, r3
}
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	47ae147b 	.word	0x47ae147b
 8001494:	3f847ae1 	.word	0x3f847ae1
 8001498:	3c23d70a 	.word	0x3c23d70a
 800149c:	08007a84 	.word	0x08007a84
 80014a0:	08007a1c 	.word	0x08007a1c
 80014a4:	08007a30 	.word	0x08007a30
 80014a8:	08007a8c 	.word	0x08007a8c
 80014ac:	08007ab4 	.word	0x08007ab4
 80014b0:	08007a44 	.word	0x08007a44
 80014b4:	08007adc 	.word	0x08007adc
 80014b8:	08007a18 	.word	0x08007a18
 80014bc:	08007a14 	.word	0x08007a14
 80014c0:	2000018c 	.word	0x2000018c
 80014c4:	08007a70 	.word	0x08007a70
 80014c8:	08007a74 	.word	0x08007a74
 80014cc:	08007af4 	.word	0x08007af4
 80014d0:	08007af8 	.word	0x08007af8
 80014d4:	41200000 	.word	0x41200000
 80014d8:	080079e4 	.word	0x080079e4
 80014dc:	08007a78 	.word	0x08007a78
 80014e0:	08007a10 	.word	0x08007a10

080014e4 <edit_string>:
  *
  * @param  none
  *
  * @retval value
  */
void edit_string(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0

	char data_received[10];
	char* command;
	uint8_t NEW_STRING[20];

	write_UART("\n\r");
 80014ea:	483a      	ldr	r0, [pc, #232]	; (80015d4 <edit_string+0xf0>)
 80014ec:	f000 f998 	bl	8001820 <write_UART>
	write_UART("\r\nPRESS > TO SAVE\r\n");
 80014f0:	4839      	ldr	r0, [pc, #228]	; (80015d8 <edit_string+0xf4>)
 80014f2:	f000 f995 	bl	8001820 <write_UART>
	write_UART("X - RETURN TO MENU\r\n");
 80014f6:	4839      	ldr	r0, [pc, #228]	; (80015dc <edit_string+0xf8>)
 80014f8:	f000 f992 	bl	8001820 <write_UART>
	write_UART("\r\n");
 80014fc:	4838      	ldr	r0, [pc, #224]	; (80015e0 <edit_string+0xfc>)
 80014fe:	f000 f98f 	bl	8001820 <write_UART>
	memset(NEW_STRING, 0, strlen(NEW_STRING));
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe fe6d 	bl	80001e4 <strlen>
 800150a:	4602      	mov	r2, r0
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f004 febf 	bl	8006294 <memset>

	while (1){

		memset(data_received, 0, strlen(data_received));
 8001516:	f107 0318 	add.w	r3, r7, #24
 800151a:	4618      	mov	r0, r3
 800151c:	f7fe fe62 	bl	80001e4 <strlen>
 8001520:	4602      	mov	r2, r0
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f004 feb3 	bl	8006294 <memset>
		memset(command, 0, strlen(command));
 800152e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001530:	f7fe fe58 	bl	80001e4 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	2100      	movs	r1, #0
 800153a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800153c:	f004 feaa 	bl	8006294 <memset>

		if(HAL_UART_Receive(&huart4, &data_received, 1,100) == HAL_OK){
 8001540:	f107 0118 	add.w	r1, r7, #24
 8001544:	2364      	movs	r3, #100	; 0x64
 8001546:	2201      	movs	r2, #1
 8001548:	4826      	ldr	r0, [pc, #152]	; (80015e4 <edit_string+0x100>)
 800154a:	f003 fd81 	bl	8005050 <HAL_UART_Receive>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e0      	bne.n	8001516 <edit_string+0x32>

			command = data_received;
 8001554:	f107 0318 	add.w	r3, r7, #24
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
			command = clean_data_uart(command);
 800155a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800155c:	f000 f84a 	bl	80015f4 <clean_data_uart>
 8001560:	6278      	str	r0, [r7, #36]	; 0x24

			if (strcmp(command, ">") == 0){
 8001562:	4921      	ldr	r1, [pc, #132]	; (80015e8 <edit_string+0x104>)
 8001564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001566:	f7fe fe33 	bl	80001d0 <strcmp>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10e      	bne.n	800158e <edit_string+0xaa>
				memset(STRING_VAR, 0, strlen(STRING_VAR));
 8001570:	481e      	ldr	r0, [pc, #120]	; (80015ec <edit_string+0x108>)
 8001572:	f7fe fe37 	bl	80001e4 <strlen>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	2100      	movs	r1, #0
 800157c:	481b      	ldr	r0, [pc, #108]	; (80015ec <edit_string+0x108>)
 800157e:	f004 fe89 	bl	8006294 <memset>
				strcat(STRING_VAR, NEW_STRING);
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4819      	ldr	r0, [pc, #100]	; (80015ec <edit_string+0x108>)
 8001588:	f004 feac 	bl	80062e4 <strcat>
				break;
 800158c:	e014      	b.n	80015b8 <edit_string+0xd4>
			}

			else if (strcmp(command, "X") == 0){
 800158e:	4918      	ldr	r1, [pc, #96]	; (80015f0 <edit_string+0x10c>)
 8001590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001592:	f7fe fe1d 	bl	80001d0 <strcmp>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00c      	beq.n	80015b6 <edit_string+0xd2>
				break;
			}

			else if (strlen(command)){
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0b8      	beq.n	8001516 <edit_string+0x32>
				write_UART(command);
 80015a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015a6:	f000 f93b 	bl	8001820 <write_UART>
				strcat(NEW_STRING, command);
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ae:	4618      	mov	r0, r3
 80015b0:	f004 fe98 	bl	80062e4 <strcat>
		memset(data_received, 0, strlen(data_received));
 80015b4:	e7af      	b.n	8001516 <edit_string+0x32>
				break;
 80015b6:	bf00      	nop
			}
		}

	}
	memset(command, 0, strlen(command));
 80015b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015ba:	f7fe fe13 	bl	80001e4 <strlen>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	2100      	movs	r1, #0
 80015c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015c6:	f004 fe65 	bl	8006294 <memset>
}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	08007afc 	.word	0x08007afc
 80015d8:	08007b00 	.word	0x08007b00
 80015dc:	08007b14 	.word	0x08007b14
 80015e0:	08007a18 	.word	0x08007a18
 80015e4:	2000018c 	.word	0x2000018c
 80015e8:	08007b2c 	.word	0x08007b2c
 80015ec:	20000008 	.word	0x20000008
 80015f0:	08007a10 	.word	0x08007a10

080015f4 <clean_data_uart>:
  *
  * @param  *string: String to be cleaned.
  *
  * @retval *string
  */
char* clean_data_uart(char* string){
 80015f4:	b5b0      	push	{r4, r5, r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

	int error_index = 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]

	while (error_index < strlen(string)){
 8001600:	e017      	b.n	8001632 <clean_data_uart+0x3e>
		error_index = strcspn(string, "\r\n\t  ");
 8001602:	4912      	ldr	r1, [pc, #72]	; (800164c <clean_data_uart+0x58>)
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f004 fe7c 	bl	8006302 <strcspn>
 800160a:	4603      	mov	r3, r0
 800160c:	60fb      	str	r3, [r7, #12]
		memmove(&string[error_index], &string[error_index + 1], strlen(string) - error_index);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	18d4      	adds	r4, r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3301      	adds	r3, #1
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	18d5      	adds	r5, r2, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7fe fde1 	bl	80001e4 <strlen>
 8001622:	4602      	mov	r2, r0
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	461a      	mov	r2, r3
 800162a:	4629      	mov	r1, r5
 800162c:	4620      	mov	r0, r4
 800162e:	f004 fe17 	bl	8006260 <memmove>
	while (error_index < strlen(string)){
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7fe fdd6 	bl	80001e4 <strlen>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d8e0      	bhi.n	8001602 <clean_data_uart+0xe>
	}

	return string;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bdb0      	pop	{r4, r5, r7, pc}
 800164a:	bf00      	nop
 800164c:	08007b30 	.word	0x08007b30

08001650 <clear_screen>:
  *
  * @param  none
  *
  * @retval void
  */
void clear_screen(){
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
	for (int times = 0; times < 60; times++){
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	e005      	b.n	8001668 <clear_screen+0x18>
		write_UART("\n\r");
 800165c:	4806      	ldr	r0, [pc, #24]	; (8001678 <clear_screen+0x28>)
 800165e:	f000 f8df 	bl	8001820 <write_UART>
	for (int times = 0; times < 60; times++){
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3301      	adds	r3, #1
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b3b      	cmp	r3, #59	; 0x3b
 800166c:	ddf6      	ble.n	800165c <clear_screen+0xc>
	}
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	08007afc 	.word	0x08007afc

0800167c <use_default_values>:
  *
  * @param  none
  *
  * @retval void
  */
void use_default_values(){
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

	memset(STRING_VAR, 0, strlen(STRING_VAR));
 8001680:	480e      	ldr	r0, [pc, #56]	; (80016bc <use_default_values+0x40>)
 8001682:	f7fe fdaf 	bl	80001e4 <strlen>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	2100      	movs	r1, #0
 800168c:	480b      	ldr	r0, [pc, #44]	; (80016bc <use_default_values+0x40>)
 800168e:	f004 fe01 	bl	8006294 <memset>
	strcat(STRING_VAR, STANDARD_NAME);
 8001692:	480a      	ldr	r0, [pc, #40]	; (80016bc <use_default_values+0x40>)
 8001694:	f7fe fda6 	bl	80001e4 <strlen>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <use_default_values+0x40>)
 800169e:	4413      	add	r3, r2
 80016a0:	4907      	ldr	r1, [pc, #28]	; (80016c0 <use_default_values+0x44>)
 80016a2:	461a      	mov	r2, r3
 80016a4:	460b      	mov	r3, r1
 80016a6:	cb03      	ldmia	r3!, {r0, r1}
 80016a8:	6010      	str	r0, [r2, #0]
 80016aa:	6051      	str	r1, [r2, #4]
	FLOAT_VAR = STANDARD_FLOAT;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <use_default_values+0x48>)
 80016ae:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <use_default_values+0x4c>)
 80016b0:	601a      	str	r2, [r3, #0]
	INT_VAR = STANDARD_INT;
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <use_default_values+0x50>)
 80016b4:	220a      	movs	r2, #10
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000008 	.word	0x20000008
 80016c0:	08007b38 	.word	0x08007b38
 80016c4:	20000000 	.word	0x20000000
 80016c8:	41280000 	.word	0x41280000
 80016cc:	20000004 	.word	0x20000004

080016d0 <print_menu>:
  *
  * @param  none
  *
  * @retval void
  */
void print_menu(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0

	write_UART("\r\n\r\nMENU\r\n");
 80016d4:	480e      	ldr	r0, [pc, #56]	; (8001710 <print_menu+0x40>)
 80016d6:	f000 f8a3 	bl	8001820 <write_UART>
	write_UART("\n\rSELECT       Shift + key\n\r");
 80016da:	480e      	ldr	r0, [pc, #56]	; (8001714 <print_menu+0x44>)
 80016dc:	f000 f8a0 	bl	8001820 <write_UART>
	write_UART("\n\rEDIT STRING VARIABLE           A");
 80016e0:	480d      	ldr	r0, [pc, #52]	; (8001718 <print_menu+0x48>)
 80016e2:	f000 f89d 	bl	8001820 <write_UART>
	write_UART("\n\rEDIT INT VARIABLE              B");
 80016e6:	480d      	ldr	r0, [pc, #52]	; (800171c <print_menu+0x4c>)
 80016e8:	f000 f89a 	bl	8001820 <write_UART>
	write_UART("\n\rEDIT FLOAT VARIABLE            C");
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <print_menu+0x50>)
 80016ee:	f000 f897 	bl	8001820 <write_UART>
	write_UART("\n\rUSE DEFAULT VALUES             D");
 80016f2:	480c      	ldr	r0, [pc, #48]	; (8001724 <print_menu+0x54>)
 80016f4:	f000 f894 	bl	8001820 <write_UART>
	write_UART("\n\rSEE CURRENT PARAMETERS         E");
 80016f8:	480b      	ldr	r0, [pc, #44]	; (8001728 <print_menu+0x58>)
 80016fa:	f000 f891 	bl	8001820 <write_UART>
	write_UART("\n\rLEAVE MENU                     X");
 80016fe:	480b      	ldr	r0, [pc, #44]	; (800172c <print_menu+0x5c>)
 8001700:	f000 f88e 	bl	8001820 <write_UART>
	write_UART("\r");
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <print_menu+0x60>)
 8001706:	f000 f88b 	bl	8001820 <write_UART>
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	08007b40 	.word	0x08007b40
 8001714:	08007b4c 	.word	0x08007b4c
 8001718:	08007b6c 	.word	0x08007b6c
 800171c:	08007b90 	.word	0x08007b90
 8001720:	08007bb4 	.word	0x08007bb4
 8001724:	08007bd8 	.word	0x08007bd8
 8001728:	08007bfc 	.word	0x08007bfc
 800172c:	08007c20 	.word	0x08007c20
 8001730:	08007a14 	.word	0x08007a14

08001734 <see_parameters>:
  *
  * @param  none
  *
  * @retval void
  */
void see_parameters(){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0

	write_UART("\n\r");
 8001738:	480b      	ldr	r0, [pc, #44]	; (8001768 <see_parameters+0x34>)
 800173a:	f000 f871 	bl	8001820 <write_UART>
	write_UART("\r\nSTRING VARIABLE:");
 800173e:	480b      	ldr	r0, [pc, #44]	; (800176c <see_parameters+0x38>)
 8001740:	f000 f86e 	bl	8001820 <write_UART>
	write_UART((char *)STRING_VAR);
 8001744:	480a      	ldr	r0, [pc, #40]	; (8001770 <see_parameters+0x3c>)
 8001746:	f000 f86b 	bl	8001820 <write_UART>
	write_UART("\r\nINT VARIABLE:");
 800174a:	480a      	ldr	r0, [pc, #40]	; (8001774 <see_parameters+0x40>)
 800174c:	f000 f868 	bl	8001820 <write_UART>
	write_UART(INT_VAR_CHAR);
 8001750:	4809      	ldr	r0, [pc, #36]	; (8001778 <see_parameters+0x44>)
 8001752:	f000 f865 	bl	8001820 <write_UART>
	write_UART("\r\nFLOAT VARIABLE:");
 8001756:	4809      	ldr	r0, [pc, #36]	; (800177c <see_parameters+0x48>)
 8001758:	f000 f862 	bl	8001820 <write_UART>
	write_UART(FLOAT_VAR_CHAR);
 800175c:	4808      	ldr	r0, [pc, #32]	; (8001780 <see_parameters+0x4c>)
 800175e:	f000 f85f 	bl	8001820 <write_UART>

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	08007afc 	.word	0x08007afc
 800176c:	08007c44 	.word	0x08007c44
 8001770:	20000008 	.word	0x20000008
 8001774:	08007c58 	.word	0x08007c58
 8001778:	20000298 	.word	0x20000298
 800177c:	08007c68 	.word	0x08007c68
 8001780:	200002a0 	.word	0x200002a0

08001784 <IntToString>:
  * @param  *result:	pointer to result string
  * @param  base:		base (decimal, binary, hex).
  *
  * @retval *result
  */
char* IntToString(uint32_t value, char* result, int base) {
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]

    /* check that the base if valid */
    if (base < 2 || base > 36) { *result = '\0'; return result; }
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	dd02      	ble.n	800179c <IntToString+0x18>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b24      	cmp	r3, #36	; 0x24
 800179a:	dd04      	ble.n	80017a6 <IntToString+0x22>
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	e034      	b.n	8001810 <IntToString+0x8c>

    char* ptr = result, *ptr1 = result, tmp_char;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	61bb      	str	r3, [r7, #24]
    uint32_t tmp_value;

    do {
        tmp_value = value;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	617b      	str	r3, [r7, #20]
        value /= base;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	60fb      	str	r3, [r7, #12]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"
        		[35 + (tmp_value - value * base)];
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	fb02 f303 	mul.w	r3, r2, r3
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f103 0223 	add.w	r2, r3, #35	; 0x23
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	1c59      	adds	r1, r3, #1
 80017d0:	61f9      	str	r1, [r7, #28]
        		[35 + (tmp_value - value * base)];
 80017d2:	4912      	ldr	r1, [pc, #72]	; (800181c <IntToString+0x98>)
 80017d4:	5c8a      	ldrb	r2, [r1, r2]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"
 80017d6:	701a      	strb	r2, [r3, #0]
    } while ( value );
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1e7      	bne.n	80017ae <IntToString+0x2a>

    /* Apply negative sign */
    if (tmp_value < 0) *ptr++ = '-';
    *ptr-- = '\0';
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	61fa      	str	r2, [r7, #28]
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
    while(ptr1 < ptr) {
 80017e8:	e00d      	b.n	8001806 <IntToString+0x82>
        tmp_char = *ptr;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	74fb      	strb	r3, [r7, #19]
        *ptr--= *ptr1;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	1e5a      	subs	r2, r3, #1
 80017f4:	61fa      	str	r2, [r7, #28]
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	701a      	strb	r2, [r3, #0]
        *ptr1++ = tmp_char;
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	61ba      	str	r2, [r7, #24]
 8001802:	7cfa      	ldrb	r2, [r7, #19]
 8001804:	701a      	strb	r2, [r3, #0]
    while(ptr1 < ptr) {
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	429a      	cmp	r2, r3
 800180c:	d3ed      	bcc.n	80017ea <IntToString+0x66>
    }
    return result;
 800180e:	68bb      	ldr	r3, [r7, #8]

}
 8001810:	4618      	mov	r0, r3
 8001812:	3724      	adds	r7, #36	; 0x24
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	08007c7c 	.word	0x08007c7c

08001820 <write_UART>:
  *
  * @param  *data:  data to send TX.
  *
  * @retval void
  */
void write_UART(char *data){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart4, data, strlen(data),100);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7fe fcdb 	bl	80001e4 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	2364      	movs	r3, #100	; 0x64
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4803      	ldr	r0, [pc, #12]	; (8001844 <write_UART+0x24>)
 8001838:	f003 fb76 	bl	8004f28 <HAL_UART_Transmit>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000018c 	.word	0x2000018c

08001848 <reverse>:
  * @param  len:  string length.
  *
  * @retval void
  */
void reverse(char* str, int len)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	3b01      	subs	r3, #1
 800185a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800185c:	e018      	b.n	8001890 <reverse+0x48>
        temp = str[i];
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	441a      	add	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	440b      	add	r3, r1
 8001874:	7812      	ldrb	r2, [r2, #0]
 8001876:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	701a      	strb	r2, [r3, #0]
        i++;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
        j--;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	3b01      	subs	r3, #1
 800188e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbe2      	blt.n	800185e <reverse+0x16>
    }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <intToStr>:
  * @param  d:  number of digits required in the output.
  *
  * @retval i
  */
int intToStr(int x, char str[], int d)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
    int i = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
    while (x) {
 80018b8:	e01d      	b.n	80018f6 <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <intToStr+0x8c>)
 80018be:	fb83 1302 	smull	r1, r3, r3, r2
 80018c2:	1099      	asrs	r1, r3, #2
 80018c4:	17d3      	asrs	r3, r2, #31
 80018c6:	1ac9      	subs	r1, r1, r3
 80018c8:	460b      	mov	r3, r1
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	1ad1      	subs	r1, r2, r3
 80018d2:	b2ca      	uxtb	r2, r1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	1c59      	adds	r1, r3, #1
 80018d8:	6179      	str	r1, [r7, #20]
 80018da:	4619      	mov	r1, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	440b      	add	r3, r1
 80018e0:	3230      	adds	r2, #48	; 0x30
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4a12      	ldr	r2, [pc, #72]	; (8001934 <intToStr+0x8c>)
 80018ea:	fb82 1203 	smull	r1, r2, r2, r3
 80018ee:	1092      	asrs	r2, r2, #2
 80018f0:	17db      	asrs	r3, r3, #31
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	60fb      	str	r3, [r7, #12]
    while (x) {
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1de      	bne.n	80018ba <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80018fc:	e007      	b.n	800190e <intToStr+0x66>
        str[i++] = '0';
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	617a      	str	r2, [r7, #20]
 8001904:	461a      	mov	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	4413      	add	r3, r2
 800190a:	2230      	movs	r2, #48	; 0x30
 800190c:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	429a      	cmp	r2, r3
 8001914:	dbf3      	blt.n	80018fe <intToStr+0x56>

    reverse(str, i);
 8001916:	6979      	ldr	r1, [r7, #20]
 8001918:	68b8      	ldr	r0, [r7, #8]
 800191a:	f7ff ff95 	bl	8001848 <reverse>
    str[i] = '\0';
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	4413      	add	r3, r2
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
    return i;
 8001928:	697b      	ldr	r3, [r7, #20]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	66666667 	.word	0x66666667

08001938 <ftoa>:
  * @param  afterpoint:  digits after dot.
  *
  * @retval void
  */
void ftoa(float n, char* res, int afterpoint)
{
 8001938:	b5b0      	push	{r4, r5, r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001942:	60b8      	str	r0, [r7, #8]
 8001944:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8001946:	edd7 7a03 	vldr	s15, [r7, #12]
 800194a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194e:	ee17 3a90 	vmov	r3, s15
 8001952:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001966:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	69f8      	ldr	r0, [r7, #28]
 8001970:	f7ff ff9a 	bl	80018a8 <intToStr>
 8001974:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d030      	beq.n	80019de <ftoa+0xa6>
        res[i] = '.'; // add dot
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	4413      	add	r3, r2
 8001982:	222e      	movs	r2, #46	; 0x2e
 8001984:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8001986:	69b8      	ldr	r0, [r7, #24]
 8001988:	f7fe fdee 	bl	8000568 <__aeabi_f2d>
 800198c:	4604      	mov	r4, r0
 800198e:	460d      	mov	r5, r1
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7fe fdd7 	bl	8000544 <__aeabi_i2d>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	ec43 2b11 	vmov	d1, r2, r3
 800199e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80019e8 <ftoa+0xb0>
 80019a2:	f005 f8f3 	bl	8006b8c <pow>
 80019a6:	ec53 2b10 	vmov	r2, r3, d0
 80019aa:	4620      	mov	r0, r4
 80019ac:	4629      	mov	r1, r5
 80019ae:	f7fe fe33 	bl	8000618 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff f8dd 	bl	8000b78 <__aeabi_d2f>
 80019be:	4603      	mov	r3, r0
 80019c0:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80019c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80019c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	4413      	add	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4619      	mov	r1, r3
 80019d6:	ee17 0a90 	vmov	r0, s15
 80019da:	f7ff ff65 	bl	80018a8 <intToStr>
    }
}
 80019de:	bf00      	nop
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bdb0      	pop	{r4, r5, r7, pc}
 80019e6:	bf00      	nop
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40240000 	.word	0x40240000

080019f0 <HAL_UART_TxCpltCallback>:
  *
  * @param  *huart:		Objeto UART.
  *
  * @retval void
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	if (huart == &huart3){
		/* Acender LED de dado Serial enviado */
		//HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, HIGH);
	}

}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a08:	f000 fc47 	bl	800229a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a0c:	f000 f810 	bl	8001a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a10:	f000 f9a6 	bl	8001d60 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001a14:	f000 f85e 	bl	8001ad4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a18:	f000 f8c2 	bl	8001ba0 <MX_TIM4_Init>
  MX_TIM16_Init();
 8001a1c:	f000 f91a 	bl	8001c54 <MX_TIM16_Init>
  MX_UART4_Init();
 8001a20:	f000 f93e 	bl	8001ca0 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001a24:	f000 f96c 	bl	8001d00 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* Wait for user data */
	Handle_user(100 /*time ms*/);
 8001a28:	2064      	movs	r0, #100	; 0x64
 8001a2a:	f7ff fa77 	bl	8000f1c <Handle_user>
 8001a2e:	e7fb      	b.n	8001a28 <main+0x24>

08001a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b096      	sub	sp, #88	; 0x58
 8001a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	2244      	movs	r2, #68	; 0x44
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f004 fc28 	bl	8006294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	463b      	mov	r3, r7
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a56:	f000 ffdd 	bl	8002a14 <HAL_PWREx_ControlVoltageScaling>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a60:	f000 f9ae 	bl	8001dc0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a64:	2310      	movs	r3, #16
 8001a66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a70:	2360      	movs	r3, #96	; 0x60
 8001a72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a74:	2302      	movs	r3, #2
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001a80:	2324      	movs	r3, #36	; 0x24
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a84:	2307      	movs	r3, #7
 8001a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4618      	mov	r0, r3
 8001a96:	f001 f813 	bl	8002ac0 <HAL_RCC_OscConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001aa0:	f000 f98e 	bl	8001dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2104      	movs	r1, #4
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 fbdb 	bl	8003278 <HAL_RCC_ClockConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ac8:	f000 f97a 	bl	8001dc0 <Error_Handler>
  }
}
 8001acc:	bf00      	nop
 8001ace:	3758      	adds	r7, #88	; 0x58
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
 8001af4:	615a      	str	r2, [r3, #20]
 8001af6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <MX_TIM3_Init+0xc4>)
 8001afa:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <MX_TIM3_Init+0xc8>)
 8001afc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <MX_TIM3_Init+0xc4>)
 8001b00:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001b04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <MX_TIM3_Init+0xc4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <MX_TIM3_Init+0xc4>)
 8001b0e:	22c7      	movs	r2, #199	; 0xc7
 8001b10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b12:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <MX_TIM3_Init+0xc4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <MX_TIM3_Init+0xc4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b1e:	481e      	ldr	r0, [pc, #120]	; (8001b98 <MX_TIM3_Init+0xc4>)
 8001b20:	f002 fae1 	bl	80040e6 <HAL_TIM_PWM_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001b2a:	f000 f949 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4816      	ldr	r0, [pc, #88]	; (8001b98 <MX_TIM3_Init+0xc4>)
 8001b3e:	f003 f8ff 	bl	8004d40 <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001b48:	f000 f93a 	bl	8001dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b4c:	2360      	movs	r3, #96	; 0x60
 8001b4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4619      	mov	r1, r3
 8001b62:	480d      	ldr	r0, [pc, #52]	; (8001b98 <MX_TIM3_Init+0xc4>)
 8001b64:	f002 fc36 	bl	80043d4 <HAL_TIM_PWM_ConfigChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001b6e:	f000 f927 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b72:	463b      	mov	r3, r7
 8001b74:	2204      	movs	r2, #4
 8001b76:	4619      	mov	r1, r3
 8001b78:	4807      	ldr	r0, [pc, #28]	; (8001b98 <MX_TIM3_Init+0xc4>)
 8001b7a:	f002 fc2b 	bl	80043d4 <HAL_TIM_PWM_ConfigChannel>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001b84:	f000 f91c 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b88:	4803      	ldr	r0, [pc, #12]	; (8001b98 <MX_TIM3_Init+0xc4>)
 8001b8a:	f000 f9ab 	bl	8001ee4 <HAL_TIM_MspPostInit>

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200000a8 	.word	0x200000a8
 8001b9c:	40000400 	.word	0x40000400

08001ba0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb2:	463b      	mov	r3, r7
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
 8001bc0:	615a      	str	r2, [r3, #20]
 8001bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <MX_TIM4_Init+0xac>)
 8001bc6:	4a22      	ldr	r2, [pc, #136]	; (8001c50 <MX_TIM4_Init+0xb0>)
 8001bc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720-1;
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <MX_TIM4_Init+0xac>)
 8001bcc:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001bd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <MX_TIM4_Init+0xac>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <MX_TIM4_Init+0xac>)
 8001bda:	22c7      	movs	r2, #199	; 0xc7
 8001bdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_TIM4_Init+0xac>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <MX_TIM4_Init+0xac>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bea:	4818      	ldr	r0, [pc, #96]	; (8001c4c <MX_TIM4_Init+0xac>)
 8001bec:	f002 fa7b 	bl	80040e6 <HAL_TIM_PWM_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001bf6:	f000 f8e3 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4619      	mov	r1, r3
 8001c08:	4810      	ldr	r0, [pc, #64]	; (8001c4c <MX_TIM4_Init+0xac>)
 8001c0a:	f003 f899 	bl	8004d40 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001c14:	f000 f8d4 	bl	8001dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c18:	2360      	movs	r3, #96	; 0x60
 8001c1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c28:	463b      	mov	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4807      	ldr	r0, [pc, #28]	; (8001c4c <MX_TIM4_Init+0xac>)
 8001c30:	f002 fbd0 	bl	80043d4 <HAL_TIM_PWM_ConfigChannel>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001c3a:	f000 f8c1 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c3e:	4803      	ldr	r0, [pc, #12]	; (8001c4c <MX_TIM4_Init+0xac>)
 8001c40:	f000 f950 	bl	8001ee4 <HAL_TIM_MspPostInit>

}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	; 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200000f4 	.word	0x200000f4
 8001c50:	40000800 	.word	0x40000800

08001c54 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_TIM16_Init+0x44>)
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <MX_TIM16_Init+0x48>)
 8001c5c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 720-1;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_TIM16_Init+0x44>)
 8001c60:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001c64:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_TIM16_Init+0x44>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <MX_TIM16_Init+0x44>)
 8001c6e:	2263      	movs	r2, #99	; 0x63
 8001c70:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_TIM16_Init+0x44>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <MX_TIM16_Init+0x44>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_TIM16_Init+0x44>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c84:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_TIM16_Init+0x44>)
 8001c86:	f002 f9d7 	bl	8004038 <HAL_TIM_Base_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001c90:	f000 f896 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000140 	.word	0x20000140
 8001c9c:	40014400 	.word	0x40014400

08001ca0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_UART4_Init+0x58>)
 8001ca6:	4a15      	ldr	r2, [pc, #84]	; (8001cfc <MX_UART4_Init+0x5c>)
 8001ca8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <MX_UART4_Init+0x58>)
 8001cac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_UART4_Init+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <MX_UART4_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_UART4_Init+0x58>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_UART4_Init+0x58>)
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_UART4_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_UART4_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_UART4_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_UART4_Init+0x58>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_UART4_Init+0x58>)
 8001ce4:	f003 f8d2 	bl	8004e8c <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001cee:	f000 f867 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000018c 	.word	0x2000018c
 8001cfc:	40004c00 	.word	0x40004c00

08001d00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d06:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <MX_USART3_UART_Init+0x5c>)
 8001d08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d26:	220c      	movs	r2, #12
 8001d28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d44:	f003 f8a2 	bl	8004e8c <HAL_UART_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d4e:	f000 f837 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000210 	.word	0x20000210
 8001d5c:	40004800 	.word	0x40004800

08001d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <MX_GPIO_Init+0x5c>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <MX_GPIO_Init+0x5c>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <MX_GPIO_Init+0x5c>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <MX_GPIO_Init+0x5c>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <MX_GPIO_Init+0x5c>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <MX_GPIO_Init+0x5c>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <MX_GPIO_Init+0x5c>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	4a08      	ldr	r2, [pc, #32]	; (8001dbc <MX_GPIO_Init+0x5c>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <MX_GPIO_Init+0x5c>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]

}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc4:	b672      	cpsid	i
}
 8001dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <Error_Handler+0x8>
	...

08001dcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_MspInit+0x44>)
 8001dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd6:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_MspInit+0x44>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <HAL_MspInit+0x44>)
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_MspInit+0x44>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <HAL_MspInit+0x44>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df4:	6593      	str	r3, [r2, #88]	; 0x58
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_MspInit+0x44>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000

08001e14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1a      	ldr	r2, [pc, #104]	; (8001e8c <HAL_TIM_PWM_MspInit+0x78>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d114      	bne.n	8001e50 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_TIM_PWM_MspInit+0x7c>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_TIM_PWM_MspInit+0x7c>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	6593      	str	r3, [r2, #88]	; 0x58
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <HAL_TIM_PWM_MspInit+0x7c>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	201d      	movs	r0, #29
 8001e44:	f000 fb79 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e48:	201d      	movs	r0, #29
 8001e4a:	f000 fb92 	bl	8002572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e4e:	e018      	b.n	8001e82 <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM4)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <HAL_TIM_PWM_MspInit+0x80>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d113      	bne.n	8001e82 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HAL_TIM_PWM_MspInit+0x7c>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <HAL_TIM_PWM_MspInit+0x7c>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	6593      	str	r3, [r2, #88]	; 0x58
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_TIM_PWM_MspInit+0x7c>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	201e      	movs	r0, #30
 8001e78:	f000 fb5f 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e7c:	201e      	movs	r0, #30
 8001e7e:	f000 fb78 	bl	8002572 <HAL_NVIC_EnableIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40000400 	.word	0x40000400
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40000800 	.word	0x40000800

08001e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <HAL_TIM_Base_MspInit+0x44>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d113      	bne.n	8001ed2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_TIM_Base_MspInit+0x48>)
 8001eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eae:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <HAL_TIM_Base_MspInit+0x48>)
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_TIM_Base_MspInit+0x48>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2019      	movs	r0, #25
 8001ec8:	f000 fb37 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ecc:	2019      	movs	r0, #25
 8001ece:	f000 fb50 	bl	8002572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40014400 	.word	0x40014400
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a22      	ldr	r2, [pc, #136]	; (8001f8c <HAL_TIM_MspPostInit+0xa8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d11d      	bne.n	8001f42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <HAL_TIM_MspPostInit+0xac>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4a21      	ldr	r2, [pc, #132]	; (8001f90 <HAL_TIM_MspPostInit+0xac>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <HAL_TIM_MspPostInit+0xac>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f1e:	23c0      	movs	r3, #192	; 0xc0
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3c:	f000 fbb2 	bl	80026a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f40:	e020      	b.n	8001f84 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <HAL_TIM_MspPostInit+0xb0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d11b      	bne.n	8001f84 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_TIM_MspPostInit+0xac>)
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f50:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <HAL_TIM_MspPostInit+0xac>)
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_TIM_MspPostInit+0xac>)
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f64:	2340      	movs	r3, #64	; 0x40
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f74:	2302      	movs	r3, #2
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4806      	ldr	r0, [pc, #24]	; (8001f98 <HAL_TIM_MspPostInit+0xb4>)
 8001f80:	f000 fb90 	bl	80026a4 <HAL_GPIO_Init>
}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40000800 	.word	0x40000800
 8001f98:	48000400 	.word	0x48000400

08001f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b0ae      	sub	sp, #184	; 0xb8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	2288      	movs	r2, #136	; 0x88
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 f969 	bl	8006294 <memset>
  if(huart->Instance==UART4)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a4a      	ldr	r2, [pc, #296]	; (80020f0 <HAL_UART_MspInit+0x154>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d144      	bne.n	8002056 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001fcc:	2308      	movs	r3, #8
 8001fce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f001 fb71 	bl	80036c0 <HAL_RCCEx_PeriphCLKConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fe4:	f7ff feec 	bl	8001dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fe8:	4b42      	ldr	r3, [pc, #264]	; (80020f4 <HAL_UART_MspInit+0x158>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	4a41      	ldr	r2, [pc, #260]	; (80020f4 <HAL_UART_MspInit+0x158>)
 8001fee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff4:	4b3f      	ldr	r3, [pc, #252]	; (80020f4 <HAL_UART_MspInit+0x158>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <HAL_UART_MspInit+0x158>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	4a3b      	ldr	r2, [pc, #236]	; (80020f4 <HAL_UART_MspInit+0x158>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200c:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <HAL_UART_MspInit+0x158>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002018:	2303      	movs	r3, #3
 800201a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002030:	2308      	movs	r3, #8
 8002032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800203a:	4619      	mov	r1, r3
 800203c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002040:	f000 fb30 	bl	80026a4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002044:	2200      	movs	r2, #0
 8002046:	2100      	movs	r1, #0
 8002048:	2034      	movs	r0, #52	; 0x34
 800204a:	f000 fa76 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800204e:	2034      	movs	r0, #52	; 0x34
 8002050:	f000 fa8f 	bl	8002572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002054:	e047      	b.n	80020e6 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART3)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a27      	ldr	r2, [pc, #156]	; (80020f8 <HAL_UART_MspInit+0x15c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d142      	bne.n	80020e6 <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002060:	2304      	movs	r3, #4
 8002062:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002064:	2300      	movs	r3, #0
 8002066:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	4618      	mov	r0, r3
 800206e:	f001 fb27 	bl	80036c0 <HAL_RCCEx_PeriphCLKConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002078:	f7ff fea2 	bl	8001dc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_UART_MspInit+0x158>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <HAL_UART_MspInit+0x158>)
 8002082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002086:	6593      	str	r3, [r2, #88]	; 0x58
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_UART_MspInit+0x158>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_UART_MspInit+0x158>)
 8002096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002098:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <HAL_UART_MspInit+0x158>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_UART_MspInit+0x158>)
 80020a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020ac:	2330      	movs	r3, #48	; 0x30
 80020ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020be:	2303      	movs	r3, #3
 80020c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020c4:	2307      	movs	r3, #7
 80020c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020ce:	4619      	mov	r1, r3
 80020d0:	480a      	ldr	r0, [pc, #40]	; (80020fc <HAL_UART_MspInit+0x160>)
 80020d2:	f000 fae7 	bl	80026a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	2027      	movs	r0, #39	; 0x27
 80020dc:	f000 fa2d 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020e0:	2027      	movs	r0, #39	; 0x27
 80020e2:	f000 fa46 	bl	8002572 <HAL_NVIC_EnableIRQ>
}
 80020e6:	bf00      	nop
 80020e8:	37b8      	adds	r7, #184	; 0xb8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40004c00 	.word	0x40004c00
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40004800 	.word	0x40004800
 80020fc:	48000800 	.word	0x48000800

08002100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <NMI_Handler+0x4>

08002106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210a:	e7fe      	b.n	800210a <HardFault_Handler+0x4>

0800210c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <MemManage_Handler+0x4>

08002112 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <BusFault_Handler+0x4>

08002118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <UsageFault_Handler+0x4>

0800211e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214c:	f000 f8fa 	bl	8002344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800215a:	f002 f81b 	bl	8004194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000140 	.word	0x20000140

08002168 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <TIM3_IRQHandler+0x10>)
 800216e:	f002 f811 	bl	8004194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200000a8 	.word	0x200000a8

0800217c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM4_IRQHandler+0x10>)
 8002182:	f002 f807 	bl	8004194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200000f4 	.word	0x200000f4

08002190 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <USART3_IRQHandler+0x10>)
 8002196:	f003 f82d 	bl	80051f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000210 	.word	0x20000210

080021a4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <UART4_IRQHandler+0x10>)
 80021aa:	f003 f823 	bl	80051f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000018c 	.word	0x2000018c

080021b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <_sbrk+0x5c>)
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <_sbrk+0x60>)
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <_sbrk+0x64>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <_sbrk+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e8:	f004 f810 	bl	800620c <__errno>
 80021ec:	4603      	mov	r3, r0
 80021ee:	220c      	movs	r2, #12
 80021f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	e009      	b.n	800220c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <_sbrk+0x64>)
 8002208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20018000 	.word	0x20018000
 8002218:	00000400 	.word	0x00000400
 800221c:	200002a4 	.word	0x200002a4
 8002220:	200002c0 	.word	0x200002c0

08002224 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <SystemInit+0x20>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <SystemInit+0x20>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002280 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800224c:	f7ff ffea 	bl	8002224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <LoopForever+0x6>)
  ldr r1, =_edata
 8002252:	490d      	ldr	r1, [pc, #52]	; (8002288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002254:	4a0d      	ldr	r2, [pc, #52]	; (800228c <LoopForever+0xe>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002258:	e002      	b.n	8002260 <LoopCopyDataInit>

0800225a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800225c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225e:	3304      	adds	r3, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002264:	d3f9      	bcc.n	800225a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002268:	4c0a      	ldr	r4, [pc, #40]	; (8002294 <LoopForever+0x16>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800226c:	e001      	b.n	8002272 <LoopFillZerobss>

0800226e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002270:	3204      	adds	r2, #4

08002272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002274:	d3fb      	bcc.n	800226e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002276:	f003 ffcf 	bl	8006218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800227a:	f7ff fbc3 	bl	8001a04 <main>

0800227e <LoopForever>:

LoopForever:
    b LoopForever
 800227e:	e7fe      	b.n	800227e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002280:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002288:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800228c:	08007d80 	.word	0x08007d80
  ldr r2, =_sbss
 8002290:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002294:	200002bc 	.word	0x200002bc

08002298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC1_2_IRQHandler>

0800229a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 f93d 	bl	8002524 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022aa:	200f      	movs	r0, #15
 80022ac:	f000 f80e 	bl	80022cc <HAL_InitTick>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	71fb      	strb	r3, [r7, #7]
 80022ba:	e001      	b.n	80022c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022bc:	f7ff fd86 	bl	8001dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022c0:	79fb      	ldrb	r3, [r7, #7]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022d8:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_InitTick+0x6c>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d023      	beq.n	8002328 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022e0:	4b16      	ldr	r3, [pc, #88]	; (800233c <HAL_InitTick+0x70>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_InitTick+0x6c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f949 	bl	800258e <HAL_SYSTICK_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10f      	bne.n	8002322 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b0f      	cmp	r3, #15
 8002306:	d809      	bhi.n	800231c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002308:	2200      	movs	r2, #0
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	f000 f913 	bl	800253a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <HAL_InitTick+0x74>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e007      	b.n	800232c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e004      	b.n	800232c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	e001      	b.n	800232c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800232c:	7bfb      	ldrb	r3, [r7, #15]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000020 	.word	0x20000020
 800233c:	20000018 	.word	0x20000018
 8002340:	2000001c 	.word	0x2000001c

08002344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x20>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4413      	add	r3, r2
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_IncTick+0x24>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000020 	.word	0x20000020
 8002368:	200002a8 	.word	0x200002a8

0800236c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return uwTick;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_GetTick+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	200002a8 	.word	0x200002a8

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4907      	ldr	r1, [pc, #28]	; (8002420 <__NVIC_EnableIRQ+0x38>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	; (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	; (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
         );
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	; 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f0:	d301      	bcc.n	80024f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00f      	b.n	8002516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <SysTick_Config+0x40>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fe:	210f      	movs	r1, #15
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f7ff ff8e 	bl	8002424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <SysTick_Config+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <SysTick_Config+0x40>)
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff29 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800254c:	f7ff ff3e 	bl	80023cc <__NVIC_GetPriorityGrouping>
 8002550:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	6978      	ldr	r0, [r7, #20]
 8002558:	f7ff ff8e 	bl	8002478 <NVIC_EncodePriority>
 800255c:	4602      	mov	r2, r0
 800255e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff5d 	bl	8002424 <__NVIC_SetPriority>
}
 800256a:	bf00      	nop
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff31 	bl	80023e8 <__NVIC_EnableIRQ>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ffa2 	bl	80024e0 <SysTick_Config>
 800259c:	4603      	mov	r3, r0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d008      	beq.n	80025d0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2204      	movs	r2, #4
 80025c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e022      	b.n	8002616 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 020e 	bic.w	r2, r2, #14
 80025de:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	f003 021c 	and.w	r2, r3, #28
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	2101      	movs	r1, #1
 80025fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002602:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d005      	beq.n	8002646 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2204      	movs	r2, #4
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	e029      	b.n	800269a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 020e 	bic.w	r2, r2, #14
 8002654:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0201 	bic.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f003 021c 	and.w	r2, r3, #28
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2101      	movs	r1, #1
 8002674:	fa01 f202 	lsl.w	r2, r1, r2
 8002678:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4798      	blx	r3
    }
  }
  return status;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026b2:	e17f      	b.n	80029b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	fa01 f303 	lsl.w	r3, r1, r3
 80026c0:	4013      	ands	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8171 	beq.w	80029ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d005      	beq.n	80026e4 <HAL_GPIO_Init+0x40>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d130      	bne.n	8002746 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2203      	movs	r2, #3
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800271a:	2201      	movs	r2, #1
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	f003 0201 	and.w	r2, r3, #1
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b03      	cmp	r3, #3
 8002750:	d118      	bne.n	8002784 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002758:	2201      	movs	r2, #1
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	08db      	lsrs	r3, r3, #3
 800276e:	f003 0201 	and.w	r2, r3, #1
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b03      	cmp	r3, #3
 800278e:	d017      	beq.n	80027c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d123      	bne.n	8002814 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	08da      	lsrs	r2, r3, #3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3208      	adds	r2, #8
 80027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	220f      	movs	r2, #15
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	08da      	lsrs	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3208      	adds	r2, #8
 800280e:	6939      	ldr	r1, [r7, #16]
 8002810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0203 	and.w	r2, r3, #3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80ac 	beq.w	80029ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002856:	4b5f      	ldr	r3, [pc, #380]	; (80029d4 <HAL_GPIO_Init+0x330>)
 8002858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285a:	4a5e      	ldr	r2, [pc, #376]	; (80029d4 <HAL_GPIO_Init+0x330>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6613      	str	r3, [r2, #96]	; 0x60
 8002862:	4b5c      	ldr	r3, [pc, #368]	; (80029d4 <HAL_GPIO_Init+0x330>)
 8002864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800286e:	4a5a      	ldr	r2, [pc, #360]	; (80029d8 <HAL_GPIO_Init+0x334>)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	220f      	movs	r2, #15
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002898:	d025      	beq.n	80028e6 <HAL_GPIO_Init+0x242>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4f      	ldr	r2, [pc, #316]	; (80029dc <HAL_GPIO_Init+0x338>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01f      	beq.n	80028e2 <HAL_GPIO_Init+0x23e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4e      	ldr	r2, [pc, #312]	; (80029e0 <HAL_GPIO_Init+0x33c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d019      	beq.n	80028de <HAL_GPIO_Init+0x23a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4d      	ldr	r2, [pc, #308]	; (80029e4 <HAL_GPIO_Init+0x340>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_GPIO_Init+0x236>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4c      	ldr	r2, [pc, #304]	; (80029e8 <HAL_GPIO_Init+0x344>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00d      	beq.n	80028d6 <HAL_GPIO_Init+0x232>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4b      	ldr	r2, [pc, #300]	; (80029ec <HAL_GPIO_Init+0x348>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <HAL_GPIO_Init+0x22e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4a      	ldr	r2, [pc, #296]	; (80029f0 <HAL_GPIO_Init+0x34c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_GPIO_Init+0x22a>
 80028ca:	2306      	movs	r3, #6
 80028cc:	e00c      	b.n	80028e8 <HAL_GPIO_Init+0x244>
 80028ce:	2307      	movs	r3, #7
 80028d0:	e00a      	b.n	80028e8 <HAL_GPIO_Init+0x244>
 80028d2:	2305      	movs	r3, #5
 80028d4:	e008      	b.n	80028e8 <HAL_GPIO_Init+0x244>
 80028d6:	2304      	movs	r3, #4
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x244>
 80028da:	2303      	movs	r3, #3
 80028dc:	e004      	b.n	80028e8 <HAL_GPIO_Init+0x244>
 80028de:	2302      	movs	r3, #2
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_Init+0x244>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_GPIO_Init+0x244>
 80028e6:	2300      	movs	r3, #0
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	f002 0203 	and.w	r2, r2, #3
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	4093      	lsls	r3, r2
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028f8:	4937      	ldr	r1, [pc, #220]	; (80029d8 <HAL_GPIO_Init+0x334>)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <HAL_GPIO_Init+0x350>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800292a:	4a32      	ldr	r2, [pc, #200]	; (80029f4 <HAL_GPIO_Init+0x350>)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002930:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <HAL_GPIO_Init+0x350>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002954:	4a27      	ldr	r2, [pc, #156]	; (80029f4 <HAL_GPIO_Init+0x350>)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800295a:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <HAL_GPIO_Init+0x350>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800297e:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <HAL_GPIO_Init+0x350>)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <HAL_GPIO_Init+0x350>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	43db      	mvns	r3, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029a8:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <HAL_GPIO_Init+0x350>)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3301      	adds	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f47f ae78 	bne.w	80026b4 <HAL_GPIO_Init+0x10>
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40010000 	.word	0x40010000
 80029dc:	48000400 	.word	0x48000400
 80029e0:	48000800 	.word	0x48000800
 80029e4:	48000c00 	.word	0x48000c00
 80029e8:	48001000 	.word	0x48001000
 80029ec:	48001400 	.word	0x48001400
 80029f0:	48001800 	.word	0x48001800
 80029f4:	40010400 	.word	0x40010400

080029f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <HAL_PWREx_GetVoltageRange+0x18>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40007000 	.word	0x40007000

08002a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a22:	d130      	bne.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a24:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a30:	d038      	beq.n	8002aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a42:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2232      	movs	r2, #50	; 0x32
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0c9b      	lsrs	r3, r3, #18
 8002a54:	3301      	adds	r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a58:	e002      	b.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6c:	d102      	bne.n	8002a74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f2      	bne.n	8002a5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a80:	d110      	bne.n	8002aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e00f      	b.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a92:	d007      	beq.n	8002aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a9c:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40007000 	.word	0x40007000
 8002ab8:	20000018 	.word	0x20000018
 8002abc:	431bde83 	.word	0x431bde83

08002ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e3ca      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad2:	4b97      	ldr	r3, [pc, #604]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002adc:	4b94      	ldr	r3, [pc, #592]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80e4 	beq.w	8002cbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_RCC_OscConfig+0x4a>
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	2b0c      	cmp	r3, #12
 8002afe:	f040 808b 	bne.w	8002c18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	f040 8087 	bne.w	8002c18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b0a:	4b89      	ldr	r3, [pc, #548]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x62>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e3a2      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1a      	ldr	r2, [r3, #32]
 8002b26:	4b82      	ldr	r3, [pc, #520]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_RCC_OscConfig+0x7c>
 8002b32:	4b7f      	ldr	r3, [pc, #508]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b3a:	e005      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
 8002b3c:	4b7c      	ldr	r3, [pc, #496]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d223      	bcs.n	8002b94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fd55 	bl	8003600 <RCC_SetFlashLatencyFromMSIRange>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e383      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b60:	4b73      	ldr	r3, [pc, #460]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a72      	ldr	r2, [pc, #456]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b66:	f043 0308 	orr.w	r3, r3, #8
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b70      	ldr	r3, [pc, #448]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	496d      	ldr	r1, [pc, #436]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7e:	4b6c      	ldr	r3, [pc, #432]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	4968      	ldr	r1, [pc, #416]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
 8002b92:	e025      	b.n	8002be0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b94:	4b66      	ldr	r3, [pc, #408]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a65      	ldr	r2, [pc, #404]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	f043 0308 	orr.w	r3, r3, #8
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b63      	ldr	r3, [pc, #396]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4960      	ldr	r1, [pc, #384]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb2:	4b5f      	ldr	r3, [pc, #380]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	495b      	ldr	r1, [pc, #364]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d109      	bne.n	8002be0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fd15 	bl	8003600 <RCC_SetFlashLatencyFromMSIRange>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e343      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002be0:	f000 fc4a 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b52      	ldr	r3, [pc, #328]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	4950      	ldr	r1, [pc, #320]	; (8002d34 <HAL_RCC_OscConfig+0x274>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfc:	4a4e      	ldr	r2, [pc, #312]	; (8002d38 <HAL_RCC_OscConfig+0x278>)
 8002bfe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c00:	4b4e      	ldr	r3, [pc, #312]	; (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fb61 	bl	80022cc <HAL_InitTick>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d052      	beq.n	8002cba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	e327      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d032      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c20:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a42      	ldr	r2, [pc, #264]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c2c:	f7ff fb9e 	bl	800236c <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c34:	f7ff fb9a 	bl	800236c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e310      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c46:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c52:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a36      	ldr	r2, [pc, #216]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	4931      	ldr	r1, [pc, #196]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c70:	4b2f      	ldr	r3, [pc, #188]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	492c      	ldr	r1, [pc, #176]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
 8002c84:	e01a      	b.n	8002cbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c86:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a29      	ldr	r2, [pc, #164]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c92:	f7ff fb6b 	bl	800236c <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c9a:	f7ff fb67 	bl	800236c <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e2dd      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cac:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x1da>
 8002cb8:	e000      	b.n	8002cbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d074      	beq.n	8002db2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d005      	beq.n	8002cda <HAL_RCC_OscConfig+0x21a>
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d10e      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cda:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d064      	beq.n	8002db0 <HAL_RCC_OscConfig+0x2f0>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d160      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e2ba      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x24a>
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	e026      	b.n	8002d58 <HAL_RCC_OscConfig+0x298>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d12:	d115      	bne.n	8002d40 <HAL_RCC_OscConfig+0x280>
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a02      	ldr	r2, [pc, #8]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	e014      	b.n	8002d58 <HAL_RCC_OscConfig+0x298>
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08007cc4 	.word	0x08007cc4
 8002d38:	20000018 	.word	0x20000018
 8002d3c:	2000001c 	.word	0x2000001c
 8002d40:	4ba0      	ldr	r3, [pc, #640]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a9f      	ldr	r2, [pc, #636]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b9d      	ldr	r3, [pc, #628]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a9c      	ldr	r2, [pc, #624]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7ff fb04 	bl	800236c <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7ff fb00 	bl	800236c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e276      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7a:	4b92      	ldr	r3, [pc, #584]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x2a8>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7ff faf0 	bl	800236c <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7ff faec 	bl	800236c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e262      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002da2:	4b88      	ldr	r3, [pc, #544]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x2d0>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d060      	beq.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x310>
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b0c      	cmp	r3, #12
 8002dc8:	d119      	bne.n	8002dfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d116      	bne.n	8002dfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd0:	4b7c      	ldr	r3, [pc, #496]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_OscConfig+0x328>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e23f      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de8:	4b76      	ldr	r3, [pc, #472]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	4973      	ldr	r1, [pc, #460]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dfc:	e040      	b.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d023      	beq.n	8002e4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e06:	4b6f      	ldr	r3, [pc, #444]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a6e      	ldr	r2, [pc, #440]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7ff faab 	bl	800236c <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7ff faa7 	bl	800236c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e21d      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e2c:	4b65      	ldr	r3, [pc, #404]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b62      	ldr	r3, [pc, #392]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	495f      	ldr	r1, [pc, #380]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
 8002e4c:	e018      	b.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4e:	4b5d      	ldr	r3, [pc, #372]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a5c      	ldr	r2, [pc, #368]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5a:	f7ff fa87 	bl	800236c <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e62:	f7ff fa83 	bl	800236c <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e1f9      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e74:	4b53      	ldr	r3, [pc, #332]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f0      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d03c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01c      	beq.n	8002ece <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e94:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9a:	4a4a      	ldr	r2, [pc, #296]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7ff fa62 	bl	800236c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7ff fa5e 	bl	800236c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e1d4      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ebe:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0ef      	beq.n	8002eac <HAL_RCC_OscConfig+0x3ec>
 8002ecc:	e01b      	b.n	8002f06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ece:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed4:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ede:	f7ff fa45 	bl	800236c <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee6:	f7ff fa41 	bl	800236c <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1b7      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ef8:	4b32      	ldr	r3, [pc, #200]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1ef      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80a6 	beq.w	8003060 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f14:	2300      	movs	r3, #0
 8002f16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f18:	4b2a      	ldr	r3, [pc, #168]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f28:	4a26      	ldr	r2, [pc, #152]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f30:	4b24      	ldr	r3, [pc, #144]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f40:	4b21      	ldr	r3, [pc, #132]	; (8002fc8 <HAL_RCC_OscConfig+0x508>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d118      	bne.n	8002f7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f4c:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <HAL_RCC_OscConfig+0x508>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <HAL_RCC_OscConfig+0x508>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f58:	f7ff fa08 	bl	800236c <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f60:	f7ff fa04 	bl	800236c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e17a      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <HAL_RCC_OscConfig+0x508>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d108      	bne.n	8002f98 <HAL_RCC_OscConfig+0x4d8>
 8002f86:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8c:	4a0d      	ldr	r2, [pc, #52]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f96:	e029      	b.n	8002fec <HAL_RCC_OscConfig+0x52c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b05      	cmp	r3, #5
 8002f9e:	d115      	bne.n	8002fcc <HAL_RCC_OscConfig+0x50c>
 8002fa0:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	4a03      	ldr	r2, [pc, #12]	; (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fc0:	e014      	b.n	8002fec <HAL_RCC_OscConfig+0x52c>
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	4b9c      	ldr	r3, [pc, #624]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	4a9b      	ldr	r2, [pc, #620]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fdc:	4b98      	ldr	r3, [pc, #608]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	4a97      	ldr	r2, [pc, #604]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8002fe4:	f023 0304 	bic.w	r3, r3, #4
 8002fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d016      	beq.n	8003022 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7ff f9ba 	bl	800236c <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7ff f9b6 	bl	800236c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e12a      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003012:	4b8b      	ldr	r3, [pc, #556]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ed      	beq.n	8002ffc <HAL_RCC_OscConfig+0x53c>
 8003020:	e015      	b.n	800304e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7ff f9a3 	bl	800236c <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7ff f99f 	bl	800236c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e113      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003040:	4b7f      	ldr	r3, [pc, #508]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1ed      	bne.n	800302a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d105      	bne.n	8003060 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003054:	4b7a      	ldr	r3, [pc, #488]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	4a79      	ldr	r2, [pc, #484]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 800305a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800305e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80fe 	beq.w	8003266 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	2b02      	cmp	r3, #2
 8003070:	f040 80d0 	bne.w	8003214 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003074:	4b72      	ldr	r3, [pc, #456]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f003 0203 	and.w	r2, r3, #3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	429a      	cmp	r2, r3
 8003086:	d130      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	3b01      	subs	r3, #1
 8003094:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d127      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d11f      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030b4:	2a07      	cmp	r2, #7
 80030b6:	bf14      	ite	ne
 80030b8:	2201      	movne	r2, #1
 80030ba:	2200      	moveq	r2, #0
 80030bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030be:	4293      	cmp	r3, r2
 80030c0:	d113      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	3b01      	subs	r3, #1
 80030d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d109      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	3b01      	subs	r3, #1
 80030e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d06e      	beq.n	80031c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b0c      	cmp	r3, #12
 80030ee:	d069      	beq.n	80031c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030f0:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030fc:	4b50      	ldr	r3, [pc, #320]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0ad      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800310c:	4b4c      	ldr	r3, [pc, #304]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a4b      	ldr	r2, [pc, #300]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8003112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003118:	f7ff f928 	bl	800236c <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7ff f924 	bl	800236c <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e09a      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003132:	4b43      	ldr	r3, [pc, #268]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800313e:	4b40      	ldr	r3, [pc, #256]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	4b40      	ldr	r3, [pc, #256]	; (8003244 <HAL_RCC_OscConfig+0x784>)
 8003144:	4013      	ands	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800314e:	3a01      	subs	r2, #1
 8003150:	0112      	lsls	r2, r2, #4
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003158:	0212      	lsls	r2, r2, #8
 800315a:	4311      	orrs	r1, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003160:	0852      	lsrs	r2, r2, #1
 8003162:	3a01      	subs	r2, #1
 8003164:	0552      	lsls	r2, r2, #21
 8003166:	4311      	orrs	r1, r2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800316c:	0852      	lsrs	r2, r2, #1
 800316e:	3a01      	subs	r2, #1
 8003170:	0652      	lsls	r2, r2, #25
 8003172:	4311      	orrs	r1, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003178:	0912      	lsrs	r2, r2, #4
 800317a:	0452      	lsls	r2, r2, #17
 800317c:	430a      	orrs	r2, r1
 800317e:	4930      	ldr	r1, [pc, #192]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8003180:	4313      	orrs	r3, r2
 8003182:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003184:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2d      	ldr	r2, [pc, #180]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 800318a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800318e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003190:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a2a      	ldr	r2, [pc, #168]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800319c:	f7ff f8e6 	bl	800236c <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7ff f8e2 	bl	800236c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e058      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b6:	4b22      	ldr	r3, [pc, #136]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c2:	e050      	b.n	8003266 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e04f      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d148      	bne.n	8003266 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031d4:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a19      	ldr	r2, [pc, #100]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 80031da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031e0:	4b17      	ldr	r3, [pc, #92]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4a16      	ldr	r2, [pc, #88]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 80031e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031ec:	f7ff f8be 	bl	800236c <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7ff f8ba 	bl	800236c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e030      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003206:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x734>
 8003212:	e028      	b.n	8003266 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d023      	beq.n	8003262 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a08      	ldr	r2, [pc, #32]	; (8003240 <HAL_RCC_OscConfig+0x780>)
 8003220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7ff f8a1 	bl	800236c <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800322c:	e00c      	b.n	8003248 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322e:	f7ff f89d 	bl	800236c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d905      	bls.n	8003248 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e013      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
 8003240:	40021000 	.word	0x40021000
 8003244:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_OscConfig+0x7b0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ec      	bne.n	800322e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCC_OscConfig+0x7b0>)
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	4905      	ldr	r1, [pc, #20]	; (8003270 <HAL_RCC_OscConfig+0x7b0>)
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCC_OscConfig+0x7b4>)
 800325c:	4013      	ands	r3, r2
 800325e:	60cb      	str	r3, [r1, #12]
 8003260:	e001      	b.n	8003266 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000
 8003274:	feeefffc 	.word	0xfeeefffc

08003278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0e7      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b75      	ldr	r3, [pc, #468]	; (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d910      	bls.n	80032bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b72      	ldr	r3, [pc, #456]	; (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 0207 	bic.w	r2, r3, #7
 80032a2:	4970      	ldr	r1, [pc, #448]	; (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b6e      	ldr	r3, [pc, #440]	; (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0cf      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d010      	beq.n	80032ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	4b66      	ldr	r3, [pc, #408]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d908      	bls.n	80032ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b63      	ldr	r3, [pc, #396]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4960      	ldr	r1, [pc, #384]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d04c      	beq.n	8003390 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fe:	4b5a      	ldr	r3, [pc, #360]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d121      	bne.n	800334e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0a6      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003316:	4b54      	ldr	r3, [pc, #336]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d115      	bne.n	800334e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e09a      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800332e:	4b4e      	ldr	r3, [pc, #312]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e08e      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800333e:	4b4a      	ldr	r3, [pc, #296]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e086      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800334e:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f023 0203 	bic.w	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	4943      	ldr	r1, [pc, #268]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 800335c:	4313      	orrs	r3, r2
 800335e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003360:	f7ff f804 	bl	800236c <HAL_GetTick>
 8003364:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	e00a      	b.n	800337e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003368:	f7ff f800 	bl	800236c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e06e      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 020c 	and.w	r2, r3, #12
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	429a      	cmp	r2, r3
 800338e:	d1eb      	bne.n	8003368 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d010      	beq.n	80033be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d208      	bcs.n	80033be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ac:	4b2e      	ldr	r3, [pc, #184]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	492b      	ldr	r1, [pc, #172]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033be:	4b29      	ldr	r3, [pc, #164]	; (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d210      	bcs.n	80033ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033cc:	4b25      	ldr	r3, [pc, #148]	; (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f023 0207 	bic.w	r2, r3, #7
 80033d4:	4923      	ldr	r1, [pc, #140]	; (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033dc:	4b21      	ldr	r3, [pc, #132]	; (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e036      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033fa:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	4918      	ldr	r1, [pc, #96]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003408:	4313      	orrs	r3, r2
 800340a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d009      	beq.n	800342c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4910      	ldr	r1, [pc, #64]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800342c:	f000 f824 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	490b      	ldr	r1, [pc, #44]	; (800346c <HAL_RCC_ClockConfig+0x1f4>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
 8003448:	4a09      	ldr	r2, [pc, #36]	; (8003470 <HAL_RCC_ClockConfig+0x1f8>)
 800344a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <HAL_RCC_ClockConfig+0x1fc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7fe ff3b 	bl	80022cc <HAL_InitTick>
 8003456:	4603      	mov	r3, r0
 8003458:	72fb      	strb	r3, [r7, #11]

  return status;
 800345a:	7afb      	ldrb	r3, [r7, #11]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40022000 	.word	0x40022000
 8003468:	40021000 	.word	0x40021000
 800346c:	08007cc4 	.word	0x08007cc4
 8003470:	20000018 	.word	0x20000018
 8003474:	2000001c 	.word	0x2000001c

08003478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	2300      	movs	r3, #0
 8003484:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003486:	4b3e      	ldr	r3, [pc, #248]	; (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003490:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x34>
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	d121      	bne.n	80034ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d11e      	bne.n	80034ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034ac:	4b34      	ldr	r3, [pc, #208]	; (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034b8:	4b31      	ldr	r3, [pc, #196]	; (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	e005      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034c8:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034d4:	4a2b      	ldr	r2, [pc, #172]	; (8003584 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10d      	bne.n	8003500 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034e8:	e00a      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d102      	bne.n	80034f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034f0:	4b25      	ldr	r3, [pc, #148]	; (8003588 <HAL_RCC_GetSysClockFreq+0x110>)
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	e004      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034fc:	4b23      	ldr	r3, [pc, #140]	; (800358c <HAL_RCC_GetSysClockFreq+0x114>)
 80034fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d134      	bne.n	8003570 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003506:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d003      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0xa6>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d003      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0xac>
 800351c:	e005      	b.n	800352a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_RCC_GetSysClockFreq+0x110>)
 8003520:	617b      	str	r3, [r7, #20]
      break;
 8003522:	e005      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003524:	4b19      	ldr	r3, [pc, #100]	; (800358c <HAL_RCC_GetSysClockFreq+0x114>)
 8003526:	617b      	str	r3, [r7, #20]
      break;
 8003528:	e002      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	617b      	str	r3, [r7, #20]
      break;
 800352e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003530:	4b13      	ldr	r3, [pc, #76]	; (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	3301      	adds	r3, #1
 800353c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	fb03 f202 	mul.w	r2, r3, r2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	0e5b      	lsrs	r3, r3, #25
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	3301      	adds	r3, #1
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003570:	69bb      	ldr	r3, [r7, #24]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3724      	adds	r7, #36	; 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	08007cdc 	.word	0x08007cdc
 8003588:	00f42400 	.word	0x00f42400
 800358c:	007a1200 	.word	0x007a1200

08003590 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003594:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000018 	.word	0x20000018

080035a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035ac:	f7ff fff0 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4904      	ldr	r1, [pc, #16]	; (80035d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	08007cd4 	.word	0x08007cd4

080035d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035d8:	f7ff ffda 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	0adb      	lsrs	r3, r3, #11
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	4904      	ldr	r1, [pc, #16]	; (80035fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000
 80035fc:	08007cd4 	.word	0x08007cd4

08003600 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800360c:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003618:	f7ff f9ee 	bl	80029f8 <HAL_PWREx_GetVoltageRange>
 800361c:	6178      	str	r0, [r7, #20]
 800361e:	e014      	b.n	800364a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003620:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003624:	4a24      	ldr	r2, [pc, #144]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362a:	6593      	str	r3, [r2, #88]	; 0x58
 800362c:	4b22      	ldr	r3, [pc, #136]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003638:	f7ff f9de 	bl	80029f8 <HAL_PWREx_GetVoltageRange>
 800363c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800363e:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003648:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003650:	d10b      	bne.n	800366a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b80      	cmp	r3, #128	; 0x80
 8003656:	d919      	bls.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2ba0      	cmp	r3, #160	; 0xa0
 800365c:	d902      	bls.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800365e:	2302      	movs	r3, #2
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	e013      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003664:	2301      	movs	r3, #1
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	e010      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b80      	cmp	r3, #128	; 0x80
 800366e:	d902      	bls.n	8003676 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003670:	2303      	movs	r3, #3
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	e00a      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b80      	cmp	r3, #128	; 0x80
 800367a:	d102      	bne.n	8003682 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800367c:	2302      	movs	r3, #2
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	e004      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b70      	cmp	r3, #112	; 0x70
 8003686:	d101      	bne.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003688:	2301      	movs	r3, #1
 800368a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 0207 	bic.w	r2, r3, #7
 8003694:	4909      	ldr	r1, [pc, #36]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d001      	beq.n	80036ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40022000 	.word	0x40022000

080036c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036c8:	2300      	movs	r3, #0
 80036ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036cc:	2300      	movs	r3, #0
 80036ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d041      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036e4:	d02a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036ea:	d824      	bhi.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036f0:	d008      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036f6:	d81e      	bhi.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003700:	d010      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003702:	e018      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003704:	4b86      	ldr	r3, [pc, #536]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a85      	ldr	r2, [pc, #532]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003710:	e015      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fabb 	bl	8003c94 <RCCEx_PLLSAI1_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003722:	e00c      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3320      	adds	r3, #32
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fba6 	bl	8003e7c <RCCEx_PLLSAI2_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003734:	e003      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	74fb      	strb	r3, [r7, #19]
      break;
 800373a:	e000      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800373c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10b      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003744:	4b76      	ldr	r3, [pc, #472]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003752:	4973      	ldr	r1, [pc, #460]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800375a:	e001      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d041      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003770:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003774:	d02a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003776:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800377a:	d824      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800377c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003780:	d008      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003786:	d81e      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800378c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003790:	d010      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003792:	e018      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003794:	4b62      	ldr	r3, [pc, #392]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4a61      	ldr	r2, [pc, #388]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037a0:	e015      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fa73 	bl	8003c94 <RCCEx_PLLSAI1_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037b2:	e00c      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3320      	adds	r3, #32
 80037b8:	2100      	movs	r1, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fb5e 	bl	8003e7c <RCCEx_PLLSAI2_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037c4:	e003      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	74fb      	strb	r3, [r7, #19]
      break;
 80037ca:	e000      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037d4:	4b52      	ldr	r3, [pc, #328]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e2:	494f      	ldr	r1, [pc, #316]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037ea:	e001      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80a0 	beq.w	800393e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fe:	2300      	movs	r3, #0
 8003800:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003812:	2300      	movs	r3, #0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003818:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	4a40      	ldr	r2, [pc, #256]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003822:	6593      	str	r3, [r2, #88]	; 0x58
 8003824:	4b3e      	ldr	r3, [pc, #248]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003830:	2301      	movs	r3, #1
 8003832:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003834:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a3a      	ldr	r2, [pc, #232]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800383a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800383e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003840:	f7fe fd94 	bl	800236c <HAL_GetTick>
 8003844:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003846:	e009      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003848:	f7fe fd90 	bl	800236c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d902      	bls.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	74fb      	strb	r3, [r7, #19]
        break;
 800385a:	e005      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800385c:	4b31      	ldr	r3, [pc, #196]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ef      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d15c      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800386e:	4b2c      	ldr	r3, [pc, #176]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003878:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01f      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	429a      	cmp	r2, r3
 800388a:	d019      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800388c:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003896:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003898:	4b21      	ldr	r3, [pc, #132]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	4a20      	ldr	r2, [pc, #128]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038a8:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038b8:	4a19      	ldr	r2, [pc, #100]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ca:	f7fe fd4f 	bl	800236c <HAL_GetTick>
 80038ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d0:	e00b      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fe fd4b 	bl	800236c <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d902      	bls.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	74fb      	strb	r3, [r7, #19]
            break;
 80038e8:	e006      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0ec      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10c      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038fe:	4b08      	ldr	r3, [pc, #32]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800390e:	4904      	ldr	r1, [pc, #16]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003916:	e009      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	74bb      	strb	r3, [r7, #18]
 800391c:	e006      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
 8003924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800392c:	7c7b      	ldrb	r3, [r7, #17]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003932:	4b9e      	ldr	r3, [pc, #632]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	4a9d      	ldr	r2, [pc, #628]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800394a:	4b98      	ldr	r3, [pc, #608]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	f023 0203 	bic.w	r2, r3, #3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	4994      	ldr	r1, [pc, #592]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800396c:	4b8f      	ldr	r3, [pc, #572]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f023 020c 	bic.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397a:	498c      	ldr	r1, [pc, #560]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800398e:	4b87      	ldr	r3, [pc, #540]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	4983      	ldr	r1, [pc, #524]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039b0:	4b7e      	ldr	r3, [pc, #504]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	497b      	ldr	r1, [pc, #492]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039d2:	4b76      	ldr	r3, [pc, #472]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e0:	4972      	ldr	r1, [pc, #456]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039f4:	4b6d      	ldr	r3, [pc, #436]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a02:	496a      	ldr	r1, [pc, #424]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a16:	4b65      	ldr	r3, [pc, #404]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a24:	4961      	ldr	r1, [pc, #388]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a38:	4b5c      	ldr	r3, [pc, #368]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a46:	4959      	ldr	r1, [pc, #356]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a5a:	4b54      	ldr	r3, [pc, #336]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a68:	4950      	ldr	r1, [pc, #320]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a7c:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8a:	4948      	ldr	r1, [pc, #288]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a9e:	4b43      	ldr	r3, [pc, #268]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	493f      	ldr	r1, [pc, #252]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d028      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ac0:	4b3a      	ldr	r3, [pc, #232]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ace:	4937      	ldr	r1, [pc, #220]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ade:	d106      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae0:	4b32      	ldr	r3, [pc, #200]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a31      	ldr	r2, [pc, #196]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aea:	60d3      	str	r3, [r2, #12]
 8003aec:	e011      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003af6:	d10c      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	2101      	movs	r1, #1
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 f8c8 	bl	8003c94 <RCCEx_PLLSAI1_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d028      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b1e:	4b23      	ldr	r3, [pc, #140]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2c:	491f      	ldr	r1, [pc, #124]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b3c:	d106      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	4a1a      	ldr	r2, [pc, #104]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b48:	60d3      	str	r3, [r2, #12]
 8003b4a:	e011      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 f899 	bl	8003c94 <RCCEx_PLLSAI1_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d02b      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8a:	4908      	ldr	r1, [pc, #32]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b9a:	d109      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4a02      	ldr	r2, [pc, #8]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba6:	60d3      	str	r3, [r2, #12]
 8003ba8:	e014      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 f867 	bl	8003c94 <RCCEx_PLLSAI1_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bca:	7cfb      	ldrb	r3, [r7, #19]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d02f      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003be0:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bee:	4928      	ldr	r1, [pc, #160]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bfe:	d10d      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	2102      	movs	r1, #2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f844 	bl	8003c94 <RCCEx_PLLSAI1_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d014      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	74bb      	strb	r3, [r7, #18]
 8003c1a:	e011      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3320      	adds	r3, #32
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 f925 	bl	8003e7c <RCCEx_PLLSAI2_Config>
 8003c32:	4603      	mov	r3, r0
 8003c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c36:	7cfb      	ldrb	r3, [r7, #19]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c4c:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c5a:	490d      	ldr	r1, [pc, #52]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c6e:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c7e:	4904      	ldr	r1, [pc, #16]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c86:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000

08003c94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ca2:	4b75      	ldr	r3, [pc, #468]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d018      	beq.n	8003ce0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cae:	4b72      	ldr	r3, [pc, #456]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0203 	and.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d10d      	bne.n	8003cda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
       ||
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cc6:	4b6c      	ldr	r3, [pc, #432]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
       ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d047      	beq.n	8003d6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
 8003cde:	e044      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d018      	beq.n	8003d1a <RCCEx_PLLSAI1_Config+0x86>
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d825      	bhi.n	8003d38 <RCCEx_PLLSAI1_Config+0xa4>
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d002      	beq.n	8003cf6 <RCCEx_PLLSAI1_Config+0x62>
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d009      	beq.n	8003d08 <RCCEx_PLLSAI1_Config+0x74>
 8003cf4:	e020      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cf6:	4b60      	ldr	r3, [pc, #384]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d11d      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d06:	e01a      	b.n	8003d3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d08:	4b5b      	ldr	r3, [pc, #364]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d116      	bne.n	8003d42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d18:	e013      	b.n	8003d42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d1a:	4b57      	ldr	r3, [pc, #348]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10f      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d26:	4b54      	ldr	r3, [pc, #336]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d36:	e006      	b.n	8003d46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3c:	e004      	b.n	8003d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d3e:	bf00      	nop
 8003d40:	e002      	b.n	8003d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d42:	bf00      	nop
 8003d44:	e000      	b.n	8003d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d46:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10d      	bne.n	8003d6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d4e:	4b4a      	ldr	r3, [pc, #296]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6819      	ldr	r1, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	430b      	orrs	r3, r1
 8003d64:	4944      	ldr	r1, [pc, #272]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d17d      	bne.n	8003e6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d70:	4b41      	ldr	r3, [pc, #260]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a40      	ldr	r2, [pc, #256]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7c:	f7fe faf6 	bl	800236c <HAL_GetTick>
 8003d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d82:	e009      	b.n	8003d98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d84:	f7fe faf2 	bl	800236c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d902      	bls.n	8003d98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	73fb      	strb	r3, [r7, #15]
        break;
 8003d96:	e005      	b.n	8003da4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d98:	4b37      	ldr	r3, [pc, #220]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1ef      	bne.n	8003d84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d160      	bne.n	8003e6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d111      	bne.n	8003dd4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db0:	4b31      	ldr	r3, [pc, #196]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6892      	ldr	r2, [r2, #8]
 8003dc0:	0211      	lsls	r1, r2, #8
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	68d2      	ldr	r2, [r2, #12]
 8003dc6:	0912      	lsrs	r2, r2, #4
 8003dc8:	0452      	lsls	r2, r2, #17
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	492a      	ldr	r1, [pc, #168]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	610b      	str	r3, [r1, #16]
 8003dd2:	e027      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d112      	bne.n	8003e00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dda:	4b27      	ldr	r3, [pc, #156]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003de2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6892      	ldr	r2, [r2, #8]
 8003dea:	0211      	lsls	r1, r2, #8
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6912      	ldr	r2, [r2, #16]
 8003df0:	0852      	lsrs	r2, r2, #1
 8003df2:	3a01      	subs	r2, #1
 8003df4:	0552      	lsls	r2, r2, #21
 8003df6:	430a      	orrs	r2, r1
 8003df8:	491f      	ldr	r1, [pc, #124]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	610b      	str	r3, [r1, #16]
 8003dfe:	e011      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6892      	ldr	r2, [r2, #8]
 8003e10:	0211      	lsls	r1, r2, #8
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6952      	ldr	r2, [r2, #20]
 8003e16:	0852      	lsrs	r2, r2, #1
 8003e18:	3a01      	subs	r2, #1
 8003e1a:	0652      	lsls	r2, r2, #25
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	4916      	ldr	r1, [pc, #88]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e24:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a13      	ldr	r2, [pc, #76]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e30:	f7fe fa9c 	bl	800236c <HAL_GetTick>
 8003e34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e36:	e009      	b.n	8003e4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e38:	f7fe fa98 	bl	800236c <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d902      	bls.n	8003e4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	73fb      	strb	r3, [r7, #15]
          break;
 8003e4a:	e005      	b.n	8003e58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0ef      	beq.n	8003e38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	4904      	ldr	r1, [pc, #16]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000

08003e7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e8a:	4b6a      	ldr	r3, [pc, #424]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d018      	beq.n	8003ec8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e96:	4b67      	ldr	r3, [pc, #412]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0203 	and.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d10d      	bne.n	8003ec2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
       ||
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003eae:	4b61      	ldr	r3, [pc, #388]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	091b      	lsrs	r3, r3, #4
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
       ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d047      	beq.n	8003f52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
 8003ec6:	e044      	b.n	8003f52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d018      	beq.n	8003f02 <RCCEx_PLLSAI2_Config+0x86>
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d825      	bhi.n	8003f20 <RCCEx_PLLSAI2_Config+0xa4>
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d002      	beq.n	8003ede <RCCEx_PLLSAI2_Config+0x62>
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d009      	beq.n	8003ef0 <RCCEx_PLLSAI2_Config+0x74>
 8003edc:	e020      	b.n	8003f20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ede:	4b55      	ldr	r3, [pc, #340]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d11d      	bne.n	8003f26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eee:	e01a      	b.n	8003f26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ef0:	4b50      	ldr	r3, [pc, #320]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d116      	bne.n	8003f2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f00:	e013      	b.n	8003f2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f02:	4b4c      	ldr	r3, [pc, #304]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10f      	bne.n	8003f2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f0e:	4b49      	ldr	r3, [pc, #292]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f1e:	e006      	b.n	8003f2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
      break;
 8003f24:	e004      	b.n	8003f30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f26:	bf00      	nop
 8003f28:	e002      	b.n	8003f30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f2a:	bf00      	nop
 8003f2c:	e000      	b.n	8003f30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10d      	bne.n	8003f52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f36:	4b3f      	ldr	r3, [pc, #252]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6819      	ldr	r1, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	430b      	orrs	r3, r1
 8003f4c:	4939      	ldr	r1, [pc, #228]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d167      	bne.n	8004028 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f58:	4b36      	ldr	r3, [pc, #216]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a35      	ldr	r2, [pc, #212]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f64:	f7fe fa02 	bl	800236c <HAL_GetTick>
 8003f68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f6a:	e009      	b.n	8003f80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f6c:	f7fe f9fe 	bl	800236c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d902      	bls.n	8003f80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f7e:	e005      	b.n	8003f8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f80:	4b2c      	ldr	r3, [pc, #176]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1ef      	bne.n	8003f6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d14a      	bne.n	8004028 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d111      	bne.n	8003fbc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f98:	4b26      	ldr	r3, [pc, #152]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6892      	ldr	r2, [r2, #8]
 8003fa8:	0211      	lsls	r1, r2, #8
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68d2      	ldr	r2, [r2, #12]
 8003fae:	0912      	lsrs	r2, r2, #4
 8003fb0:	0452      	lsls	r2, r2, #17
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	491f      	ldr	r1, [pc, #124]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	614b      	str	r3, [r1, #20]
 8003fba:	e011      	b.n	8003fe0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6892      	ldr	r2, [r2, #8]
 8003fcc:	0211      	lsls	r1, r2, #8
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6912      	ldr	r2, [r2, #16]
 8003fd2:	0852      	lsrs	r2, r2, #1
 8003fd4:	3a01      	subs	r2, #1
 8003fd6:	0652      	lsls	r2, r2, #25
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	4916      	ldr	r1, [pc, #88]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fe0:	4b14      	ldr	r3, [pc, #80]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a13      	ldr	r2, [pc, #76]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fe f9be 	bl	800236c <HAL_GetTick>
 8003ff0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ff2:	e009      	b.n	8004008 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ff4:	f7fe f9ba 	bl	800236c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d902      	bls.n	8004008 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	73fb      	strb	r3, [r7, #15]
          break;
 8004006:	e005      	b.n	8004014 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0ef      	beq.n	8003ff4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800401a:	4b06      	ldr	r3, [pc, #24]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	4904      	ldr	r1, [pc, #16]	; (8004034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004024:	4313      	orrs	r3, r2
 8004026:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40021000 	.word	0x40021000

08004038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e049      	b.n	80040de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fd ff1a 	bl	8001e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 faf2 	bl	8004660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e049      	b.n	800418c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fd fe81 	bl	8001e14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3304      	adds	r3, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f000 fa9b 	bl	8004660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d122      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d11b      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0202 	mvn.w	r2, #2
 80041c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fa24 	bl	8004624 <HAL_TIM_IC_CaptureCallback>
 80041dc:	e005      	b.n	80041ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fa16 	bl	8004610 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 fa27 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d122      	bne.n	8004244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b04      	cmp	r3, #4
 800420a:	d11b      	bne.n	8004244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0204 	mvn.w	r2, #4
 8004214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f9fa 	bl	8004624 <HAL_TIM_IC_CaptureCallback>
 8004230:	e005      	b.n	800423e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f9ec 	bl	8004610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f9fd 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b08      	cmp	r3, #8
 8004250:	d122      	bne.n	8004298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b08      	cmp	r3, #8
 800425e:	d11b      	bne.n	8004298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0208 	mvn.w	r2, #8
 8004268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2204      	movs	r2, #4
 800426e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f9d0 	bl	8004624 <HAL_TIM_IC_CaptureCallback>
 8004284:	e005      	b.n	8004292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f9c2 	bl	8004610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f9d3 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d122      	bne.n	80042ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d11b      	bne.n	80042ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0210 	mvn.w	r2, #16
 80042bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2208      	movs	r2, #8
 80042c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f9a6 	bl	8004624 <HAL_TIM_IC_CaptureCallback>
 80042d8:	e005      	b.n	80042e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f998 	bl	8004610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f9a9 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d10e      	bne.n	8004318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d107      	bne.n	8004318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0201 	mvn.w	r2, #1
 8004310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f972 	bl	80045fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b80      	cmp	r3, #128	; 0x80
 8004324:	d10e      	bne.n	8004344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004330:	2b80      	cmp	r3, #128	; 0x80
 8004332:	d107      	bne.n	8004344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800433c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fd90 	bl	8004e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004352:	d10e      	bne.n	8004372 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435e:	2b80      	cmp	r3, #128	; 0x80
 8004360:	d107      	bne.n	8004372 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800436a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fd83 	bl	8004e78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d10e      	bne.n	800439e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d107      	bne.n	800439e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f957 	bl	800464c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d10e      	bne.n	80043ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d107      	bne.n	80043ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f06f 0220 	mvn.w	r2, #32
 80043c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fd43 	bl	8004e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e0ff      	b.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b14      	cmp	r3, #20
 80043fe:	f200 80f0 	bhi.w	80045e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004402:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	0800445d 	.word	0x0800445d
 800440c:	080045e3 	.word	0x080045e3
 8004410:	080045e3 	.word	0x080045e3
 8004414:	080045e3 	.word	0x080045e3
 8004418:	0800449d 	.word	0x0800449d
 800441c:	080045e3 	.word	0x080045e3
 8004420:	080045e3 	.word	0x080045e3
 8004424:	080045e3 	.word	0x080045e3
 8004428:	080044df 	.word	0x080044df
 800442c:	080045e3 	.word	0x080045e3
 8004430:	080045e3 	.word	0x080045e3
 8004434:	080045e3 	.word	0x080045e3
 8004438:	0800451f 	.word	0x0800451f
 800443c:	080045e3 	.word	0x080045e3
 8004440:	080045e3 	.word	0x080045e3
 8004444:	080045e3 	.word	0x080045e3
 8004448:	08004561 	.word	0x08004561
 800444c:	080045e3 	.word	0x080045e3
 8004450:	080045e3 	.word	0x080045e3
 8004454:	080045e3 	.word	0x080045e3
 8004458:	080045a1 	.word	0x080045a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	4618      	mov	r0, r3
 8004464:	f000 f996 	bl	8004794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0208 	orr.w	r2, r2, #8
 8004476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0204 	bic.w	r2, r2, #4
 8004486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6999      	ldr	r1, [r3, #24]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	619a      	str	r2, [r3, #24]
      break;
 800449a:	e0a5      	b.n	80045e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fa06 	bl	80048b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6999      	ldr	r1, [r3, #24]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	021a      	lsls	r2, r3, #8
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	619a      	str	r2, [r3, #24]
      break;
 80044dc:	e084      	b.n	80045e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fa6f 	bl	80049c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69da      	ldr	r2, [r3, #28]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0208 	orr.w	r2, r2, #8
 80044f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69da      	ldr	r2, [r3, #28]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0204 	bic.w	r2, r2, #4
 8004508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69d9      	ldr	r1, [r3, #28]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	61da      	str	r2, [r3, #28]
      break;
 800451c:	e064      	b.n	80045e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fad7 	bl	8004ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69d9      	ldr	r1, [r3, #28]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	021a      	lsls	r2, r3, #8
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	61da      	str	r2, [r3, #28]
      break;
 800455e:	e043      	b.n	80045e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fb20 	bl	8004bac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0204 	bic.w	r2, r2, #4
 800458a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800459e:	e023      	b.n	80045e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fb64 	bl	8004c74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	021a      	lsls	r2, r3, #8
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045e0:	e002      	b.n	80045e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	75fb      	strb	r3, [r7, #23]
      break;
 80045e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop

080045fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a40      	ldr	r2, [pc, #256]	; (8004774 <TIM_Base_SetConfig+0x114>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d013      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467e:	d00f      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a3d      	ldr	r2, [pc, #244]	; (8004778 <TIM_Base_SetConfig+0x118>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00b      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a3c      	ldr	r2, [pc, #240]	; (800477c <TIM_Base_SetConfig+0x11c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d007      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a3b      	ldr	r2, [pc, #236]	; (8004780 <TIM_Base_SetConfig+0x120>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a3a      	ldr	r2, [pc, #232]	; (8004784 <TIM_Base_SetConfig+0x124>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d108      	bne.n	80046b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2f      	ldr	r2, [pc, #188]	; (8004774 <TIM_Base_SetConfig+0x114>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01f      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d01b      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a2c      	ldr	r2, [pc, #176]	; (8004778 <TIM_Base_SetConfig+0x118>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d017      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2b      	ldr	r2, [pc, #172]	; (800477c <TIM_Base_SetConfig+0x11c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2a      	ldr	r2, [pc, #168]	; (8004780 <TIM_Base_SetConfig+0x120>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00f      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a29      	ldr	r2, [pc, #164]	; (8004784 <TIM_Base_SetConfig+0x124>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00b      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a28      	ldr	r2, [pc, #160]	; (8004788 <TIM_Base_SetConfig+0x128>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d007      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a27      	ldr	r2, [pc, #156]	; (800478c <TIM_Base_SetConfig+0x12c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a26      	ldr	r2, [pc, #152]	; (8004790 <TIM_Base_SetConfig+0x130>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d108      	bne.n	800470c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a10      	ldr	r2, [pc, #64]	; (8004774 <TIM_Base_SetConfig+0x114>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00f      	beq.n	8004758 <TIM_Base_SetConfig+0xf8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a12      	ldr	r2, [pc, #72]	; (8004784 <TIM_Base_SetConfig+0x124>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00b      	beq.n	8004758 <TIM_Base_SetConfig+0xf8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a11      	ldr	r2, [pc, #68]	; (8004788 <TIM_Base_SetConfig+0x128>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d007      	beq.n	8004758 <TIM_Base_SetConfig+0xf8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a10      	ldr	r2, [pc, #64]	; (800478c <TIM_Base_SetConfig+0x12c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_Base_SetConfig+0xf8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a0f      	ldr	r2, [pc, #60]	; (8004790 <TIM_Base_SetConfig+0x130>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d103      	bne.n	8004760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	615a      	str	r2, [r3, #20]
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800
 8004780:	40000c00 	.word	0x40000c00
 8004784:	40013400 	.word	0x40013400
 8004788:	40014000 	.word	0x40014000
 800478c:	40014400 	.word	0x40014400
 8004790:	40014800 	.word	0x40014800

08004794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0201 	bic.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0303 	bic.w	r3, r3, #3
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 0302 	bic.w	r3, r3, #2
 80047e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a2c      	ldr	r2, [pc, #176]	; (80048a0 <TIM_OC1_SetConfig+0x10c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00f      	beq.n	8004814 <TIM_OC1_SetConfig+0x80>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a2b      	ldr	r2, [pc, #172]	; (80048a4 <TIM_OC1_SetConfig+0x110>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00b      	beq.n	8004814 <TIM_OC1_SetConfig+0x80>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <TIM_OC1_SetConfig+0x114>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d007      	beq.n	8004814 <TIM_OC1_SetConfig+0x80>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a29      	ldr	r2, [pc, #164]	; (80048ac <TIM_OC1_SetConfig+0x118>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_OC1_SetConfig+0x80>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a28      	ldr	r2, [pc, #160]	; (80048b0 <TIM_OC1_SetConfig+0x11c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d10c      	bne.n	800482e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f023 0308 	bic.w	r3, r3, #8
 800481a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f023 0304 	bic.w	r3, r3, #4
 800482c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <TIM_OC1_SetConfig+0x10c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00f      	beq.n	8004856 <TIM_OC1_SetConfig+0xc2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a1a      	ldr	r2, [pc, #104]	; (80048a4 <TIM_OC1_SetConfig+0x110>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00b      	beq.n	8004856 <TIM_OC1_SetConfig+0xc2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a19      	ldr	r2, [pc, #100]	; (80048a8 <TIM_OC1_SetConfig+0x114>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <TIM_OC1_SetConfig+0xc2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a18      	ldr	r2, [pc, #96]	; (80048ac <TIM_OC1_SetConfig+0x118>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d003      	beq.n	8004856 <TIM_OC1_SetConfig+0xc2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <TIM_OC1_SetConfig+0x11c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d111      	bne.n	800487a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800485c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	621a      	str	r2, [r3, #32]
}
 8004894:	bf00      	nop
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	40012c00 	.word	0x40012c00
 80048a4:	40013400 	.word	0x40013400
 80048a8:	40014000 	.word	0x40014000
 80048ac:	40014400 	.word	0x40014400
 80048b0:	40014800 	.word	0x40014800

080048b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0210 	bic.w	r2, r3, #16
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0320 	bic.w	r3, r3, #32
 8004902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a28      	ldr	r2, [pc, #160]	; (80049b4 <TIM_OC2_SetConfig+0x100>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_OC2_SetConfig+0x6c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a27      	ldr	r2, [pc, #156]	; (80049b8 <TIM_OC2_SetConfig+0x104>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10d      	bne.n	800493c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <TIM_OC2_SetConfig+0x100>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00f      	beq.n	8004964 <TIM_OC2_SetConfig+0xb0>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <TIM_OC2_SetConfig+0x104>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00b      	beq.n	8004964 <TIM_OC2_SetConfig+0xb0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <TIM_OC2_SetConfig+0x108>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d007      	beq.n	8004964 <TIM_OC2_SetConfig+0xb0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <TIM_OC2_SetConfig+0x10c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_OC2_SetConfig+0xb0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <TIM_OC2_SetConfig+0x110>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d113      	bne.n	800498c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800496a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	621a      	str	r2, [r3, #32]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40013400 	.word	0x40013400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800

080049c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a27      	ldr	r2, [pc, #156]	; (8004ac4 <TIM_OC3_SetConfig+0xfc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d003      	beq.n	8004a32 <TIM_OC3_SetConfig+0x6a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a26      	ldr	r2, [pc, #152]	; (8004ac8 <TIM_OC3_SetConfig+0x100>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d10d      	bne.n	8004a4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1c      	ldr	r2, [pc, #112]	; (8004ac4 <TIM_OC3_SetConfig+0xfc>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00f      	beq.n	8004a76 <TIM_OC3_SetConfig+0xae>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a1b      	ldr	r2, [pc, #108]	; (8004ac8 <TIM_OC3_SetConfig+0x100>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00b      	beq.n	8004a76 <TIM_OC3_SetConfig+0xae>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <TIM_OC3_SetConfig+0x104>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d007      	beq.n	8004a76 <TIM_OC3_SetConfig+0xae>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <TIM_OC3_SetConfig+0x108>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d003      	beq.n	8004a76 <TIM_OC3_SetConfig+0xae>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <TIM_OC3_SetConfig+0x10c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d113      	bne.n	8004a9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	621a      	str	r2, [r3, #32]
}
 8004ab8:	bf00      	nop
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40013400 	.word	0x40013400
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40014400 	.word	0x40014400
 8004ad4:	40014800 	.word	0x40014800

08004ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	031b      	lsls	r3, r3, #12
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <TIM_OC4_SetConfig+0xc0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00f      	beq.n	8004b5c <TIM_OC4_SetConfig+0x84>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <TIM_OC4_SetConfig+0xc4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00b      	beq.n	8004b5c <TIM_OC4_SetConfig+0x84>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a16      	ldr	r2, [pc, #88]	; (8004ba0 <TIM_OC4_SetConfig+0xc8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d007      	beq.n	8004b5c <TIM_OC4_SetConfig+0x84>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <TIM_OC4_SetConfig+0xcc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_OC4_SetConfig+0x84>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <TIM_OC4_SetConfig+0xd0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d109      	bne.n	8004b70 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40013400 	.word	0x40013400
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40014400 	.word	0x40014400
 8004ba8:	40014800 	.word	0x40014800

08004bac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	041b      	lsls	r3, r3, #16
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <TIM_OC5_SetConfig+0xb4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00f      	beq.n	8004c26 <TIM_OC5_SetConfig+0x7a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <TIM_OC5_SetConfig+0xb8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <TIM_OC5_SetConfig+0x7a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a15      	ldr	r2, [pc, #84]	; (8004c68 <TIM_OC5_SetConfig+0xbc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <TIM_OC5_SetConfig+0x7a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a14      	ldr	r2, [pc, #80]	; (8004c6c <TIM_OC5_SetConfig+0xc0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_OC5_SetConfig+0x7a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a13      	ldr	r2, [pc, #76]	; (8004c70 <TIM_OC5_SetConfig+0xc4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d109      	bne.n	8004c3a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	621a      	str	r2, [r3, #32]
}
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40013400 	.word	0x40013400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800

08004c74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	051b      	lsls	r3, r3, #20
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <TIM_OC6_SetConfig+0xb8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00f      	beq.n	8004cf0 <TIM_OC6_SetConfig+0x7c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <TIM_OC6_SetConfig+0xbc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00b      	beq.n	8004cf0 <TIM_OC6_SetConfig+0x7c>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <TIM_OC6_SetConfig+0xc0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d007      	beq.n	8004cf0 <TIM_OC6_SetConfig+0x7c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <TIM_OC6_SetConfig+0xc4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_OC6_SetConfig+0x7c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <TIM_OC6_SetConfig+0xc8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d109      	bne.n	8004d04 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	029b      	lsls	r3, r3, #10
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40013400 	.word	0x40013400
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40014400 	.word	0x40014400
 8004d3c:	40014800 	.word	0x40014800

08004d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e068      	b.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a2e      	ldr	r2, [pc, #184]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a2d      	ldr	r2, [pc, #180]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d108      	bne.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1e      	ldr	r2, [pc, #120]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01d      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dca:	d018      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1a      	ldr	r2, [pc, #104]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00e      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a14      	ldr	r2, [pc, #80]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d10c      	bne.n	8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40013400 	.word	0x40013400
 8004e40:	40000400 	.word	0x40000400
 8004e44:	40000800 	.word	0x40000800
 8004e48:	40000c00 	.word	0x40000c00
 8004e4c:	40014000 	.word	0x40014000

08004e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e040      	b.n	8004f20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fd f874 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2224      	movs	r2, #36	; 0x24
 8004eb8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0201 	bic.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fc8a 	bl	80057e4 <UART_SetConfig>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e022      	b.n	8004f20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 ff36 	bl	8005d54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 ffbd 	bl	8005e98 <UART_CheckIdleState>
 8004f1e:	4603      	mov	r3, r0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	; 0x28
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	f040 8082 	bne.w	8005046 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_UART_Transmit+0x26>
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e07a      	b.n	8005048 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_UART_Transmit+0x38>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e073      	b.n	8005048 <HAL_UART_Transmit+0x120>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2221      	movs	r2, #33	; 0x21
 8004f74:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f76:	f7fd f9f9 	bl	800236c <HAL_GetTick>
 8004f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	88fa      	ldrh	r2, [r7, #6]
 8004f80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	88fa      	ldrh	r2, [r7, #6]
 8004f88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f94:	d108      	bne.n	8004fa8 <HAL_UART_Transmit+0x80>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d104      	bne.n	8004fa8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	e003      	b.n	8004fb0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004fb8:	e02d      	b.n	8005016 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2180      	movs	r1, #128	; 0x80
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 ffb0 	bl	8005f2a <UART_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e039      	b.n	8005048 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10b      	bne.n	8004ff2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	881a      	ldrh	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe6:	b292      	uxth	r2, r2
 8004fe8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	3302      	adds	r3, #2
 8004fee:	61bb      	str	r3, [r7, #24]
 8004ff0:	e008      	b.n	8005004 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	781a      	ldrb	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	b292      	uxth	r2, r2
 8004ffc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3301      	adds	r3, #1
 8005002:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1cb      	bne.n	8004fba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2200      	movs	r2, #0
 800502a:	2140      	movs	r1, #64	; 0x40
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 ff7c 	bl	8005f2a <UART_WaitOnFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e005      	b.n	8005048 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	e000      	b.n	8005048 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005046:	2302      	movs	r3, #2
  }
}
 8005048:	4618      	mov	r0, r3
 800504a:	3720      	adds	r7, #32
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	; 0x28
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	4613      	mov	r3, r2
 800505e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005064:	2b20      	cmp	r3, #32
 8005066:	f040 80bf 	bne.w	80051e8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_UART_Receive+0x26>
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e0b7      	b.n	80051ea <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_UART_Receive+0x38>
 8005084:	2302      	movs	r3, #2
 8005086:	e0b0      	b.n	80051ea <HAL_UART_Receive+0x19a>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2222      	movs	r2, #34	; 0x22
 800509c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050a4:	f7fd f962 	bl	800236c <HAL_GetTick>
 80050a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c2:	d10e      	bne.n	80050e2 <HAL_UART_Receive+0x92>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d105      	bne.n	80050d8 <HAL_UART_Receive+0x88>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80050d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050d6:	e02d      	b.n	8005134 <HAL_UART_Receive+0xe4>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	22ff      	movs	r2, #255	; 0xff
 80050dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050e0:	e028      	b.n	8005134 <HAL_UART_Receive+0xe4>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10d      	bne.n	8005106 <HAL_UART_Receive+0xb6>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d104      	bne.n	80050fc <HAL_UART_Receive+0xac>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	22ff      	movs	r2, #255	; 0xff
 80050f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050fa:	e01b      	b.n	8005134 <HAL_UART_Receive+0xe4>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	227f      	movs	r2, #127	; 0x7f
 8005100:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005104:	e016      	b.n	8005134 <HAL_UART_Receive+0xe4>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800510e:	d10d      	bne.n	800512c <HAL_UART_Receive+0xdc>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d104      	bne.n	8005122 <HAL_UART_Receive+0xd2>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	227f      	movs	r2, #127	; 0x7f
 800511c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005120:	e008      	b.n	8005134 <HAL_UART_Receive+0xe4>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	223f      	movs	r2, #63	; 0x3f
 8005126:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800512a:	e003      	b.n	8005134 <HAL_UART_Receive+0xe4>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800513a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005144:	d108      	bne.n	8005158 <HAL_UART_Receive+0x108>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	e003      	b.n	8005160 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005168:	e033      	b.n	80051d2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2200      	movs	r2, #0
 8005172:	2120      	movs	r1, #32
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 fed8 	bl	8005f2a <UART_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e032      	b.n	80051ea <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10c      	bne.n	80051a4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005190:	b29a      	uxth	r2, r3
 8005192:	8a7b      	ldrh	r3, [r7, #18]
 8005194:	4013      	ands	r3, r2
 8005196:	b29a      	uxth	r2, r3
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	3302      	adds	r3, #2
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	e00d      	b.n	80051c0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	8a7b      	ldrh	r3, [r7, #18]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	4013      	ands	r3, r2
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	3301      	adds	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1c5      	bne.n	800516a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e000      	b.n	80051ea <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
  }
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b0ba      	sub	sp, #232	; 0xe8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800521a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800521e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005222:	4013      	ands	r3, r2
 8005224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d115      	bne.n	800525c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00f      	beq.n	800525c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800523c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 82a6 	beq.w	800579e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	4798      	blx	r3
      }
      return;
 800525a:	e2a0      	b.n	800579e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800525c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8117 	beq.w	8005494 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005272:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005276:	4b85      	ldr	r3, [pc, #532]	; (800548c <HAL_UART_IRQHandler+0x298>)
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 810a 	beq.w	8005494 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d011      	beq.n	80052b0 <HAL_UART_IRQHandler+0xbc>
 800528c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2201      	movs	r2, #1
 800529e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052a6:	f043 0201 	orr.w	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d011      	beq.n	80052e0 <HAL_UART_IRQHandler+0xec>
 80052bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00b      	beq.n	80052e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2202      	movs	r2, #2
 80052ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d6:	f043 0204 	orr.w	r2, r3, #4
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d011      	beq.n	8005310 <HAL_UART_IRQHandler+0x11c>
 80052ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2204      	movs	r2, #4
 80052fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005306:	f043 0202 	orr.w	r2, r3, #2
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005314:	f003 0308 	and.w	r3, r3, #8
 8005318:	2b00      	cmp	r3, #0
 800531a:	d017      	beq.n	800534c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800531c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d105      	bne.n	8005334 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800532c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2208      	movs	r2, #8
 800533a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005342:	f043 0208 	orr.w	r2, r3, #8
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800534c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005354:	2b00      	cmp	r3, #0
 8005356:	d012      	beq.n	800537e <HAL_UART_IRQHandler+0x18a>
 8005358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00c      	beq.n	800537e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800536c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 820c 	beq.w	80057a2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800538a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00d      	beq.n	80053b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d005      	beq.n	80053d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d04f      	beq.n	8005476 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fe6b 	bl	80060b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	d141      	bne.n	800546e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3308      	adds	r3, #8
 80053f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3308      	adds	r3, #8
 8005412:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005416:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800541a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005422:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800542e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1d9      	bne.n	80053ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	2b00      	cmp	r3, #0
 800543c:	d013      	beq.n	8005466 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	4a13      	ldr	r2, [pc, #76]	; (8005490 <HAL_UART_IRQHandler+0x29c>)
 8005444:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544a:	4618      	mov	r0, r3
 800544c:	f7fd f8e9 	bl	8002622 <HAL_DMA_Abort_IT>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d017      	beq.n	8005486 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005460:	4610      	mov	r0, r2
 8005462:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005464:	e00f      	b.n	8005486 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f9a6 	bl	80057b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546c:	e00b      	b.n	8005486 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f9a2 	bl	80057b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005474:	e007      	b.n	8005486 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f99e 	bl	80057b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005484:	e18d      	b.n	80057a2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005486:	bf00      	nop
    return;
 8005488:	e18b      	b.n	80057a2 <HAL_UART_IRQHandler+0x5ae>
 800548a:	bf00      	nop
 800548c:	04000120 	.word	0x04000120
 8005490:	08006179 	.word	0x08006179

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005498:	2b01      	cmp	r3, #1
 800549a:	f040 8146 	bne.w	800572a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800549e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 813f 	beq.w	800572a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8138 	beq.w	800572a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2210      	movs	r2, #16
 80054c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	f040 80b4 	bne.w	800563a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 815f 	beq.w	80057a6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054f2:	429a      	cmp	r2, r3
 80054f4:	f080 8157 	bcs.w	80057a6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	f040 8085 	bne.w	800561e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005528:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800552c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005530:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800553e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005542:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800554a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1da      	bne.n	8005514 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3308      	adds	r3, #8
 8005564:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800556e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005570:	f023 0301 	bic.w	r3, r3, #1
 8005574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3308      	adds	r3, #8
 800557e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005582:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005586:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800558a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e1      	bne.n	800555e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3308      	adds	r3, #8
 80055ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e3      	bne.n	800559a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ee:	f023 0310 	bic.w	r3, r3, #16
 80055f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005600:	65bb      	str	r3, [r7, #88]	; 0x58
 8005602:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005606:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800560e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e4      	bne.n	80055de <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005618:	4618      	mov	r0, r3
 800561a:	f7fc ffc4 	bl	80025a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800562a:	b29b      	uxth	r3, r3
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	b29b      	uxth	r3, r3
 8005630:	4619      	mov	r1, r3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f8ca 	bl	80057cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005638:	e0b5      	b.n	80057a6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005646:	b29b      	uxth	r3, r3
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 80a7 	beq.w	80057aa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800565c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80a2 	beq.w	80057aa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005676:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800567a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005688:	647b      	str	r3, [r7, #68]	; 0x44
 800568a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800568e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e4      	bne.n	8005666 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3308      	adds	r3, #8
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	623b      	str	r3, [r7, #32]
   return(result);
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	f023 0301 	bic.w	r3, r3, #1
 80056b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3308      	adds	r3, #8
 80056bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056c0:	633a      	str	r2, [r7, #48]	; 0x30
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e3      	bne.n	800569c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	e853 3f00 	ldrex	r3, [r3]
 80056f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0310 	bic.w	r3, r3, #16
 80056fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005708:	61fb      	str	r3, [r7, #28]
 800570a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	69b9      	ldr	r1, [r7, #24]
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	617b      	str	r3, [r7, #20]
   return(result);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e4      	bne.n	80056e6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800571c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f852 	bl	80057cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005728:	e03f      	b.n	80057aa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800572a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00e      	beq.n	8005754 <HAL_UART_IRQHandler+0x560>
 8005736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800573a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d008      	beq.n	8005754 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800574a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fd53 	bl	80061f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005752:	e02d      	b.n	80057b0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00e      	beq.n	800577e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01c      	beq.n	80057ae <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	4798      	blx	r3
    }
    return;
 800577c:	e017      	b.n	80057ae <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800577e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d012      	beq.n	80057b0 <HAL_UART_IRQHandler+0x5bc>
 800578a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00c      	beq.n	80057b0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fd04 	bl	80061a4 <UART_EndTransmit_IT>
    return;
 800579c:	e008      	b.n	80057b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800579e:	bf00      	nop
 80057a0:	e006      	b.n	80057b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80057a2:	bf00      	nop
 80057a4:	e004      	b.n	80057b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80057a6:	bf00      	nop
 80057a8:	e002      	b.n	80057b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80057aa:	bf00      	nop
 80057ac:	e000      	b.n	80057b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80057ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80057b0:	37e8      	adds	r7, #232	; 0xe8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop

080057b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e8:	b08a      	sub	sp, #40	; 0x28
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	431a      	orrs	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	431a      	orrs	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	4313      	orrs	r3, r2
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4ba4      	ldr	r3, [pc, #656]	; (8005aa4 <UART_SetConfig+0x2c0>)
 8005814:	4013      	ands	r3, r2
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	6812      	ldr	r2, [r2, #0]
 800581a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800581c:	430b      	orrs	r3, r1
 800581e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a99      	ldr	r2, [pc, #612]	; (8005aa8 <UART_SetConfig+0x2c4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584c:	4313      	orrs	r3, r2
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005860:	430a      	orrs	r2, r1
 8005862:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a90      	ldr	r2, [pc, #576]	; (8005aac <UART_SetConfig+0x2c8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d126      	bne.n	80058bc <UART_SetConfig+0xd8>
 800586e:	4b90      	ldr	r3, [pc, #576]	; (8005ab0 <UART_SetConfig+0x2cc>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	2b03      	cmp	r3, #3
 800587a:	d81b      	bhi.n	80058b4 <UART_SetConfig+0xd0>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <UART_SetConfig+0xa0>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	08005895 	.word	0x08005895
 8005888:	080058a5 	.word	0x080058a5
 800588c:	0800589d 	.word	0x0800589d
 8005890:	080058ad 	.word	0x080058ad
 8005894:	2301      	movs	r3, #1
 8005896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589a:	e116      	b.n	8005aca <UART_SetConfig+0x2e6>
 800589c:	2302      	movs	r3, #2
 800589e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a2:	e112      	b.n	8005aca <UART_SetConfig+0x2e6>
 80058a4:	2304      	movs	r3, #4
 80058a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058aa:	e10e      	b.n	8005aca <UART_SetConfig+0x2e6>
 80058ac:	2308      	movs	r3, #8
 80058ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b2:	e10a      	b.n	8005aca <UART_SetConfig+0x2e6>
 80058b4:	2310      	movs	r3, #16
 80058b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ba:	e106      	b.n	8005aca <UART_SetConfig+0x2e6>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a7c      	ldr	r2, [pc, #496]	; (8005ab4 <UART_SetConfig+0x2d0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d138      	bne.n	8005938 <UART_SetConfig+0x154>
 80058c6:	4b7a      	ldr	r3, [pc, #488]	; (8005ab0 <UART_SetConfig+0x2cc>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058cc:	f003 030c 	and.w	r3, r3, #12
 80058d0:	2b0c      	cmp	r3, #12
 80058d2:	d82d      	bhi.n	8005930 <UART_SetConfig+0x14c>
 80058d4:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <UART_SetConfig+0xf8>)
 80058d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058da:	bf00      	nop
 80058dc:	08005911 	.word	0x08005911
 80058e0:	08005931 	.word	0x08005931
 80058e4:	08005931 	.word	0x08005931
 80058e8:	08005931 	.word	0x08005931
 80058ec:	08005921 	.word	0x08005921
 80058f0:	08005931 	.word	0x08005931
 80058f4:	08005931 	.word	0x08005931
 80058f8:	08005931 	.word	0x08005931
 80058fc:	08005919 	.word	0x08005919
 8005900:	08005931 	.word	0x08005931
 8005904:	08005931 	.word	0x08005931
 8005908:	08005931 	.word	0x08005931
 800590c:	08005929 	.word	0x08005929
 8005910:	2300      	movs	r3, #0
 8005912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005916:	e0d8      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005918:	2302      	movs	r3, #2
 800591a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591e:	e0d4      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005926:	e0d0      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800592e:	e0cc      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005936:	e0c8      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a5e      	ldr	r2, [pc, #376]	; (8005ab8 <UART_SetConfig+0x2d4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d125      	bne.n	800598e <UART_SetConfig+0x1aa>
 8005942:	4b5b      	ldr	r3, [pc, #364]	; (8005ab0 <UART_SetConfig+0x2cc>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005948:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800594c:	2b30      	cmp	r3, #48	; 0x30
 800594e:	d016      	beq.n	800597e <UART_SetConfig+0x19a>
 8005950:	2b30      	cmp	r3, #48	; 0x30
 8005952:	d818      	bhi.n	8005986 <UART_SetConfig+0x1a2>
 8005954:	2b20      	cmp	r3, #32
 8005956:	d00a      	beq.n	800596e <UART_SetConfig+0x18a>
 8005958:	2b20      	cmp	r3, #32
 800595a:	d814      	bhi.n	8005986 <UART_SetConfig+0x1a2>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <UART_SetConfig+0x182>
 8005960:	2b10      	cmp	r3, #16
 8005962:	d008      	beq.n	8005976 <UART_SetConfig+0x192>
 8005964:	e00f      	b.n	8005986 <UART_SetConfig+0x1a2>
 8005966:	2300      	movs	r3, #0
 8005968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596c:	e0ad      	b.n	8005aca <UART_SetConfig+0x2e6>
 800596e:	2302      	movs	r3, #2
 8005970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005974:	e0a9      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005976:	2304      	movs	r3, #4
 8005978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800597c:	e0a5      	b.n	8005aca <UART_SetConfig+0x2e6>
 800597e:	2308      	movs	r3, #8
 8005980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005984:	e0a1      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005986:	2310      	movs	r3, #16
 8005988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800598c:	e09d      	b.n	8005aca <UART_SetConfig+0x2e6>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a4a      	ldr	r2, [pc, #296]	; (8005abc <UART_SetConfig+0x2d8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d125      	bne.n	80059e4 <UART_SetConfig+0x200>
 8005998:	4b45      	ldr	r3, [pc, #276]	; (8005ab0 <UART_SetConfig+0x2cc>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059a2:	2bc0      	cmp	r3, #192	; 0xc0
 80059a4:	d016      	beq.n	80059d4 <UART_SetConfig+0x1f0>
 80059a6:	2bc0      	cmp	r3, #192	; 0xc0
 80059a8:	d818      	bhi.n	80059dc <UART_SetConfig+0x1f8>
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d00a      	beq.n	80059c4 <UART_SetConfig+0x1e0>
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d814      	bhi.n	80059dc <UART_SetConfig+0x1f8>
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <UART_SetConfig+0x1d8>
 80059b6:	2b40      	cmp	r3, #64	; 0x40
 80059b8:	d008      	beq.n	80059cc <UART_SetConfig+0x1e8>
 80059ba:	e00f      	b.n	80059dc <UART_SetConfig+0x1f8>
 80059bc:	2300      	movs	r3, #0
 80059be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c2:	e082      	b.n	8005aca <UART_SetConfig+0x2e6>
 80059c4:	2302      	movs	r3, #2
 80059c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ca:	e07e      	b.n	8005aca <UART_SetConfig+0x2e6>
 80059cc:	2304      	movs	r3, #4
 80059ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d2:	e07a      	b.n	8005aca <UART_SetConfig+0x2e6>
 80059d4:	2308      	movs	r3, #8
 80059d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059da:	e076      	b.n	8005aca <UART_SetConfig+0x2e6>
 80059dc:	2310      	movs	r3, #16
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e2:	e072      	b.n	8005aca <UART_SetConfig+0x2e6>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a35      	ldr	r2, [pc, #212]	; (8005ac0 <UART_SetConfig+0x2dc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d12a      	bne.n	8005a44 <UART_SetConfig+0x260>
 80059ee:	4b30      	ldr	r3, [pc, #192]	; (8005ab0 <UART_SetConfig+0x2cc>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059fc:	d01a      	beq.n	8005a34 <UART_SetConfig+0x250>
 80059fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a02:	d81b      	bhi.n	8005a3c <UART_SetConfig+0x258>
 8005a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a08:	d00c      	beq.n	8005a24 <UART_SetConfig+0x240>
 8005a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0e:	d815      	bhi.n	8005a3c <UART_SetConfig+0x258>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <UART_SetConfig+0x238>
 8005a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a18:	d008      	beq.n	8005a2c <UART_SetConfig+0x248>
 8005a1a:	e00f      	b.n	8005a3c <UART_SetConfig+0x258>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a22:	e052      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005a24:	2302      	movs	r3, #2
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2a:	e04e      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a32:	e04a      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005a34:	2308      	movs	r3, #8
 8005a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a3a:	e046      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a42:	e042      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a17      	ldr	r2, [pc, #92]	; (8005aa8 <UART_SetConfig+0x2c4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d13a      	bne.n	8005ac4 <UART_SetConfig+0x2e0>
 8005a4e:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <UART_SetConfig+0x2cc>)
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a5c:	d01a      	beq.n	8005a94 <UART_SetConfig+0x2b0>
 8005a5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a62:	d81b      	bhi.n	8005a9c <UART_SetConfig+0x2b8>
 8005a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a68:	d00c      	beq.n	8005a84 <UART_SetConfig+0x2a0>
 8005a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6e:	d815      	bhi.n	8005a9c <UART_SetConfig+0x2b8>
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <UART_SetConfig+0x298>
 8005a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a78:	d008      	beq.n	8005a8c <UART_SetConfig+0x2a8>
 8005a7a:	e00f      	b.n	8005a9c <UART_SetConfig+0x2b8>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a82:	e022      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005a84:	2302      	movs	r3, #2
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8a:	e01e      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005a8c:	2304      	movs	r3, #4
 8005a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a92:	e01a      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005a94:	2308      	movs	r3, #8
 8005a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a9a:	e016      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa2:	e012      	b.n	8005aca <UART_SetConfig+0x2e6>
 8005aa4:	efff69f3 	.word	0xefff69f3
 8005aa8:	40008000 	.word	0x40008000
 8005aac:	40013800 	.word	0x40013800
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	40004400 	.word	0x40004400
 8005ab8:	40004800 	.word	0x40004800
 8005abc:	40004c00 	.word	0x40004c00
 8005ac0:	40005000 	.word	0x40005000
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a9f      	ldr	r2, [pc, #636]	; (8005d4c <UART_SetConfig+0x568>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d17a      	bne.n	8005bca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d824      	bhi.n	8005b26 <UART_SetConfig+0x342>
 8005adc:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <UART_SetConfig+0x300>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005b09 	.word	0x08005b09
 8005ae8:	08005b27 	.word	0x08005b27
 8005aec:	08005b11 	.word	0x08005b11
 8005af0:	08005b27 	.word	0x08005b27
 8005af4:	08005b17 	.word	0x08005b17
 8005af8:	08005b27 	.word	0x08005b27
 8005afc:	08005b27 	.word	0x08005b27
 8005b00:	08005b27 	.word	0x08005b27
 8005b04:	08005b1f 	.word	0x08005b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b08:	f7fd fd4e 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8005b0c:	61f8      	str	r0, [r7, #28]
        break;
 8005b0e:	e010      	b.n	8005b32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b10:	4b8f      	ldr	r3, [pc, #572]	; (8005d50 <UART_SetConfig+0x56c>)
 8005b12:	61fb      	str	r3, [r7, #28]
        break;
 8005b14:	e00d      	b.n	8005b32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b16:	f7fd fcaf 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8005b1a:	61f8      	str	r0, [r7, #28]
        break;
 8005b1c:	e009      	b.n	8005b32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b22:	61fb      	str	r3, [r7, #28]
        break;
 8005b24:	e005      	b.n	8005b32 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 80fb 	beq.w	8005d30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	4413      	add	r3, r2
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d305      	bcc.n	8005b56 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d903      	bls.n	8005b5e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b5c:	e0e8      	b.n	8005d30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2200      	movs	r2, #0
 8005b62:	461c      	mov	r4, r3
 8005b64:	4615      	mov	r5, r2
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	022b      	lsls	r3, r5, #8
 8005b70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b74:	0222      	lsls	r2, r4, #8
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	6849      	ldr	r1, [r1, #4]
 8005b7a:	0849      	lsrs	r1, r1, #1
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	4688      	mov	r8, r1
 8005b80:	4681      	mov	r9, r0
 8005b82:	eb12 0a08 	adds.w	sl, r2, r8
 8005b86:	eb43 0b09 	adc.w	fp, r3, r9
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	603b      	str	r3, [r7, #0]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b98:	4650      	mov	r0, sl
 8005b9a:	4659      	mov	r1, fp
 8005b9c:	f7fb f83c 	bl	8000c18 <__aeabi_uldivmod>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bae:	d308      	bcc.n	8005bc2 <UART_SetConfig+0x3de>
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb6:	d204      	bcs.n	8005bc2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	60da      	str	r2, [r3, #12]
 8005bc0:	e0b6      	b.n	8005d30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bc8:	e0b2      	b.n	8005d30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd2:	d15e      	bne.n	8005c92 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d828      	bhi.n	8005c2e <UART_SetConfig+0x44a>
 8005bdc:	a201      	add	r2, pc, #4	; (adr r2, 8005be4 <UART_SetConfig+0x400>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005c09 	.word	0x08005c09
 8005be8:	08005c11 	.word	0x08005c11
 8005bec:	08005c19 	.word	0x08005c19
 8005bf0:	08005c2f 	.word	0x08005c2f
 8005bf4:	08005c1f 	.word	0x08005c1f
 8005bf8:	08005c2f 	.word	0x08005c2f
 8005bfc:	08005c2f 	.word	0x08005c2f
 8005c00:	08005c2f 	.word	0x08005c2f
 8005c04:	08005c27 	.word	0x08005c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c08:	f7fd fcce 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8005c0c:	61f8      	str	r0, [r7, #28]
        break;
 8005c0e:	e014      	b.n	8005c3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c10:	f7fd fce0 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 8005c14:	61f8      	str	r0, [r7, #28]
        break;
 8005c16:	e010      	b.n	8005c3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c18:	4b4d      	ldr	r3, [pc, #308]	; (8005d50 <UART_SetConfig+0x56c>)
 8005c1a:	61fb      	str	r3, [r7, #28]
        break;
 8005c1c:	e00d      	b.n	8005c3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c1e:	f7fd fc2b 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8005c22:	61f8      	str	r0, [r7, #28]
        break;
 8005c24:	e009      	b.n	8005c3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c2a:	61fb      	str	r3, [r7, #28]
        break;
 8005c2c:	e005      	b.n	8005c3a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d077      	beq.n	8005d30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	005a      	lsls	r2, r3, #1
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	085b      	lsrs	r3, r3, #1
 8005c4a:	441a      	add	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b0f      	cmp	r3, #15
 8005c5a:	d916      	bls.n	8005c8a <UART_SetConfig+0x4a6>
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c62:	d212      	bcs.n	8005c8a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f023 030f 	bic.w	r3, r3, #15
 8005c6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	085b      	lsrs	r3, r3, #1
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	8afb      	ldrh	r3, [r7, #22]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	8afa      	ldrh	r2, [r7, #22]
 8005c86:	60da      	str	r2, [r3, #12]
 8005c88:	e052      	b.n	8005d30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c90:	e04e      	b.n	8005d30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d827      	bhi.n	8005cea <UART_SetConfig+0x506>
 8005c9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <UART_SetConfig+0x4bc>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005ccd 	.word	0x08005ccd
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005ceb 	.word	0x08005ceb
 8005cb0:	08005cdb 	.word	0x08005cdb
 8005cb4:	08005ceb 	.word	0x08005ceb
 8005cb8:	08005ceb 	.word	0x08005ceb
 8005cbc:	08005ceb 	.word	0x08005ceb
 8005cc0:	08005ce3 	.word	0x08005ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f7fd fc70 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8005cc8:	61f8      	str	r0, [r7, #28]
        break;
 8005cca:	e014      	b.n	8005cf6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ccc:	f7fd fc82 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 8005cd0:	61f8      	str	r0, [r7, #28]
        break;
 8005cd2:	e010      	b.n	8005cf6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd4:	4b1e      	ldr	r3, [pc, #120]	; (8005d50 <UART_SetConfig+0x56c>)
 8005cd6:	61fb      	str	r3, [r7, #28]
        break;
 8005cd8:	e00d      	b.n	8005cf6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cda:	f7fd fbcd 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8005cde:	61f8      	str	r0, [r7, #28]
        break;
 8005ce0:	e009      	b.n	8005cf6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce6:	61fb      	str	r3, [r7, #28]
        break;
 8005ce8:	e005      	b.n	8005cf6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005cf4:	bf00      	nop
    }

    if (pclk != 0U)
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d019      	beq.n	8005d30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	085a      	lsrs	r2, r3, #1
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	441a      	add	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	d909      	bls.n	8005d2a <UART_SetConfig+0x546>
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d1c:	d205      	bcs.n	8005d2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60da      	str	r2, [r3, #12]
 8005d28:	e002      	b.n	8005d30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3728      	adds	r7, #40	; 0x28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40008000 	.word	0x40008000
 8005d50:	00f42400 	.word	0x00f42400

08005d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00a      	beq.n	8005e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01a      	beq.n	8005e6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e52:	d10a      	bne.n	8005e6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	605a      	str	r2, [r3, #4]
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ea8:	f7fc fa60 	bl	800236c <HAL_GetTick>
 8005eac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d10e      	bne.n	8005eda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f82d 	bl	8005f2a <UART_WaitOnFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e023      	b.n	8005f22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d10e      	bne.n	8005f06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f817 	bl	8005f2a <UART_WaitOnFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e00d      	b.n	8005f22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b09c      	sub	sp, #112	; 0x70
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	603b      	str	r3, [r7, #0]
 8005f36:	4613      	mov	r3, r2
 8005f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f3a:	e0a5      	b.n	8006088 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f42:	f000 80a1 	beq.w	8006088 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f46:	f7fc fa11 	bl	800236c <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d302      	bcc.n	8005f5c <UART_WaitOnFlagUntilTimeout+0x32>
 8005f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d13e      	bne.n	8005fda <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f70:	667b      	str	r3, [r7, #100]	; 0x64
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e6      	bne.n	8005f5c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3308      	adds	r3, #8
 8005f94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	663b      	str	r3, [r7, #96]	; 0x60
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3308      	adds	r3, #8
 8005fac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fae:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e5      	bne.n	8005f8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e067      	b.n	80060aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d04f      	beq.n	8006088 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff6:	d147      	bne.n	8006088 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006000:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006016:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
 8006022:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e6      	bne.n	8006002 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3308      	adds	r3, #8
 800603a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	613b      	str	r3, [r7, #16]
   return(result);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f023 0301 	bic.w	r3, r3, #1
 800604a:	66bb      	str	r3, [r7, #104]	; 0x68
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3308      	adds	r3, #8
 8006052:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006054:	623a      	str	r2, [r7, #32]
 8006056:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	69f9      	ldr	r1, [r7, #28]
 800605a:	6a3a      	ldr	r2, [r7, #32]
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	61bb      	str	r3, [r7, #24]
   return(result);
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e5      	bne.n	8006034 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2220      	movs	r2, #32
 8006078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e010      	b.n	80060aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69da      	ldr	r2, [r3, #28]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	4013      	ands	r3, r2
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	429a      	cmp	r2, r3
 8006096:	bf0c      	ite	eq
 8006098:	2301      	moveq	r3, #1
 800609a:	2300      	movne	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	461a      	mov	r2, r3
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	f43f af4a 	beq.w	8005f3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3770      	adds	r7, #112	; 0x70
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b095      	sub	sp, #84	; 0x54
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d8:	643b      	str	r3, [r7, #64]	; 0x40
 80060da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e6      	bne.n	80060ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3308      	adds	r3, #8
 80060f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f023 0301 	bic.w	r3, r3, #1
 8006102:	64bb      	str	r3, [r7, #72]	; 0x48
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800610c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006114:	e841 2300 	strex	r3, r2, [r1]
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1e5      	bne.n	80060ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006124:	2b01      	cmp	r3, #1
 8006126:	d118      	bne.n	800615a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	60bb      	str	r3, [r7, #8]
   return(result);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f023 0310 	bic.w	r3, r3, #16
 800613c:	647b      	str	r3, [r7, #68]	; 0x44
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	6979      	ldr	r1, [r7, #20]
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	613b      	str	r3, [r7, #16]
   return(result);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e6      	bne.n	8006128 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800616c:	bf00      	nop
 800616e:	3754      	adds	r7, #84	; 0x54
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f7ff fb0e 	bl	80057b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800619c:	bf00      	nop
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c0:	61fb      	str	r3, [r7, #28]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	61bb      	str	r3, [r7, #24]
 80061cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6979      	ldr	r1, [r7, #20]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	613b      	str	r3, [r7, #16]
   return(result);
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e6      	bne.n	80061ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fb fc00 	bl	80019f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f0:	bf00      	nop
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <__errno>:
 800620c:	4b01      	ldr	r3, [pc, #4]	; (8006214 <__errno+0x8>)
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20000024 	.word	0x20000024

08006218 <__libc_init_array>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	4d0d      	ldr	r5, [pc, #52]	; (8006250 <__libc_init_array+0x38>)
 800621c:	4c0d      	ldr	r4, [pc, #52]	; (8006254 <__libc_init_array+0x3c>)
 800621e:	1b64      	subs	r4, r4, r5
 8006220:	10a4      	asrs	r4, r4, #2
 8006222:	2600      	movs	r6, #0
 8006224:	42a6      	cmp	r6, r4
 8006226:	d109      	bne.n	800623c <__libc_init_array+0x24>
 8006228:	4d0b      	ldr	r5, [pc, #44]	; (8006258 <__libc_init_array+0x40>)
 800622a:	4c0c      	ldr	r4, [pc, #48]	; (800625c <__libc_init_array+0x44>)
 800622c:	f001 fbca 	bl	80079c4 <_init>
 8006230:	1b64      	subs	r4, r4, r5
 8006232:	10a4      	asrs	r4, r4, #2
 8006234:	2600      	movs	r6, #0
 8006236:	42a6      	cmp	r6, r4
 8006238:	d105      	bne.n	8006246 <__libc_init_array+0x2e>
 800623a:	bd70      	pop	{r4, r5, r6, pc}
 800623c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006240:	4798      	blx	r3
 8006242:	3601      	adds	r6, #1
 8006244:	e7ee      	b.n	8006224 <__libc_init_array+0xc>
 8006246:	f855 3b04 	ldr.w	r3, [r5], #4
 800624a:	4798      	blx	r3
 800624c:	3601      	adds	r6, #1
 800624e:	e7f2      	b.n	8006236 <__libc_init_array+0x1e>
 8006250:	08007d78 	.word	0x08007d78
 8006254:	08007d78 	.word	0x08007d78
 8006258:	08007d78 	.word	0x08007d78
 800625c:	08007d7c 	.word	0x08007d7c

08006260 <memmove>:
 8006260:	4288      	cmp	r0, r1
 8006262:	b510      	push	{r4, lr}
 8006264:	eb01 0402 	add.w	r4, r1, r2
 8006268:	d902      	bls.n	8006270 <memmove+0x10>
 800626a:	4284      	cmp	r4, r0
 800626c:	4623      	mov	r3, r4
 800626e:	d807      	bhi.n	8006280 <memmove+0x20>
 8006270:	1e43      	subs	r3, r0, #1
 8006272:	42a1      	cmp	r1, r4
 8006274:	d008      	beq.n	8006288 <memmove+0x28>
 8006276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800627a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800627e:	e7f8      	b.n	8006272 <memmove+0x12>
 8006280:	4402      	add	r2, r0
 8006282:	4601      	mov	r1, r0
 8006284:	428a      	cmp	r2, r1
 8006286:	d100      	bne.n	800628a <memmove+0x2a>
 8006288:	bd10      	pop	{r4, pc}
 800628a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800628e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006292:	e7f7      	b.n	8006284 <memmove+0x24>

08006294 <memset>:
 8006294:	4402      	add	r2, r0
 8006296:	4603      	mov	r3, r0
 8006298:	4293      	cmp	r3, r2
 800629a:	d100      	bne.n	800629e <memset+0xa>
 800629c:	4770      	bx	lr
 800629e:	f803 1b01 	strb.w	r1, [r3], #1
 80062a2:	e7f9      	b.n	8006298 <memset+0x4>

080062a4 <siprintf>:
 80062a4:	b40e      	push	{r1, r2, r3}
 80062a6:	b500      	push	{lr}
 80062a8:	b09c      	sub	sp, #112	; 0x70
 80062aa:	ab1d      	add	r3, sp, #116	; 0x74
 80062ac:	9002      	str	r0, [sp, #8]
 80062ae:	9006      	str	r0, [sp, #24]
 80062b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062b4:	4809      	ldr	r0, [pc, #36]	; (80062dc <siprintf+0x38>)
 80062b6:	9107      	str	r1, [sp, #28]
 80062b8:	9104      	str	r1, [sp, #16]
 80062ba:	4909      	ldr	r1, [pc, #36]	; (80062e0 <siprintf+0x3c>)
 80062bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80062c0:	9105      	str	r1, [sp, #20]
 80062c2:	6800      	ldr	r0, [r0, #0]
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	a902      	add	r1, sp, #8
 80062c8:	f000 f888 	bl	80063dc <_svfiprintf_r>
 80062cc:	9b02      	ldr	r3, [sp, #8]
 80062ce:	2200      	movs	r2, #0
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	b01c      	add	sp, #112	; 0x70
 80062d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062d8:	b003      	add	sp, #12
 80062da:	4770      	bx	lr
 80062dc:	20000024 	.word	0x20000024
 80062e0:	ffff0208 	.word	0xffff0208

080062e4 <strcat>:
 80062e4:	b510      	push	{r4, lr}
 80062e6:	4602      	mov	r2, r0
 80062e8:	7814      	ldrb	r4, [r2, #0]
 80062ea:	4613      	mov	r3, r2
 80062ec:	3201      	adds	r2, #1
 80062ee:	2c00      	cmp	r4, #0
 80062f0:	d1fa      	bne.n	80062e8 <strcat+0x4>
 80062f2:	3b01      	subs	r3, #1
 80062f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062fc:	2a00      	cmp	r2, #0
 80062fe:	d1f9      	bne.n	80062f4 <strcat+0x10>
 8006300:	bd10      	pop	{r4, pc}

08006302 <strcspn>:
 8006302:	b570      	push	{r4, r5, r6, lr}
 8006304:	4603      	mov	r3, r0
 8006306:	461e      	mov	r6, r3
 8006308:	f813 4b01 	ldrb.w	r4, [r3], #1
 800630c:	b144      	cbz	r4, 8006320 <strcspn+0x1e>
 800630e:	1e4a      	subs	r2, r1, #1
 8006310:	e001      	b.n	8006316 <strcspn+0x14>
 8006312:	42a5      	cmp	r5, r4
 8006314:	d004      	beq.n	8006320 <strcspn+0x1e>
 8006316:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800631a:	2d00      	cmp	r5, #0
 800631c:	d1f9      	bne.n	8006312 <strcspn+0x10>
 800631e:	e7f2      	b.n	8006306 <strcspn+0x4>
 8006320:	1a30      	subs	r0, r6, r0
 8006322:	bd70      	pop	{r4, r5, r6, pc}

08006324 <__ssputs_r>:
 8006324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006328:	688e      	ldr	r6, [r1, #8]
 800632a:	429e      	cmp	r6, r3
 800632c:	4682      	mov	sl, r0
 800632e:	460c      	mov	r4, r1
 8006330:	4690      	mov	r8, r2
 8006332:	461f      	mov	r7, r3
 8006334:	d838      	bhi.n	80063a8 <__ssputs_r+0x84>
 8006336:	898a      	ldrh	r2, [r1, #12]
 8006338:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800633c:	d032      	beq.n	80063a4 <__ssputs_r+0x80>
 800633e:	6825      	ldr	r5, [r4, #0]
 8006340:	6909      	ldr	r1, [r1, #16]
 8006342:	eba5 0901 	sub.w	r9, r5, r1
 8006346:	6965      	ldr	r5, [r4, #20]
 8006348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800634c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006350:	3301      	adds	r3, #1
 8006352:	444b      	add	r3, r9
 8006354:	106d      	asrs	r5, r5, #1
 8006356:	429d      	cmp	r5, r3
 8006358:	bf38      	it	cc
 800635a:	461d      	movcc	r5, r3
 800635c:	0553      	lsls	r3, r2, #21
 800635e:	d531      	bpl.n	80063c4 <__ssputs_r+0xa0>
 8006360:	4629      	mov	r1, r5
 8006362:	f000 fb49 	bl	80069f8 <_malloc_r>
 8006366:	4606      	mov	r6, r0
 8006368:	b950      	cbnz	r0, 8006380 <__ssputs_r+0x5c>
 800636a:	230c      	movs	r3, #12
 800636c:	f8ca 3000 	str.w	r3, [sl]
 8006370:	89a3      	ldrh	r3, [r4, #12]
 8006372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006376:	81a3      	strh	r3, [r4, #12]
 8006378:	f04f 30ff 	mov.w	r0, #4294967295
 800637c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006380:	6921      	ldr	r1, [r4, #16]
 8006382:	464a      	mov	r2, r9
 8006384:	f000 fabe 	bl	8006904 <memcpy>
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800638e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006392:	81a3      	strh	r3, [r4, #12]
 8006394:	6126      	str	r6, [r4, #16]
 8006396:	6165      	str	r5, [r4, #20]
 8006398:	444e      	add	r6, r9
 800639a:	eba5 0509 	sub.w	r5, r5, r9
 800639e:	6026      	str	r6, [r4, #0]
 80063a0:	60a5      	str	r5, [r4, #8]
 80063a2:	463e      	mov	r6, r7
 80063a4:	42be      	cmp	r6, r7
 80063a6:	d900      	bls.n	80063aa <__ssputs_r+0x86>
 80063a8:	463e      	mov	r6, r7
 80063aa:	6820      	ldr	r0, [r4, #0]
 80063ac:	4632      	mov	r2, r6
 80063ae:	4641      	mov	r1, r8
 80063b0:	f7ff ff56 	bl	8006260 <memmove>
 80063b4:	68a3      	ldr	r3, [r4, #8]
 80063b6:	1b9b      	subs	r3, r3, r6
 80063b8:	60a3      	str	r3, [r4, #8]
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	4433      	add	r3, r6
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	2000      	movs	r0, #0
 80063c2:	e7db      	b.n	800637c <__ssputs_r+0x58>
 80063c4:	462a      	mov	r2, r5
 80063c6:	f000 fb8b 	bl	8006ae0 <_realloc_r>
 80063ca:	4606      	mov	r6, r0
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d1e1      	bne.n	8006394 <__ssputs_r+0x70>
 80063d0:	6921      	ldr	r1, [r4, #16]
 80063d2:	4650      	mov	r0, sl
 80063d4:	f000 faa4 	bl	8006920 <_free_r>
 80063d8:	e7c7      	b.n	800636a <__ssputs_r+0x46>
	...

080063dc <_svfiprintf_r>:
 80063dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e0:	4698      	mov	r8, r3
 80063e2:	898b      	ldrh	r3, [r1, #12]
 80063e4:	061b      	lsls	r3, r3, #24
 80063e6:	b09d      	sub	sp, #116	; 0x74
 80063e8:	4607      	mov	r7, r0
 80063ea:	460d      	mov	r5, r1
 80063ec:	4614      	mov	r4, r2
 80063ee:	d50e      	bpl.n	800640e <_svfiprintf_r+0x32>
 80063f0:	690b      	ldr	r3, [r1, #16]
 80063f2:	b963      	cbnz	r3, 800640e <_svfiprintf_r+0x32>
 80063f4:	2140      	movs	r1, #64	; 0x40
 80063f6:	f000 faff 	bl	80069f8 <_malloc_r>
 80063fa:	6028      	str	r0, [r5, #0]
 80063fc:	6128      	str	r0, [r5, #16]
 80063fe:	b920      	cbnz	r0, 800640a <_svfiprintf_r+0x2e>
 8006400:	230c      	movs	r3, #12
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	e0d1      	b.n	80065ae <_svfiprintf_r+0x1d2>
 800640a:	2340      	movs	r3, #64	; 0x40
 800640c:	616b      	str	r3, [r5, #20]
 800640e:	2300      	movs	r3, #0
 8006410:	9309      	str	r3, [sp, #36]	; 0x24
 8006412:	2320      	movs	r3, #32
 8006414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006418:	f8cd 800c 	str.w	r8, [sp, #12]
 800641c:	2330      	movs	r3, #48	; 0x30
 800641e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80065c8 <_svfiprintf_r+0x1ec>
 8006422:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006426:	f04f 0901 	mov.w	r9, #1
 800642a:	4623      	mov	r3, r4
 800642c:	469a      	mov	sl, r3
 800642e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006432:	b10a      	cbz	r2, 8006438 <_svfiprintf_r+0x5c>
 8006434:	2a25      	cmp	r2, #37	; 0x25
 8006436:	d1f9      	bne.n	800642c <_svfiprintf_r+0x50>
 8006438:	ebba 0b04 	subs.w	fp, sl, r4
 800643c:	d00b      	beq.n	8006456 <_svfiprintf_r+0x7a>
 800643e:	465b      	mov	r3, fp
 8006440:	4622      	mov	r2, r4
 8006442:	4629      	mov	r1, r5
 8006444:	4638      	mov	r0, r7
 8006446:	f7ff ff6d 	bl	8006324 <__ssputs_r>
 800644a:	3001      	adds	r0, #1
 800644c:	f000 80aa 	beq.w	80065a4 <_svfiprintf_r+0x1c8>
 8006450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006452:	445a      	add	r2, fp
 8006454:	9209      	str	r2, [sp, #36]	; 0x24
 8006456:	f89a 3000 	ldrb.w	r3, [sl]
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80a2 	beq.w	80065a4 <_svfiprintf_r+0x1c8>
 8006460:	2300      	movs	r3, #0
 8006462:	f04f 32ff 	mov.w	r2, #4294967295
 8006466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800646a:	f10a 0a01 	add.w	sl, sl, #1
 800646e:	9304      	str	r3, [sp, #16]
 8006470:	9307      	str	r3, [sp, #28]
 8006472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006476:	931a      	str	r3, [sp, #104]	; 0x68
 8006478:	4654      	mov	r4, sl
 800647a:	2205      	movs	r2, #5
 800647c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006480:	4851      	ldr	r0, [pc, #324]	; (80065c8 <_svfiprintf_r+0x1ec>)
 8006482:	f7f9 febd 	bl	8000200 <memchr>
 8006486:	9a04      	ldr	r2, [sp, #16]
 8006488:	b9d8      	cbnz	r0, 80064c2 <_svfiprintf_r+0xe6>
 800648a:	06d0      	lsls	r0, r2, #27
 800648c:	bf44      	itt	mi
 800648e:	2320      	movmi	r3, #32
 8006490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006494:	0711      	lsls	r1, r2, #28
 8006496:	bf44      	itt	mi
 8006498:	232b      	movmi	r3, #43	; 0x2b
 800649a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800649e:	f89a 3000 	ldrb.w	r3, [sl]
 80064a2:	2b2a      	cmp	r3, #42	; 0x2a
 80064a4:	d015      	beq.n	80064d2 <_svfiprintf_r+0xf6>
 80064a6:	9a07      	ldr	r2, [sp, #28]
 80064a8:	4654      	mov	r4, sl
 80064aa:	2000      	movs	r0, #0
 80064ac:	f04f 0c0a 	mov.w	ip, #10
 80064b0:	4621      	mov	r1, r4
 80064b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064b6:	3b30      	subs	r3, #48	; 0x30
 80064b8:	2b09      	cmp	r3, #9
 80064ba:	d94e      	bls.n	800655a <_svfiprintf_r+0x17e>
 80064bc:	b1b0      	cbz	r0, 80064ec <_svfiprintf_r+0x110>
 80064be:	9207      	str	r2, [sp, #28]
 80064c0:	e014      	b.n	80064ec <_svfiprintf_r+0x110>
 80064c2:	eba0 0308 	sub.w	r3, r0, r8
 80064c6:	fa09 f303 	lsl.w	r3, r9, r3
 80064ca:	4313      	orrs	r3, r2
 80064cc:	9304      	str	r3, [sp, #16]
 80064ce:	46a2      	mov	sl, r4
 80064d0:	e7d2      	b.n	8006478 <_svfiprintf_r+0x9c>
 80064d2:	9b03      	ldr	r3, [sp, #12]
 80064d4:	1d19      	adds	r1, r3, #4
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	9103      	str	r1, [sp, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bfbb      	ittet	lt
 80064de:	425b      	neglt	r3, r3
 80064e0:	f042 0202 	orrlt.w	r2, r2, #2
 80064e4:	9307      	strge	r3, [sp, #28]
 80064e6:	9307      	strlt	r3, [sp, #28]
 80064e8:	bfb8      	it	lt
 80064ea:	9204      	strlt	r2, [sp, #16]
 80064ec:	7823      	ldrb	r3, [r4, #0]
 80064ee:	2b2e      	cmp	r3, #46	; 0x2e
 80064f0:	d10c      	bne.n	800650c <_svfiprintf_r+0x130>
 80064f2:	7863      	ldrb	r3, [r4, #1]
 80064f4:	2b2a      	cmp	r3, #42	; 0x2a
 80064f6:	d135      	bne.n	8006564 <_svfiprintf_r+0x188>
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	1d1a      	adds	r2, r3, #4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	9203      	str	r2, [sp, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	bfb8      	it	lt
 8006504:	f04f 33ff 	movlt.w	r3, #4294967295
 8006508:	3402      	adds	r4, #2
 800650a:	9305      	str	r3, [sp, #20]
 800650c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065d8 <_svfiprintf_r+0x1fc>
 8006510:	7821      	ldrb	r1, [r4, #0]
 8006512:	2203      	movs	r2, #3
 8006514:	4650      	mov	r0, sl
 8006516:	f7f9 fe73 	bl	8000200 <memchr>
 800651a:	b140      	cbz	r0, 800652e <_svfiprintf_r+0x152>
 800651c:	2340      	movs	r3, #64	; 0x40
 800651e:	eba0 000a 	sub.w	r0, r0, sl
 8006522:	fa03 f000 	lsl.w	r0, r3, r0
 8006526:	9b04      	ldr	r3, [sp, #16]
 8006528:	4303      	orrs	r3, r0
 800652a:	3401      	adds	r4, #1
 800652c:	9304      	str	r3, [sp, #16]
 800652e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006532:	4826      	ldr	r0, [pc, #152]	; (80065cc <_svfiprintf_r+0x1f0>)
 8006534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006538:	2206      	movs	r2, #6
 800653a:	f7f9 fe61 	bl	8000200 <memchr>
 800653e:	2800      	cmp	r0, #0
 8006540:	d038      	beq.n	80065b4 <_svfiprintf_r+0x1d8>
 8006542:	4b23      	ldr	r3, [pc, #140]	; (80065d0 <_svfiprintf_r+0x1f4>)
 8006544:	bb1b      	cbnz	r3, 800658e <_svfiprintf_r+0x1b2>
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	3307      	adds	r3, #7
 800654a:	f023 0307 	bic.w	r3, r3, #7
 800654e:	3308      	adds	r3, #8
 8006550:	9303      	str	r3, [sp, #12]
 8006552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006554:	4433      	add	r3, r6
 8006556:	9309      	str	r3, [sp, #36]	; 0x24
 8006558:	e767      	b.n	800642a <_svfiprintf_r+0x4e>
 800655a:	fb0c 3202 	mla	r2, ip, r2, r3
 800655e:	460c      	mov	r4, r1
 8006560:	2001      	movs	r0, #1
 8006562:	e7a5      	b.n	80064b0 <_svfiprintf_r+0xd4>
 8006564:	2300      	movs	r3, #0
 8006566:	3401      	adds	r4, #1
 8006568:	9305      	str	r3, [sp, #20]
 800656a:	4619      	mov	r1, r3
 800656c:	f04f 0c0a 	mov.w	ip, #10
 8006570:	4620      	mov	r0, r4
 8006572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006576:	3a30      	subs	r2, #48	; 0x30
 8006578:	2a09      	cmp	r2, #9
 800657a:	d903      	bls.n	8006584 <_svfiprintf_r+0x1a8>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0c5      	beq.n	800650c <_svfiprintf_r+0x130>
 8006580:	9105      	str	r1, [sp, #20]
 8006582:	e7c3      	b.n	800650c <_svfiprintf_r+0x130>
 8006584:	fb0c 2101 	mla	r1, ip, r1, r2
 8006588:	4604      	mov	r4, r0
 800658a:	2301      	movs	r3, #1
 800658c:	e7f0      	b.n	8006570 <_svfiprintf_r+0x194>
 800658e:	ab03      	add	r3, sp, #12
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	462a      	mov	r2, r5
 8006594:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <_svfiprintf_r+0x1f8>)
 8006596:	a904      	add	r1, sp, #16
 8006598:	4638      	mov	r0, r7
 800659a:	f3af 8000 	nop.w
 800659e:	1c42      	adds	r2, r0, #1
 80065a0:	4606      	mov	r6, r0
 80065a2:	d1d6      	bne.n	8006552 <_svfiprintf_r+0x176>
 80065a4:	89ab      	ldrh	r3, [r5, #12]
 80065a6:	065b      	lsls	r3, r3, #25
 80065a8:	f53f af2c 	bmi.w	8006404 <_svfiprintf_r+0x28>
 80065ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065ae:	b01d      	add	sp, #116	; 0x74
 80065b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b4:	ab03      	add	r3, sp, #12
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	462a      	mov	r2, r5
 80065ba:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <_svfiprintf_r+0x1f8>)
 80065bc:	a904      	add	r1, sp, #16
 80065be:	4638      	mov	r0, r7
 80065c0:	f000 f87a 	bl	80066b8 <_printf_i>
 80065c4:	e7eb      	b.n	800659e <_svfiprintf_r+0x1c2>
 80065c6:	bf00      	nop
 80065c8:	08007d0c 	.word	0x08007d0c
 80065cc:	08007d16 	.word	0x08007d16
 80065d0:	00000000 	.word	0x00000000
 80065d4:	08006325 	.word	0x08006325
 80065d8:	08007d12 	.word	0x08007d12

080065dc <_printf_common>:
 80065dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	4616      	mov	r6, r2
 80065e2:	4699      	mov	r9, r3
 80065e4:	688a      	ldr	r2, [r1, #8]
 80065e6:	690b      	ldr	r3, [r1, #16]
 80065e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065ec:	4293      	cmp	r3, r2
 80065ee:	bfb8      	it	lt
 80065f0:	4613      	movlt	r3, r2
 80065f2:	6033      	str	r3, [r6, #0]
 80065f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065f8:	4607      	mov	r7, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	b10a      	cbz	r2, 8006602 <_printf_common+0x26>
 80065fe:	3301      	adds	r3, #1
 8006600:	6033      	str	r3, [r6, #0]
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	0699      	lsls	r1, r3, #26
 8006606:	bf42      	ittt	mi
 8006608:	6833      	ldrmi	r3, [r6, #0]
 800660a:	3302      	addmi	r3, #2
 800660c:	6033      	strmi	r3, [r6, #0]
 800660e:	6825      	ldr	r5, [r4, #0]
 8006610:	f015 0506 	ands.w	r5, r5, #6
 8006614:	d106      	bne.n	8006624 <_printf_common+0x48>
 8006616:	f104 0a19 	add.w	sl, r4, #25
 800661a:	68e3      	ldr	r3, [r4, #12]
 800661c:	6832      	ldr	r2, [r6, #0]
 800661e:	1a9b      	subs	r3, r3, r2
 8006620:	42ab      	cmp	r3, r5
 8006622:	dc26      	bgt.n	8006672 <_printf_common+0x96>
 8006624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006628:	1e13      	subs	r3, r2, #0
 800662a:	6822      	ldr	r2, [r4, #0]
 800662c:	bf18      	it	ne
 800662e:	2301      	movne	r3, #1
 8006630:	0692      	lsls	r2, r2, #26
 8006632:	d42b      	bmi.n	800668c <_printf_common+0xb0>
 8006634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006638:	4649      	mov	r1, r9
 800663a:	4638      	mov	r0, r7
 800663c:	47c0      	blx	r8
 800663e:	3001      	adds	r0, #1
 8006640:	d01e      	beq.n	8006680 <_printf_common+0xa4>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	68e5      	ldr	r5, [r4, #12]
 8006646:	6832      	ldr	r2, [r6, #0]
 8006648:	f003 0306 	and.w	r3, r3, #6
 800664c:	2b04      	cmp	r3, #4
 800664e:	bf08      	it	eq
 8006650:	1aad      	subeq	r5, r5, r2
 8006652:	68a3      	ldr	r3, [r4, #8]
 8006654:	6922      	ldr	r2, [r4, #16]
 8006656:	bf0c      	ite	eq
 8006658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800665c:	2500      	movne	r5, #0
 800665e:	4293      	cmp	r3, r2
 8006660:	bfc4      	itt	gt
 8006662:	1a9b      	subgt	r3, r3, r2
 8006664:	18ed      	addgt	r5, r5, r3
 8006666:	2600      	movs	r6, #0
 8006668:	341a      	adds	r4, #26
 800666a:	42b5      	cmp	r5, r6
 800666c:	d11a      	bne.n	80066a4 <_printf_common+0xc8>
 800666e:	2000      	movs	r0, #0
 8006670:	e008      	b.n	8006684 <_printf_common+0xa8>
 8006672:	2301      	movs	r3, #1
 8006674:	4652      	mov	r2, sl
 8006676:	4649      	mov	r1, r9
 8006678:	4638      	mov	r0, r7
 800667a:	47c0      	blx	r8
 800667c:	3001      	adds	r0, #1
 800667e:	d103      	bne.n	8006688 <_printf_common+0xac>
 8006680:	f04f 30ff 	mov.w	r0, #4294967295
 8006684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006688:	3501      	adds	r5, #1
 800668a:	e7c6      	b.n	800661a <_printf_common+0x3e>
 800668c:	18e1      	adds	r1, r4, r3
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	2030      	movs	r0, #48	; 0x30
 8006692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006696:	4422      	add	r2, r4
 8006698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800669c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066a0:	3302      	adds	r3, #2
 80066a2:	e7c7      	b.n	8006634 <_printf_common+0x58>
 80066a4:	2301      	movs	r3, #1
 80066a6:	4622      	mov	r2, r4
 80066a8:	4649      	mov	r1, r9
 80066aa:	4638      	mov	r0, r7
 80066ac:	47c0      	blx	r8
 80066ae:	3001      	adds	r0, #1
 80066b0:	d0e6      	beq.n	8006680 <_printf_common+0xa4>
 80066b2:	3601      	adds	r6, #1
 80066b4:	e7d9      	b.n	800666a <_printf_common+0x8e>
	...

080066b8 <_printf_i>:
 80066b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	7e0f      	ldrb	r7, [r1, #24]
 80066be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066c0:	2f78      	cmp	r7, #120	; 0x78
 80066c2:	4691      	mov	r9, r2
 80066c4:	4680      	mov	r8, r0
 80066c6:	460c      	mov	r4, r1
 80066c8:	469a      	mov	sl, r3
 80066ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066ce:	d807      	bhi.n	80066e0 <_printf_i+0x28>
 80066d0:	2f62      	cmp	r7, #98	; 0x62
 80066d2:	d80a      	bhi.n	80066ea <_printf_i+0x32>
 80066d4:	2f00      	cmp	r7, #0
 80066d6:	f000 80d8 	beq.w	800688a <_printf_i+0x1d2>
 80066da:	2f58      	cmp	r7, #88	; 0x58
 80066dc:	f000 80a3 	beq.w	8006826 <_printf_i+0x16e>
 80066e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066e8:	e03a      	b.n	8006760 <_printf_i+0xa8>
 80066ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066ee:	2b15      	cmp	r3, #21
 80066f0:	d8f6      	bhi.n	80066e0 <_printf_i+0x28>
 80066f2:	a101      	add	r1, pc, #4	; (adr r1, 80066f8 <_printf_i+0x40>)
 80066f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066f8:	08006751 	.word	0x08006751
 80066fc:	08006765 	.word	0x08006765
 8006700:	080066e1 	.word	0x080066e1
 8006704:	080066e1 	.word	0x080066e1
 8006708:	080066e1 	.word	0x080066e1
 800670c:	080066e1 	.word	0x080066e1
 8006710:	08006765 	.word	0x08006765
 8006714:	080066e1 	.word	0x080066e1
 8006718:	080066e1 	.word	0x080066e1
 800671c:	080066e1 	.word	0x080066e1
 8006720:	080066e1 	.word	0x080066e1
 8006724:	08006871 	.word	0x08006871
 8006728:	08006795 	.word	0x08006795
 800672c:	08006853 	.word	0x08006853
 8006730:	080066e1 	.word	0x080066e1
 8006734:	080066e1 	.word	0x080066e1
 8006738:	08006893 	.word	0x08006893
 800673c:	080066e1 	.word	0x080066e1
 8006740:	08006795 	.word	0x08006795
 8006744:	080066e1 	.word	0x080066e1
 8006748:	080066e1 	.word	0x080066e1
 800674c:	0800685b 	.word	0x0800685b
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	1d1a      	adds	r2, r3, #4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	602a      	str	r2, [r5, #0]
 8006758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800675c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006760:	2301      	movs	r3, #1
 8006762:	e0a3      	b.n	80068ac <_printf_i+0x1f4>
 8006764:	6820      	ldr	r0, [r4, #0]
 8006766:	6829      	ldr	r1, [r5, #0]
 8006768:	0606      	lsls	r6, r0, #24
 800676a:	f101 0304 	add.w	r3, r1, #4
 800676e:	d50a      	bpl.n	8006786 <_printf_i+0xce>
 8006770:	680e      	ldr	r6, [r1, #0]
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	2e00      	cmp	r6, #0
 8006776:	da03      	bge.n	8006780 <_printf_i+0xc8>
 8006778:	232d      	movs	r3, #45	; 0x2d
 800677a:	4276      	negs	r6, r6
 800677c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006780:	485e      	ldr	r0, [pc, #376]	; (80068fc <_printf_i+0x244>)
 8006782:	230a      	movs	r3, #10
 8006784:	e019      	b.n	80067ba <_printf_i+0x102>
 8006786:	680e      	ldr	r6, [r1, #0]
 8006788:	602b      	str	r3, [r5, #0]
 800678a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800678e:	bf18      	it	ne
 8006790:	b236      	sxthne	r6, r6
 8006792:	e7ef      	b.n	8006774 <_printf_i+0xbc>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	6820      	ldr	r0, [r4, #0]
 8006798:	1d19      	adds	r1, r3, #4
 800679a:	6029      	str	r1, [r5, #0]
 800679c:	0601      	lsls	r1, r0, #24
 800679e:	d501      	bpl.n	80067a4 <_printf_i+0xec>
 80067a0:	681e      	ldr	r6, [r3, #0]
 80067a2:	e002      	b.n	80067aa <_printf_i+0xf2>
 80067a4:	0646      	lsls	r6, r0, #25
 80067a6:	d5fb      	bpl.n	80067a0 <_printf_i+0xe8>
 80067a8:	881e      	ldrh	r6, [r3, #0]
 80067aa:	4854      	ldr	r0, [pc, #336]	; (80068fc <_printf_i+0x244>)
 80067ac:	2f6f      	cmp	r7, #111	; 0x6f
 80067ae:	bf0c      	ite	eq
 80067b0:	2308      	moveq	r3, #8
 80067b2:	230a      	movne	r3, #10
 80067b4:	2100      	movs	r1, #0
 80067b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067ba:	6865      	ldr	r5, [r4, #4]
 80067bc:	60a5      	str	r5, [r4, #8]
 80067be:	2d00      	cmp	r5, #0
 80067c0:	bfa2      	ittt	ge
 80067c2:	6821      	ldrge	r1, [r4, #0]
 80067c4:	f021 0104 	bicge.w	r1, r1, #4
 80067c8:	6021      	strge	r1, [r4, #0]
 80067ca:	b90e      	cbnz	r6, 80067d0 <_printf_i+0x118>
 80067cc:	2d00      	cmp	r5, #0
 80067ce:	d04d      	beq.n	800686c <_printf_i+0x1b4>
 80067d0:	4615      	mov	r5, r2
 80067d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80067d6:	fb03 6711 	mls	r7, r3, r1, r6
 80067da:	5dc7      	ldrb	r7, [r0, r7]
 80067dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067e0:	4637      	mov	r7, r6
 80067e2:	42bb      	cmp	r3, r7
 80067e4:	460e      	mov	r6, r1
 80067e6:	d9f4      	bls.n	80067d2 <_printf_i+0x11a>
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d10b      	bne.n	8006804 <_printf_i+0x14c>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	07de      	lsls	r6, r3, #31
 80067f0:	d508      	bpl.n	8006804 <_printf_i+0x14c>
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	6861      	ldr	r1, [r4, #4]
 80067f6:	4299      	cmp	r1, r3
 80067f8:	bfde      	ittt	le
 80067fa:	2330      	movle	r3, #48	; 0x30
 80067fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006800:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006804:	1b52      	subs	r2, r2, r5
 8006806:	6122      	str	r2, [r4, #16]
 8006808:	f8cd a000 	str.w	sl, [sp]
 800680c:	464b      	mov	r3, r9
 800680e:	aa03      	add	r2, sp, #12
 8006810:	4621      	mov	r1, r4
 8006812:	4640      	mov	r0, r8
 8006814:	f7ff fee2 	bl	80065dc <_printf_common>
 8006818:	3001      	adds	r0, #1
 800681a:	d14c      	bne.n	80068b6 <_printf_i+0x1fe>
 800681c:	f04f 30ff 	mov.w	r0, #4294967295
 8006820:	b004      	add	sp, #16
 8006822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006826:	4835      	ldr	r0, [pc, #212]	; (80068fc <_printf_i+0x244>)
 8006828:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800682c:	6829      	ldr	r1, [r5, #0]
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	f851 6b04 	ldr.w	r6, [r1], #4
 8006834:	6029      	str	r1, [r5, #0]
 8006836:	061d      	lsls	r5, r3, #24
 8006838:	d514      	bpl.n	8006864 <_printf_i+0x1ac>
 800683a:	07df      	lsls	r7, r3, #31
 800683c:	bf44      	itt	mi
 800683e:	f043 0320 	orrmi.w	r3, r3, #32
 8006842:	6023      	strmi	r3, [r4, #0]
 8006844:	b91e      	cbnz	r6, 800684e <_printf_i+0x196>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	f023 0320 	bic.w	r3, r3, #32
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	2310      	movs	r3, #16
 8006850:	e7b0      	b.n	80067b4 <_printf_i+0xfc>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	f043 0320 	orr.w	r3, r3, #32
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	2378      	movs	r3, #120	; 0x78
 800685c:	4828      	ldr	r0, [pc, #160]	; (8006900 <_printf_i+0x248>)
 800685e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006862:	e7e3      	b.n	800682c <_printf_i+0x174>
 8006864:	0659      	lsls	r1, r3, #25
 8006866:	bf48      	it	mi
 8006868:	b2b6      	uxthmi	r6, r6
 800686a:	e7e6      	b.n	800683a <_printf_i+0x182>
 800686c:	4615      	mov	r5, r2
 800686e:	e7bb      	b.n	80067e8 <_printf_i+0x130>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	6826      	ldr	r6, [r4, #0]
 8006874:	6961      	ldr	r1, [r4, #20]
 8006876:	1d18      	adds	r0, r3, #4
 8006878:	6028      	str	r0, [r5, #0]
 800687a:	0635      	lsls	r5, r6, #24
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	d501      	bpl.n	8006884 <_printf_i+0x1cc>
 8006880:	6019      	str	r1, [r3, #0]
 8006882:	e002      	b.n	800688a <_printf_i+0x1d2>
 8006884:	0670      	lsls	r0, r6, #25
 8006886:	d5fb      	bpl.n	8006880 <_printf_i+0x1c8>
 8006888:	8019      	strh	r1, [r3, #0]
 800688a:	2300      	movs	r3, #0
 800688c:	6123      	str	r3, [r4, #16]
 800688e:	4615      	mov	r5, r2
 8006890:	e7ba      	b.n	8006808 <_printf_i+0x150>
 8006892:	682b      	ldr	r3, [r5, #0]
 8006894:	1d1a      	adds	r2, r3, #4
 8006896:	602a      	str	r2, [r5, #0]
 8006898:	681d      	ldr	r5, [r3, #0]
 800689a:	6862      	ldr	r2, [r4, #4]
 800689c:	2100      	movs	r1, #0
 800689e:	4628      	mov	r0, r5
 80068a0:	f7f9 fcae 	bl	8000200 <memchr>
 80068a4:	b108      	cbz	r0, 80068aa <_printf_i+0x1f2>
 80068a6:	1b40      	subs	r0, r0, r5
 80068a8:	6060      	str	r0, [r4, #4]
 80068aa:	6863      	ldr	r3, [r4, #4]
 80068ac:	6123      	str	r3, [r4, #16]
 80068ae:	2300      	movs	r3, #0
 80068b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b4:	e7a8      	b.n	8006808 <_printf_i+0x150>
 80068b6:	6923      	ldr	r3, [r4, #16]
 80068b8:	462a      	mov	r2, r5
 80068ba:	4649      	mov	r1, r9
 80068bc:	4640      	mov	r0, r8
 80068be:	47d0      	blx	sl
 80068c0:	3001      	adds	r0, #1
 80068c2:	d0ab      	beq.n	800681c <_printf_i+0x164>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	079b      	lsls	r3, r3, #30
 80068c8:	d413      	bmi.n	80068f2 <_printf_i+0x23a>
 80068ca:	68e0      	ldr	r0, [r4, #12]
 80068cc:	9b03      	ldr	r3, [sp, #12]
 80068ce:	4298      	cmp	r0, r3
 80068d0:	bfb8      	it	lt
 80068d2:	4618      	movlt	r0, r3
 80068d4:	e7a4      	b.n	8006820 <_printf_i+0x168>
 80068d6:	2301      	movs	r3, #1
 80068d8:	4632      	mov	r2, r6
 80068da:	4649      	mov	r1, r9
 80068dc:	4640      	mov	r0, r8
 80068de:	47d0      	blx	sl
 80068e0:	3001      	adds	r0, #1
 80068e2:	d09b      	beq.n	800681c <_printf_i+0x164>
 80068e4:	3501      	adds	r5, #1
 80068e6:	68e3      	ldr	r3, [r4, #12]
 80068e8:	9903      	ldr	r1, [sp, #12]
 80068ea:	1a5b      	subs	r3, r3, r1
 80068ec:	42ab      	cmp	r3, r5
 80068ee:	dcf2      	bgt.n	80068d6 <_printf_i+0x21e>
 80068f0:	e7eb      	b.n	80068ca <_printf_i+0x212>
 80068f2:	2500      	movs	r5, #0
 80068f4:	f104 0619 	add.w	r6, r4, #25
 80068f8:	e7f5      	b.n	80068e6 <_printf_i+0x22e>
 80068fa:	bf00      	nop
 80068fc:	08007d1d 	.word	0x08007d1d
 8006900:	08007d2e 	.word	0x08007d2e

08006904 <memcpy>:
 8006904:	440a      	add	r2, r1
 8006906:	4291      	cmp	r1, r2
 8006908:	f100 33ff 	add.w	r3, r0, #4294967295
 800690c:	d100      	bne.n	8006910 <memcpy+0xc>
 800690e:	4770      	bx	lr
 8006910:	b510      	push	{r4, lr}
 8006912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800691a:	4291      	cmp	r1, r2
 800691c:	d1f9      	bne.n	8006912 <memcpy+0xe>
 800691e:	bd10      	pop	{r4, pc}

08006920 <_free_r>:
 8006920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006922:	2900      	cmp	r1, #0
 8006924:	d044      	beq.n	80069b0 <_free_r+0x90>
 8006926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800692a:	9001      	str	r0, [sp, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	f1a1 0404 	sub.w	r4, r1, #4
 8006932:	bfb8      	it	lt
 8006934:	18e4      	addlt	r4, r4, r3
 8006936:	f000 f913 	bl	8006b60 <__malloc_lock>
 800693a:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <_free_r+0x94>)
 800693c:	9801      	ldr	r0, [sp, #4]
 800693e:	6813      	ldr	r3, [r2, #0]
 8006940:	b933      	cbnz	r3, 8006950 <_free_r+0x30>
 8006942:	6063      	str	r3, [r4, #4]
 8006944:	6014      	str	r4, [r2, #0]
 8006946:	b003      	add	sp, #12
 8006948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800694c:	f000 b90e 	b.w	8006b6c <__malloc_unlock>
 8006950:	42a3      	cmp	r3, r4
 8006952:	d908      	bls.n	8006966 <_free_r+0x46>
 8006954:	6825      	ldr	r5, [r4, #0]
 8006956:	1961      	adds	r1, r4, r5
 8006958:	428b      	cmp	r3, r1
 800695a:	bf01      	itttt	eq
 800695c:	6819      	ldreq	r1, [r3, #0]
 800695e:	685b      	ldreq	r3, [r3, #4]
 8006960:	1949      	addeq	r1, r1, r5
 8006962:	6021      	streq	r1, [r4, #0]
 8006964:	e7ed      	b.n	8006942 <_free_r+0x22>
 8006966:	461a      	mov	r2, r3
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	b10b      	cbz	r3, 8006970 <_free_r+0x50>
 800696c:	42a3      	cmp	r3, r4
 800696e:	d9fa      	bls.n	8006966 <_free_r+0x46>
 8006970:	6811      	ldr	r1, [r2, #0]
 8006972:	1855      	adds	r5, r2, r1
 8006974:	42a5      	cmp	r5, r4
 8006976:	d10b      	bne.n	8006990 <_free_r+0x70>
 8006978:	6824      	ldr	r4, [r4, #0]
 800697a:	4421      	add	r1, r4
 800697c:	1854      	adds	r4, r2, r1
 800697e:	42a3      	cmp	r3, r4
 8006980:	6011      	str	r1, [r2, #0]
 8006982:	d1e0      	bne.n	8006946 <_free_r+0x26>
 8006984:	681c      	ldr	r4, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	6053      	str	r3, [r2, #4]
 800698a:	4421      	add	r1, r4
 800698c:	6011      	str	r1, [r2, #0]
 800698e:	e7da      	b.n	8006946 <_free_r+0x26>
 8006990:	d902      	bls.n	8006998 <_free_r+0x78>
 8006992:	230c      	movs	r3, #12
 8006994:	6003      	str	r3, [r0, #0]
 8006996:	e7d6      	b.n	8006946 <_free_r+0x26>
 8006998:	6825      	ldr	r5, [r4, #0]
 800699a:	1961      	adds	r1, r4, r5
 800699c:	428b      	cmp	r3, r1
 800699e:	bf04      	itt	eq
 80069a0:	6819      	ldreq	r1, [r3, #0]
 80069a2:	685b      	ldreq	r3, [r3, #4]
 80069a4:	6063      	str	r3, [r4, #4]
 80069a6:	bf04      	itt	eq
 80069a8:	1949      	addeq	r1, r1, r5
 80069aa:	6021      	streq	r1, [r4, #0]
 80069ac:	6054      	str	r4, [r2, #4]
 80069ae:	e7ca      	b.n	8006946 <_free_r+0x26>
 80069b0:	b003      	add	sp, #12
 80069b2:	bd30      	pop	{r4, r5, pc}
 80069b4:	200002ac 	.word	0x200002ac

080069b8 <sbrk_aligned>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	4e0e      	ldr	r6, [pc, #56]	; (80069f4 <sbrk_aligned+0x3c>)
 80069bc:	460c      	mov	r4, r1
 80069be:	6831      	ldr	r1, [r6, #0]
 80069c0:	4605      	mov	r5, r0
 80069c2:	b911      	cbnz	r1, 80069ca <sbrk_aligned+0x12>
 80069c4:	f000 f8bc 	bl	8006b40 <_sbrk_r>
 80069c8:	6030      	str	r0, [r6, #0]
 80069ca:	4621      	mov	r1, r4
 80069cc:	4628      	mov	r0, r5
 80069ce:	f000 f8b7 	bl	8006b40 <_sbrk_r>
 80069d2:	1c43      	adds	r3, r0, #1
 80069d4:	d00a      	beq.n	80069ec <sbrk_aligned+0x34>
 80069d6:	1cc4      	adds	r4, r0, #3
 80069d8:	f024 0403 	bic.w	r4, r4, #3
 80069dc:	42a0      	cmp	r0, r4
 80069de:	d007      	beq.n	80069f0 <sbrk_aligned+0x38>
 80069e0:	1a21      	subs	r1, r4, r0
 80069e2:	4628      	mov	r0, r5
 80069e4:	f000 f8ac 	bl	8006b40 <_sbrk_r>
 80069e8:	3001      	adds	r0, #1
 80069ea:	d101      	bne.n	80069f0 <sbrk_aligned+0x38>
 80069ec:	f04f 34ff 	mov.w	r4, #4294967295
 80069f0:	4620      	mov	r0, r4
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	200002b0 	.word	0x200002b0

080069f8 <_malloc_r>:
 80069f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069fc:	1ccd      	adds	r5, r1, #3
 80069fe:	f025 0503 	bic.w	r5, r5, #3
 8006a02:	3508      	adds	r5, #8
 8006a04:	2d0c      	cmp	r5, #12
 8006a06:	bf38      	it	cc
 8006a08:	250c      	movcc	r5, #12
 8006a0a:	2d00      	cmp	r5, #0
 8006a0c:	4607      	mov	r7, r0
 8006a0e:	db01      	blt.n	8006a14 <_malloc_r+0x1c>
 8006a10:	42a9      	cmp	r1, r5
 8006a12:	d905      	bls.n	8006a20 <_malloc_r+0x28>
 8006a14:	230c      	movs	r3, #12
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	2600      	movs	r6, #0
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a20:	4e2e      	ldr	r6, [pc, #184]	; (8006adc <_malloc_r+0xe4>)
 8006a22:	f000 f89d 	bl	8006b60 <__malloc_lock>
 8006a26:	6833      	ldr	r3, [r6, #0]
 8006a28:	461c      	mov	r4, r3
 8006a2a:	bb34      	cbnz	r4, 8006a7a <_malloc_r+0x82>
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	4638      	mov	r0, r7
 8006a30:	f7ff ffc2 	bl	80069b8 <sbrk_aligned>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	4604      	mov	r4, r0
 8006a38:	d14d      	bne.n	8006ad6 <_malloc_r+0xde>
 8006a3a:	6834      	ldr	r4, [r6, #0]
 8006a3c:	4626      	mov	r6, r4
 8006a3e:	2e00      	cmp	r6, #0
 8006a40:	d140      	bne.n	8006ac4 <_malloc_r+0xcc>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	4631      	mov	r1, r6
 8006a46:	4638      	mov	r0, r7
 8006a48:	eb04 0803 	add.w	r8, r4, r3
 8006a4c:	f000 f878 	bl	8006b40 <_sbrk_r>
 8006a50:	4580      	cmp	r8, r0
 8006a52:	d13a      	bne.n	8006aca <_malloc_r+0xd2>
 8006a54:	6821      	ldr	r1, [r4, #0]
 8006a56:	3503      	adds	r5, #3
 8006a58:	1a6d      	subs	r5, r5, r1
 8006a5a:	f025 0503 	bic.w	r5, r5, #3
 8006a5e:	3508      	adds	r5, #8
 8006a60:	2d0c      	cmp	r5, #12
 8006a62:	bf38      	it	cc
 8006a64:	250c      	movcc	r5, #12
 8006a66:	4629      	mov	r1, r5
 8006a68:	4638      	mov	r0, r7
 8006a6a:	f7ff ffa5 	bl	80069b8 <sbrk_aligned>
 8006a6e:	3001      	adds	r0, #1
 8006a70:	d02b      	beq.n	8006aca <_malloc_r+0xd2>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	442b      	add	r3, r5
 8006a76:	6023      	str	r3, [r4, #0]
 8006a78:	e00e      	b.n	8006a98 <_malloc_r+0xa0>
 8006a7a:	6822      	ldr	r2, [r4, #0]
 8006a7c:	1b52      	subs	r2, r2, r5
 8006a7e:	d41e      	bmi.n	8006abe <_malloc_r+0xc6>
 8006a80:	2a0b      	cmp	r2, #11
 8006a82:	d916      	bls.n	8006ab2 <_malloc_r+0xba>
 8006a84:	1961      	adds	r1, r4, r5
 8006a86:	42a3      	cmp	r3, r4
 8006a88:	6025      	str	r5, [r4, #0]
 8006a8a:	bf18      	it	ne
 8006a8c:	6059      	strne	r1, [r3, #4]
 8006a8e:	6863      	ldr	r3, [r4, #4]
 8006a90:	bf08      	it	eq
 8006a92:	6031      	streq	r1, [r6, #0]
 8006a94:	5162      	str	r2, [r4, r5]
 8006a96:	604b      	str	r3, [r1, #4]
 8006a98:	4638      	mov	r0, r7
 8006a9a:	f104 060b 	add.w	r6, r4, #11
 8006a9e:	f000 f865 	bl	8006b6c <__malloc_unlock>
 8006aa2:	f026 0607 	bic.w	r6, r6, #7
 8006aa6:	1d23      	adds	r3, r4, #4
 8006aa8:	1af2      	subs	r2, r6, r3
 8006aaa:	d0b6      	beq.n	8006a1a <_malloc_r+0x22>
 8006aac:	1b9b      	subs	r3, r3, r6
 8006aae:	50a3      	str	r3, [r4, r2]
 8006ab0:	e7b3      	b.n	8006a1a <_malloc_r+0x22>
 8006ab2:	6862      	ldr	r2, [r4, #4]
 8006ab4:	42a3      	cmp	r3, r4
 8006ab6:	bf0c      	ite	eq
 8006ab8:	6032      	streq	r2, [r6, #0]
 8006aba:	605a      	strne	r2, [r3, #4]
 8006abc:	e7ec      	b.n	8006a98 <_malloc_r+0xa0>
 8006abe:	4623      	mov	r3, r4
 8006ac0:	6864      	ldr	r4, [r4, #4]
 8006ac2:	e7b2      	b.n	8006a2a <_malloc_r+0x32>
 8006ac4:	4634      	mov	r4, r6
 8006ac6:	6876      	ldr	r6, [r6, #4]
 8006ac8:	e7b9      	b.n	8006a3e <_malloc_r+0x46>
 8006aca:	230c      	movs	r3, #12
 8006acc:	603b      	str	r3, [r7, #0]
 8006ace:	4638      	mov	r0, r7
 8006ad0:	f000 f84c 	bl	8006b6c <__malloc_unlock>
 8006ad4:	e7a1      	b.n	8006a1a <_malloc_r+0x22>
 8006ad6:	6025      	str	r5, [r4, #0]
 8006ad8:	e7de      	b.n	8006a98 <_malloc_r+0xa0>
 8006ada:	bf00      	nop
 8006adc:	200002ac 	.word	0x200002ac

08006ae0 <_realloc_r>:
 8006ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	4614      	mov	r4, r2
 8006ae8:	460e      	mov	r6, r1
 8006aea:	b921      	cbnz	r1, 8006af6 <_realloc_r+0x16>
 8006aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006af0:	4611      	mov	r1, r2
 8006af2:	f7ff bf81 	b.w	80069f8 <_malloc_r>
 8006af6:	b92a      	cbnz	r2, 8006b04 <_realloc_r+0x24>
 8006af8:	f7ff ff12 	bl	8006920 <_free_r>
 8006afc:	4625      	mov	r5, r4
 8006afe:	4628      	mov	r0, r5
 8006b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b04:	f000 f838 	bl	8006b78 <_malloc_usable_size_r>
 8006b08:	4284      	cmp	r4, r0
 8006b0a:	4607      	mov	r7, r0
 8006b0c:	d802      	bhi.n	8006b14 <_realloc_r+0x34>
 8006b0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b12:	d812      	bhi.n	8006b3a <_realloc_r+0x5a>
 8006b14:	4621      	mov	r1, r4
 8006b16:	4640      	mov	r0, r8
 8006b18:	f7ff ff6e 	bl	80069f8 <_malloc_r>
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d0ed      	beq.n	8006afe <_realloc_r+0x1e>
 8006b22:	42bc      	cmp	r4, r7
 8006b24:	4622      	mov	r2, r4
 8006b26:	4631      	mov	r1, r6
 8006b28:	bf28      	it	cs
 8006b2a:	463a      	movcs	r2, r7
 8006b2c:	f7ff feea 	bl	8006904 <memcpy>
 8006b30:	4631      	mov	r1, r6
 8006b32:	4640      	mov	r0, r8
 8006b34:	f7ff fef4 	bl	8006920 <_free_r>
 8006b38:	e7e1      	b.n	8006afe <_realloc_r+0x1e>
 8006b3a:	4635      	mov	r5, r6
 8006b3c:	e7df      	b.n	8006afe <_realloc_r+0x1e>
	...

08006b40 <_sbrk_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d06      	ldr	r5, [pc, #24]	; (8006b5c <_sbrk_r+0x1c>)
 8006b44:	2300      	movs	r3, #0
 8006b46:	4604      	mov	r4, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	f7fb fb34 	bl	80021b8 <_sbrk>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_sbrk_r+0x1a>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_sbrk_r+0x1a>
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	200002b4 	.word	0x200002b4

08006b60 <__malloc_lock>:
 8006b60:	4801      	ldr	r0, [pc, #4]	; (8006b68 <__malloc_lock+0x8>)
 8006b62:	f000 b811 	b.w	8006b88 <__retarget_lock_acquire_recursive>
 8006b66:	bf00      	nop
 8006b68:	200002b8 	.word	0x200002b8

08006b6c <__malloc_unlock>:
 8006b6c:	4801      	ldr	r0, [pc, #4]	; (8006b74 <__malloc_unlock+0x8>)
 8006b6e:	f000 b80c 	b.w	8006b8a <__retarget_lock_release_recursive>
 8006b72:	bf00      	nop
 8006b74:	200002b8 	.word	0x200002b8

08006b78 <_malloc_usable_size_r>:
 8006b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b7c:	1f18      	subs	r0, r3, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	bfbc      	itt	lt
 8006b82:	580b      	ldrlt	r3, [r1, r0]
 8006b84:	18c0      	addlt	r0, r0, r3
 8006b86:	4770      	bx	lr

08006b88 <__retarget_lock_acquire_recursive>:
 8006b88:	4770      	bx	lr

08006b8a <__retarget_lock_release_recursive>:
 8006b8a:	4770      	bx	lr

08006b8c <pow>:
 8006b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8e:	ed2d 8b02 	vpush	{d8}
 8006b92:	eeb0 8a40 	vmov.f32	s16, s0
 8006b96:	eef0 8a60 	vmov.f32	s17, s1
 8006b9a:	ec55 4b11 	vmov	r4, r5, d1
 8006b9e:	f000 f867 	bl	8006c70 <__ieee754_pow>
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	462b      	mov	r3, r5
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	4629      	mov	r1, r5
 8006baa:	ec57 6b10 	vmov	r6, r7, d0
 8006bae:	f7f9 ffcd 	bl	8000b4c <__aeabi_dcmpun>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d13b      	bne.n	8006c2e <pow+0xa2>
 8006bb6:	ec51 0b18 	vmov	r0, r1, d8
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f7f9 ff93 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bc2:	b1b8      	cbz	r0, 8006bf4 <pow+0x68>
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4620      	mov	r0, r4
 8006bca:	4629      	mov	r1, r5
 8006bcc:	f7f9 ff8c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d146      	bne.n	8006c62 <pow+0xd6>
 8006bd4:	ec45 4b10 	vmov	d0, r4, r5
 8006bd8:	f000 fe63 	bl	80078a2 <finite>
 8006bdc:	b338      	cbz	r0, 8006c2e <pow+0xa2>
 8006bde:	2200      	movs	r2, #0
 8006be0:	2300      	movs	r3, #0
 8006be2:	4620      	mov	r0, r4
 8006be4:	4629      	mov	r1, r5
 8006be6:	f7f9 ff89 	bl	8000afc <__aeabi_dcmplt>
 8006bea:	b300      	cbz	r0, 8006c2e <pow+0xa2>
 8006bec:	f7ff fb0e 	bl	800620c <__errno>
 8006bf0:	2322      	movs	r3, #34	; 0x22
 8006bf2:	e01b      	b.n	8006c2c <pow+0xa0>
 8006bf4:	ec47 6b10 	vmov	d0, r6, r7
 8006bf8:	f000 fe53 	bl	80078a2 <finite>
 8006bfc:	b9e0      	cbnz	r0, 8006c38 <pow+0xac>
 8006bfe:	eeb0 0a48 	vmov.f32	s0, s16
 8006c02:	eef0 0a68 	vmov.f32	s1, s17
 8006c06:	f000 fe4c 	bl	80078a2 <finite>
 8006c0a:	b1a8      	cbz	r0, 8006c38 <pow+0xac>
 8006c0c:	ec45 4b10 	vmov	d0, r4, r5
 8006c10:	f000 fe47 	bl	80078a2 <finite>
 8006c14:	b180      	cbz	r0, 8006c38 <pow+0xac>
 8006c16:	4632      	mov	r2, r6
 8006c18:	463b      	mov	r3, r7
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	f7f9 ff95 	bl	8000b4c <__aeabi_dcmpun>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d0e2      	beq.n	8006bec <pow+0x60>
 8006c26:	f7ff faf1 	bl	800620c <__errno>
 8006c2a:	2321      	movs	r3, #33	; 0x21
 8006c2c:	6003      	str	r3, [r0, #0]
 8006c2e:	ecbd 8b02 	vpop	{d8}
 8006c32:	ec47 6b10 	vmov	d0, r6, r7
 8006c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	4639      	mov	r1, r7
 8006c40:	f7f9 ff52 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d0f2      	beq.n	8006c2e <pow+0xa2>
 8006c48:	eeb0 0a48 	vmov.f32	s0, s16
 8006c4c:	eef0 0a68 	vmov.f32	s1, s17
 8006c50:	f000 fe27 	bl	80078a2 <finite>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d0ea      	beq.n	8006c2e <pow+0xa2>
 8006c58:	ec45 4b10 	vmov	d0, r4, r5
 8006c5c:	f000 fe21 	bl	80078a2 <finite>
 8006c60:	e7c3      	b.n	8006bea <pow+0x5e>
 8006c62:	4f01      	ldr	r7, [pc, #4]	; (8006c68 <pow+0xdc>)
 8006c64:	2600      	movs	r6, #0
 8006c66:	e7e2      	b.n	8006c2e <pow+0xa2>
 8006c68:	3ff00000 	.word	0x3ff00000
 8006c6c:	00000000 	.word	0x00000000

08006c70 <__ieee754_pow>:
 8006c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	ed2d 8b06 	vpush	{d8-d10}
 8006c78:	b089      	sub	sp, #36	; 0x24
 8006c7a:	ed8d 1b00 	vstr	d1, [sp]
 8006c7e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006c82:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006c86:	ea58 0102 	orrs.w	r1, r8, r2
 8006c8a:	ec57 6b10 	vmov	r6, r7, d0
 8006c8e:	d115      	bne.n	8006cbc <__ieee754_pow+0x4c>
 8006c90:	19b3      	adds	r3, r6, r6
 8006c92:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006c96:	4152      	adcs	r2, r2
 8006c98:	4299      	cmp	r1, r3
 8006c9a:	4b89      	ldr	r3, [pc, #548]	; (8006ec0 <__ieee754_pow+0x250>)
 8006c9c:	4193      	sbcs	r3, r2
 8006c9e:	f080 84d2 	bcs.w	8007646 <__ieee754_pow+0x9d6>
 8006ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	4639      	mov	r1, r7
 8006caa:	f7f9 faff 	bl	80002ac <__adddf3>
 8006cae:	ec41 0b10 	vmov	d0, r0, r1
 8006cb2:	b009      	add	sp, #36	; 0x24
 8006cb4:	ecbd 8b06 	vpop	{d8-d10}
 8006cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbc:	4b81      	ldr	r3, [pc, #516]	; (8006ec4 <__ieee754_pow+0x254>)
 8006cbe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006cc2:	429c      	cmp	r4, r3
 8006cc4:	ee10 aa10 	vmov	sl, s0
 8006cc8:	463d      	mov	r5, r7
 8006cca:	dc06      	bgt.n	8006cda <__ieee754_pow+0x6a>
 8006ccc:	d101      	bne.n	8006cd2 <__ieee754_pow+0x62>
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	d1e7      	bne.n	8006ca2 <__ieee754_pow+0x32>
 8006cd2:	4598      	cmp	r8, r3
 8006cd4:	dc01      	bgt.n	8006cda <__ieee754_pow+0x6a>
 8006cd6:	d10f      	bne.n	8006cf8 <__ieee754_pow+0x88>
 8006cd8:	b172      	cbz	r2, 8006cf8 <__ieee754_pow+0x88>
 8006cda:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006cde:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006ce2:	ea55 050a 	orrs.w	r5, r5, sl
 8006ce6:	d1dc      	bne.n	8006ca2 <__ieee754_pow+0x32>
 8006ce8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006cec:	18db      	adds	r3, r3, r3
 8006cee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006cf2:	4152      	adcs	r2, r2
 8006cf4:	429d      	cmp	r5, r3
 8006cf6:	e7d0      	b.n	8006c9a <__ieee754_pow+0x2a>
 8006cf8:	2d00      	cmp	r5, #0
 8006cfa:	da3b      	bge.n	8006d74 <__ieee754_pow+0x104>
 8006cfc:	4b72      	ldr	r3, [pc, #456]	; (8006ec8 <__ieee754_pow+0x258>)
 8006cfe:	4598      	cmp	r8, r3
 8006d00:	dc51      	bgt.n	8006da6 <__ieee754_pow+0x136>
 8006d02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006d06:	4598      	cmp	r8, r3
 8006d08:	f340 84ac 	ble.w	8007664 <__ieee754_pow+0x9f4>
 8006d0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006d10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d14:	2b14      	cmp	r3, #20
 8006d16:	dd0f      	ble.n	8006d38 <__ieee754_pow+0xc8>
 8006d18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006d1c:	fa22 f103 	lsr.w	r1, r2, r3
 8006d20:	fa01 f303 	lsl.w	r3, r1, r3
 8006d24:	4293      	cmp	r3, r2
 8006d26:	f040 849d 	bne.w	8007664 <__ieee754_pow+0x9f4>
 8006d2a:	f001 0101 	and.w	r1, r1, #1
 8006d2e:	f1c1 0302 	rsb	r3, r1, #2
 8006d32:	9304      	str	r3, [sp, #16]
 8006d34:	b182      	cbz	r2, 8006d58 <__ieee754_pow+0xe8>
 8006d36:	e05f      	b.n	8006df8 <__ieee754_pow+0x188>
 8006d38:	2a00      	cmp	r2, #0
 8006d3a:	d15b      	bne.n	8006df4 <__ieee754_pow+0x184>
 8006d3c:	f1c3 0314 	rsb	r3, r3, #20
 8006d40:	fa48 f103 	asr.w	r1, r8, r3
 8006d44:	fa01 f303 	lsl.w	r3, r1, r3
 8006d48:	4543      	cmp	r3, r8
 8006d4a:	f040 8488 	bne.w	800765e <__ieee754_pow+0x9ee>
 8006d4e:	f001 0101 	and.w	r1, r1, #1
 8006d52:	f1c1 0302 	rsb	r3, r1, #2
 8006d56:	9304      	str	r3, [sp, #16]
 8006d58:	4b5c      	ldr	r3, [pc, #368]	; (8006ecc <__ieee754_pow+0x25c>)
 8006d5a:	4598      	cmp	r8, r3
 8006d5c:	d132      	bne.n	8006dc4 <__ieee754_pow+0x154>
 8006d5e:	f1b9 0f00 	cmp.w	r9, #0
 8006d62:	f280 8478 	bge.w	8007656 <__ieee754_pow+0x9e6>
 8006d66:	4959      	ldr	r1, [pc, #356]	; (8006ecc <__ieee754_pow+0x25c>)
 8006d68:	4632      	mov	r2, r6
 8006d6a:	463b      	mov	r3, r7
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	f7f9 fd7d 	bl	800086c <__aeabi_ddiv>
 8006d72:	e79c      	b.n	8006cae <__ieee754_pow+0x3e>
 8006d74:	2300      	movs	r3, #0
 8006d76:	9304      	str	r3, [sp, #16]
 8006d78:	2a00      	cmp	r2, #0
 8006d7a:	d13d      	bne.n	8006df8 <__ieee754_pow+0x188>
 8006d7c:	4b51      	ldr	r3, [pc, #324]	; (8006ec4 <__ieee754_pow+0x254>)
 8006d7e:	4598      	cmp	r8, r3
 8006d80:	d1ea      	bne.n	8006d58 <__ieee754_pow+0xe8>
 8006d82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006d86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006d8a:	ea53 030a 	orrs.w	r3, r3, sl
 8006d8e:	f000 845a 	beq.w	8007646 <__ieee754_pow+0x9d6>
 8006d92:	4b4f      	ldr	r3, [pc, #316]	; (8006ed0 <__ieee754_pow+0x260>)
 8006d94:	429c      	cmp	r4, r3
 8006d96:	dd08      	ble.n	8006daa <__ieee754_pow+0x13a>
 8006d98:	f1b9 0f00 	cmp.w	r9, #0
 8006d9c:	f2c0 8457 	blt.w	800764e <__ieee754_pow+0x9de>
 8006da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006da4:	e783      	b.n	8006cae <__ieee754_pow+0x3e>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e7e5      	b.n	8006d76 <__ieee754_pow+0x106>
 8006daa:	f1b9 0f00 	cmp.w	r9, #0
 8006dae:	f04f 0000 	mov.w	r0, #0
 8006db2:	f04f 0100 	mov.w	r1, #0
 8006db6:	f6bf af7a 	bge.w	8006cae <__ieee754_pow+0x3e>
 8006dba:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006dbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006dc2:	e774      	b.n	8006cae <__ieee754_pow+0x3e>
 8006dc4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006dc8:	d106      	bne.n	8006dd8 <__ieee754_pow+0x168>
 8006dca:	4632      	mov	r2, r6
 8006dcc:	463b      	mov	r3, r7
 8006dce:	4630      	mov	r0, r6
 8006dd0:	4639      	mov	r1, r7
 8006dd2:	f7f9 fc21 	bl	8000618 <__aeabi_dmul>
 8006dd6:	e76a      	b.n	8006cae <__ieee754_pow+0x3e>
 8006dd8:	4b3e      	ldr	r3, [pc, #248]	; (8006ed4 <__ieee754_pow+0x264>)
 8006dda:	4599      	cmp	r9, r3
 8006ddc:	d10c      	bne.n	8006df8 <__ieee754_pow+0x188>
 8006dde:	2d00      	cmp	r5, #0
 8006de0:	db0a      	blt.n	8006df8 <__ieee754_pow+0x188>
 8006de2:	ec47 6b10 	vmov	d0, r6, r7
 8006de6:	b009      	add	sp, #36	; 0x24
 8006de8:	ecbd 8b06 	vpop	{d8-d10}
 8006dec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df0:	f000 bc6c 	b.w	80076cc <__ieee754_sqrt>
 8006df4:	2300      	movs	r3, #0
 8006df6:	9304      	str	r3, [sp, #16]
 8006df8:	ec47 6b10 	vmov	d0, r6, r7
 8006dfc:	f000 fd48 	bl	8007890 <fabs>
 8006e00:	ec51 0b10 	vmov	r0, r1, d0
 8006e04:	f1ba 0f00 	cmp.w	sl, #0
 8006e08:	d129      	bne.n	8006e5e <__ieee754_pow+0x1ee>
 8006e0a:	b124      	cbz	r4, 8006e16 <__ieee754_pow+0x1a6>
 8006e0c:	4b2f      	ldr	r3, [pc, #188]	; (8006ecc <__ieee754_pow+0x25c>)
 8006e0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d123      	bne.n	8006e5e <__ieee754_pow+0x1ee>
 8006e16:	f1b9 0f00 	cmp.w	r9, #0
 8006e1a:	da05      	bge.n	8006e28 <__ieee754_pow+0x1b8>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	2000      	movs	r0, #0
 8006e22:	492a      	ldr	r1, [pc, #168]	; (8006ecc <__ieee754_pow+0x25c>)
 8006e24:	f7f9 fd22 	bl	800086c <__aeabi_ddiv>
 8006e28:	2d00      	cmp	r5, #0
 8006e2a:	f6bf af40 	bge.w	8006cae <__ieee754_pow+0x3e>
 8006e2e:	9b04      	ldr	r3, [sp, #16]
 8006e30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006e34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e38:	4323      	orrs	r3, r4
 8006e3a:	d108      	bne.n	8006e4e <__ieee754_pow+0x1de>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4610      	mov	r0, r2
 8006e42:	4619      	mov	r1, r3
 8006e44:	f7f9 fa30 	bl	80002a8 <__aeabi_dsub>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	e78f      	b.n	8006d6e <__ieee754_pow+0xfe>
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	f47f af2c 	bne.w	8006cae <__ieee754_pow+0x3e>
 8006e56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	e727      	b.n	8006cae <__ieee754_pow+0x3e>
 8006e5e:	0feb      	lsrs	r3, r5, #31
 8006e60:	3b01      	subs	r3, #1
 8006e62:	9306      	str	r3, [sp, #24]
 8006e64:	9a06      	ldr	r2, [sp, #24]
 8006e66:	9b04      	ldr	r3, [sp, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	d102      	bne.n	8006e72 <__ieee754_pow+0x202>
 8006e6c:	4632      	mov	r2, r6
 8006e6e:	463b      	mov	r3, r7
 8006e70:	e7e6      	b.n	8006e40 <__ieee754_pow+0x1d0>
 8006e72:	4b19      	ldr	r3, [pc, #100]	; (8006ed8 <__ieee754_pow+0x268>)
 8006e74:	4598      	cmp	r8, r3
 8006e76:	f340 80fb 	ble.w	8007070 <__ieee754_pow+0x400>
 8006e7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006e7e:	4598      	cmp	r8, r3
 8006e80:	4b13      	ldr	r3, [pc, #76]	; (8006ed0 <__ieee754_pow+0x260>)
 8006e82:	dd0c      	ble.n	8006e9e <__ieee754_pow+0x22e>
 8006e84:	429c      	cmp	r4, r3
 8006e86:	dc0f      	bgt.n	8006ea8 <__ieee754_pow+0x238>
 8006e88:	f1b9 0f00 	cmp.w	r9, #0
 8006e8c:	da0f      	bge.n	8006eae <__ieee754_pow+0x23e>
 8006e8e:	2000      	movs	r0, #0
 8006e90:	b009      	add	sp, #36	; 0x24
 8006e92:	ecbd 8b06 	vpop	{d8-d10}
 8006e96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9a:	f000 bcf0 	b.w	800787e <__math_oflow>
 8006e9e:	429c      	cmp	r4, r3
 8006ea0:	dbf2      	blt.n	8006e88 <__ieee754_pow+0x218>
 8006ea2:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <__ieee754_pow+0x25c>)
 8006ea4:	429c      	cmp	r4, r3
 8006ea6:	dd19      	ble.n	8006edc <__ieee754_pow+0x26c>
 8006ea8:	f1b9 0f00 	cmp.w	r9, #0
 8006eac:	dcef      	bgt.n	8006e8e <__ieee754_pow+0x21e>
 8006eae:	2000      	movs	r0, #0
 8006eb0:	b009      	add	sp, #36	; 0x24
 8006eb2:	ecbd 8b06 	vpop	{d8-d10}
 8006eb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eba:	f000 bcd7 	b.w	800786c <__math_uflow>
 8006ebe:	bf00      	nop
 8006ec0:	fff00000 	.word	0xfff00000
 8006ec4:	7ff00000 	.word	0x7ff00000
 8006ec8:	433fffff 	.word	0x433fffff
 8006ecc:	3ff00000 	.word	0x3ff00000
 8006ed0:	3fefffff 	.word	0x3fefffff
 8006ed4:	3fe00000 	.word	0x3fe00000
 8006ed8:	41e00000 	.word	0x41e00000
 8006edc:	4b60      	ldr	r3, [pc, #384]	; (8007060 <__ieee754_pow+0x3f0>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f7f9 f9e2 	bl	80002a8 <__aeabi_dsub>
 8006ee4:	a354      	add	r3, pc, #336	; (adr r3, 8007038 <__ieee754_pow+0x3c8>)
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	4604      	mov	r4, r0
 8006eec:	460d      	mov	r5, r1
 8006eee:	f7f9 fb93 	bl	8000618 <__aeabi_dmul>
 8006ef2:	a353      	add	r3, pc, #332	; (adr r3, 8007040 <__ieee754_pow+0x3d0>)
 8006ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef8:	4606      	mov	r6, r0
 8006efa:	460f      	mov	r7, r1
 8006efc:	4620      	mov	r0, r4
 8006efe:	4629      	mov	r1, r5
 8006f00:	f7f9 fb8a 	bl	8000618 <__aeabi_dmul>
 8006f04:	4b57      	ldr	r3, [pc, #348]	; (8007064 <__ieee754_pow+0x3f4>)
 8006f06:	4682      	mov	sl, r0
 8006f08:	468b      	mov	fp, r1
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	4629      	mov	r1, r5
 8006f10:	f7f9 fb82 	bl	8000618 <__aeabi_dmul>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	a14b      	add	r1, pc, #300	; (adr r1, 8007048 <__ieee754_pow+0x3d8>)
 8006f1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f1e:	f7f9 f9c3 	bl	80002a8 <__aeabi_dsub>
 8006f22:	4622      	mov	r2, r4
 8006f24:	462b      	mov	r3, r5
 8006f26:	f7f9 fb77 	bl	8000618 <__aeabi_dmul>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	2000      	movs	r0, #0
 8006f30:	494d      	ldr	r1, [pc, #308]	; (8007068 <__ieee754_pow+0x3f8>)
 8006f32:	f7f9 f9b9 	bl	80002a8 <__aeabi_dsub>
 8006f36:	4622      	mov	r2, r4
 8006f38:	4680      	mov	r8, r0
 8006f3a:	4689      	mov	r9, r1
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	4620      	mov	r0, r4
 8006f40:	4629      	mov	r1, r5
 8006f42:	f7f9 fb69 	bl	8000618 <__aeabi_dmul>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	f7f9 fb63 	bl	8000618 <__aeabi_dmul>
 8006f52:	a33f      	add	r3, pc, #252	; (adr r3, 8007050 <__ieee754_pow+0x3e0>)
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	f7f9 fb5e 	bl	8000618 <__aeabi_dmul>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4650      	mov	r0, sl
 8006f62:	4659      	mov	r1, fp
 8006f64:	f7f9 f9a0 	bl	80002a8 <__aeabi_dsub>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4680      	mov	r8, r0
 8006f6e:	4689      	mov	r9, r1
 8006f70:	4630      	mov	r0, r6
 8006f72:	4639      	mov	r1, r7
 8006f74:	f7f9 f99a 	bl	80002ac <__adddf3>
 8006f78:	2000      	movs	r0, #0
 8006f7a:	4632      	mov	r2, r6
 8006f7c:	463b      	mov	r3, r7
 8006f7e:	4604      	mov	r4, r0
 8006f80:	460d      	mov	r5, r1
 8006f82:	f7f9 f991 	bl	80002a8 <__aeabi_dsub>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	f7f9 f98b 	bl	80002a8 <__aeabi_dsub>
 8006f92:	9b04      	ldr	r3, [sp, #16]
 8006f94:	9a06      	ldr	r2, [sp, #24]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	4682      	mov	sl, r0
 8006f9c:	468b      	mov	fp, r1
 8006f9e:	f040 81e7 	bne.w	8007370 <__ieee754_pow+0x700>
 8006fa2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007058 <__ieee754_pow+0x3e8>
 8006fa6:	eeb0 8a47 	vmov.f32	s16, s14
 8006faa:	eef0 8a67 	vmov.f32	s17, s15
 8006fae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006fb2:	2600      	movs	r6, #0
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fbc:	f7f9 f974 	bl	80002a8 <__aeabi_dsub>
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	462b      	mov	r3, r5
 8006fc4:	f7f9 fb28 	bl	8000618 <__aeabi_dmul>
 8006fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fcc:	4680      	mov	r8, r0
 8006fce:	4689      	mov	r9, r1
 8006fd0:	4650      	mov	r0, sl
 8006fd2:	4659      	mov	r1, fp
 8006fd4:	f7f9 fb20 	bl	8000618 <__aeabi_dmul>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4640      	mov	r0, r8
 8006fde:	4649      	mov	r1, r9
 8006fe0:	f7f9 f964 	bl	80002ac <__adddf3>
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	463b      	mov	r3, r7
 8006fe8:	4680      	mov	r8, r0
 8006fea:	4689      	mov	r9, r1
 8006fec:	4620      	mov	r0, r4
 8006fee:	4629      	mov	r1, r5
 8006ff0:	f7f9 fb12 	bl	8000618 <__aeabi_dmul>
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	460d      	mov	r5, r1
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	4640      	mov	r0, r8
 8007000:	f7f9 f954 	bl	80002ac <__adddf3>
 8007004:	4b19      	ldr	r3, [pc, #100]	; (800706c <__ieee754_pow+0x3fc>)
 8007006:	4299      	cmp	r1, r3
 8007008:	ec45 4b19 	vmov	d9, r4, r5
 800700c:	4606      	mov	r6, r0
 800700e:	460f      	mov	r7, r1
 8007010:	468b      	mov	fp, r1
 8007012:	f340 82f1 	ble.w	80075f8 <__ieee754_pow+0x988>
 8007016:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800701a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800701e:	4303      	orrs	r3, r0
 8007020:	f000 81e4 	beq.w	80073ec <__ieee754_pow+0x77c>
 8007024:	ec51 0b18 	vmov	r0, r1, d8
 8007028:	2200      	movs	r2, #0
 800702a:	2300      	movs	r3, #0
 800702c:	f7f9 fd66 	bl	8000afc <__aeabi_dcmplt>
 8007030:	3800      	subs	r0, #0
 8007032:	bf18      	it	ne
 8007034:	2001      	movne	r0, #1
 8007036:	e72b      	b.n	8006e90 <__ieee754_pow+0x220>
 8007038:	60000000 	.word	0x60000000
 800703c:	3ff71547 	.word	0x3ff71547
 8007040:	f85ddf44 	.word	0xf85ddf44
 8007044:	3e54ae0b 	.word	0x3e54ae0b
 8007048:	55555555 	.word	0x55555555
 800704c:	3fd55555 	.word	0x3fd55555
 8007050:	652b82fe 	.word	0x652b82fe
 8007054:	3ff71547 	.word	0x3ff71547
 8007058:	00000000 	.word	0x00000000
 800705c:	bff00000 	.word	0xbff00000
 8007060:	3ff00000 	.word	0x3ff00000
 8007064:	3fd00000 	.word	0x3fd00000
 8007068:	3fe00000 	.word	0x3fe00000
 800706c:	408fffff 	.word	0x408fffff
 8007070:	4bd5      	ldr	r3, [pc, #852]	; (80073c8 <__ieee754_pow+0x758>)
 8007072:	402b      	ands	r3, r5
 8007074:	2200      	movs	r2, #0
 8007076:	b92b      	cbnz	r3, 8007084 <__ieee754_pow+0x414>
 8007078:	4bd4      	ldr	r3, [pc, #848]	; (80073cc <__ieee754_pow+0x75c>)
 800707a:	f7f9 facd 	bl	8000618 <__aeabi_dmul>
 800707e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007082:	460c      	mov	r4, r1
 8007084:	1523      	asrs	r3, r4, #20
 8007086:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800708a:	4413      	add	r3, r2
 800708c:	9305      	str	r3, [sp, #20]
 800708e:	4bd0      	ldr	r3, [pc, #832]	; (80073d0 <__ieee754_pow+0x760>)
 8007090:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007094:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007098:	429c      	cmp	r4, r3
 800709a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800709e:	dd08      	ble.n	80070b2 <__ieee754_pow+0x442>
 80070a0:	4bcc      	ldr	r3, [pc, #816]	; (80073d4 <__ieee754_pow+0x764>)
 80070a2:	429c      	cmp	r4, r3
 80070a4:	f340 8162 	ble.w	800736c <__ieee754_pow+0x6fc>
 80070a8:	9b05      	ldr	r3, [sp, #20]
 80070aa:	3301      	adds	r3, #1
 80070ac:	9305      	str	r3, [sp, #20]
 80070ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80070b2:	2400      	movs	r4, #0
 80070b4:	00e3      	lsls	r3, r4, #3
 80070b6:	9307      	str	r3, [sp, #28]
 80070b8:	4bc7      	ldr	r3, [pc, #796]	; (80073d8 <__ieee754_pow+0x768>)
 80070ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070be:	ed93 7b00 	vldr	d7, [r3]
 80070c2:	4629      	mov	r1, r5
 80070c4:	ec53 2b17 	vmov	r2, r3, d7
 80070c8:	eeb0 9a47 	vmov.f32	s18, s14
 80070cc:	eef0 9a67 	vmov.f32	s19, s15
 80070d0:	4682      	mov	sl, r0
 80070d2:	f7f9 f8e9 	bl	80002a8 <__aeabi_dsub>
 80070d6:	4652      	mov	r2, sl
 80070d8:	4606      	mov	r6, r0
 80070da:	460f      	mov	r7, r1
 80070dc:	462b      	mov	r3, r5
 80070de:	ec51 0b19 	vmov	r0, r1, d9
 80070e2:	f7f9 f8e3 	bl	80002ac <__adddf3>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	2000      	movs	r0, #0
 80070ec:	49bb      	ldr	r1, [pc, #748]	; (80073dc <__ieee754_pow+0x76c>)
 80070ee:	f7f9 fbbd 	bl	800086c <__aeabi_ddiv>
 80070f2:	ec41 0b1a 	vmov	d10, r0, r1
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4630      	mov	r0, r6
 80070fc:	4639      	mov	r1, r7
 80070fe:	f7f9 fa8b 	bl	8000618 <__aeabi_dmul>
 8007102:	2300      	movs	r3, #0
 8007104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007108:	9302      	str	r3, [sp, #8]
 800710a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800710e:	46ab      	mov	fp, r5
 8007110:	106d      	asrs	r5, r5, #1
 8007112:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007116:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800711a:	ec41 0b18 	vmov	d8, r0, r1
 800711e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007122:	2200      	movs	r2, #0
 8007124:	4640      	mov	r0, r8
 8007126:	4649      	mov	r1, r9
 8007128:	4614      	mov	r4, r2
 800712a:	461d      	mov	r5, r3
 800712c:	f7f9 fa74 	bl	8000618 <__aeabi_dmul>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4630      	mov	r0, r6
 8007136:	4639      	mov	r1, r7
 8007138:	f7f9 f8b6 	bl	80002a8 <__aeabi_dsub>
 800713c:	ec53 2b19 	vmov	r2, r3, d9
 8007140:	4606      	mov	r6, r0
 8007142:	460f      	mov	r7, r1
 8007144:	4620      	mov	r0, r4
 8007146:	4629      	mov	r1, r5
 8007148:	f7f9 f8ae 	bl	80002a8 <__aeabi_dsub>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4650      	mov	r0, sl
 8007152:	4659      	mov	r1, fp
 8007154:	f7f9 f8a8 	bl	80002a8 <__aeabi_dsub>
 8007158:	4642      	mov	r2, r8
 800715a:	464b      	mov	r3, r9
 800715c:	f7f9 fa5c 	bl	8000618 <__aeabi_dmul>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 f89e 	bl	80002a8 <__aeabi_dsub>
 800716c:	ec53 2b1a 	vmov	r2, r3, d10
 8007170:	f7f9 fa52 	bl	8000618 <__aeabi_dmul>
 8007174:	ec53 2b18 	vmov	r2, r3, d8
 8007178:	ec41 0b19 	vmov	d9, r0, r1
 800717c:	ec51 0b18 	vmov	r0, r1, d8
 8007180:	f7f9 fa4a 	bl	8000618 <__aeabi_dmul>
 8007184:	a37c      	add	r3, pc, #496	; (adr r3, 8007378 <__ieee754_pow+0x708>)
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	4604      	mov	r4, r0
 800718c:	460d      	mov	r5, r1
 800718e:	f7f9 fa43 	bl	8000618 <__aeabi_dmul>
 8007192:	a37b      	add	r3, pc, #492	; (adr r3, 8007380 <__ieee754_pow+0x710>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	f7f9 f888 	bl	80002ac <__adddf3>
 800719c:	4622      	mov	r2, r4
 800719e:	462b      	mov	r3, r5
 80071a0:	f7f9 fa3a 	bl	8000618 <__aeabi_dmul>
 80071a4:	a378      	add	r3, pc, #480	; (adr r3, 8007388 <__ieee754_pow+0x718>)
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f7f9 f87f 	bl	80002ac <__adddf3>
 80071ae:	4622      	mov	r2, r4
 80071b0:	462b      	mov	r3, r5
 80071b2:	f7f9 fa31 	bl	8000618 <__aeabi_dmul>
 80071b6:	a376      	add	r3, pc, #472	; (adr r3, 8007390 <__ieee754_pow+0x720>)
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	f7f9 f876 	bl	80002ac <__adddf3>
 80071c0:	4622      	mov	r2, r4
 80071c2:	462b      	mov	r3, r5
 80071c4:	f7f9 fa28 	bl	8000618 <__aeabi_dmul>
 80071c8:	a373      	add	r3, pc, #460	; (adr r3, 8007398 <__ieee754_pow+0x728>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f9 f86d 	bl	80002ac <__adddf3>
 80071d2:	4622      	mov	r2, r4
 80071d4:	462b      	mov	r3, r5
 80071d6:	f7f9 fa1f 	bl	8000618 <__aeabi_dmul>
 80071da:	a371      	add	r3, pc, #452	; (adr r3, 80073a0 <__ieee754_pow+0x730>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f7f9 f864 	bl	80002ac <__adddf3>
 80071e4:	4622      	mov	r2, r4
 80071e6:	4606      	mov	r6, r0
 80071e8:	460f      	mov	r7, r1
 80071ea:	462b      	mov	r3, r5
 80071ec:	4620      	mov	r0, r4
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7f9 fa12 	bl	8000618 <__aeabi_dmul>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4630      	mov	r0, r6
 80071fa:	4639      	mov	r1, r7
 80071fc:	f7f9 fa0c 	bl	8000618 <__aeabi_dmul>
 8007200:	4642      	mov	r2, r8
 8007202:	4604      	mov	r4, r0
 8007204:	460d      	mov	r5, r1
 8007206:	464b      	mov	r3, r9
 8007208:	ec51 0b18 	vmov	r0, r1, d8
 800720c:	f7f9 f84e 	bl	80002ac <__adddf3>
 8007210:	ec53 2b19 	vmov	r2, r3, d9
 8007214:	f7f9 fa00 	bl	8000618 <__aeabi_dmul>
 8007218:	4622      	mov	r2, r4
 800721a:	462b      	mov	r3, r5
 800721c:	f7f9 f846 	bl	80002ac <__adddf3>
 8007220:	4642      	mov	r2, r8
 8007222:	4682      	mov	sl, r0
 8007224:	468b      	mov	fp, r1
 8007226:	464b      	mov	r3, r9
 8007228:	4640      	mov	r0, r8
 800722a:	4649      	mov	r1, r9
 800722c:	f7f9 f9f4 	bl	8000618 <__aeabi_dmul>
 8007230:	4b6b      	ldr	r3, [pc, #428]	; (80073e0 <__ieee754_pow+0x770>)
 8007232:	2200      	movs	r2, #0
 8007234:	4606      	mov	r6, r0
 8007236:	460f      	mov	r7, r1
 8007238:	f7f9 f838 	bl	80002ac <__adddf3>
 800723c:	4652      	mov	r2, sl
 800723e:	465b      	mov	r3, fp
 8007240:	f7f9 f834 	bl	80002ac <__adddf3>
 8007244:	2000      	movs	r0, #0
 8007246:	4604      	mov	r4, r0
 8007248:	460d      	mov	r5, r1
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4640      	mov	r0, r8
 8007250:	4649      	mov	r1, r9
 8007252:	f7f9 f9e1 	bl	8000618 <__aeabi_dmul>
 8007256:	4b62      	ldr	r3, [pc, #392]	; (80073e0 <__ieee754_pow+0x770>)
 8007258:	4680      	mov	r8, r0
 800725a:	4689      	mov	r9, r1
 800725c:	2200      	movs	r2, #0
 800725e:	4620      	mov	r0, r4
 8007260:	4629      	mov	r1, r5
 8007262:	f7f9 f821 	bl	80002a8 <__aeabi_dsub>
 8007266:	4632      	mov	r2, r6
 8007268:	463b      	mov	r3, r7
 800726a:	f7f9 f81d 	bl	80002a8 <__aeabi_dsub>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4650      	mov	r0, sl
 8007274:	4659      	mov	r1, fp
 8007276:	f7f9 f817 	bl	80002a8 <__aeabi_dsub>
 800727a:	ec53 2b18 	vmov	r2, r3, d8
 800727e:	f7f9 f9cb 	bl	8000618 <__aeabi_dmul>
 8007282:	4622      	mov	r2, r4
 8007284:	4606      	mov	r6, r0
 8007286:	460f      	mov	r7, r1
 8007288:	462b      	mov	r3, r5
 800728a:	ec51 0b19 	vmov	r0, r1, d9
 800728e:	f7f9 f9c3 	bl	8000618 <__aeabi_dmul>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4630      	mov	r0, r6
 8007298:	4639      	mov	r1, r7
 800729a:	f7f9 f807 	bl	80002ac <__adddf3>
 800729e:	4606      	mov	r6, r0
 80072a0:	460f      	mov	r7, r1
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4640      	mov	r0, r8
 80072a8:	4649      	mov	r1, r9
 80072aa:	f7f8 ffff 	bl	80002ac <__adddf3>
 80072ae:	a33e      	add	r3, pc, #248	; (adr r3, 80073a8 <__ieee754_pow+0x738>)
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	2000      	movs	r0, #0
 80072b6:	4604      	mov	r4, r0
 80072b8:	460d      	mov	r5, r1
 80072ba:	f7f9 f9ad 	bl	8000618 <__aeabi_dmul>
 80072be:	4642      	mov	r2, r8
 80072c0:	ec41 0b18 	vmov	d8, r0, r1
 80072c4:	464b      	mov	r3, r9
 80072c6:	4620      	mov	r0, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	f7f8 ffed 	bl	80002a8 <__aeabi_dsub>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4630      	mov	r0, r6
 80072d4:	4639      	mov	r1, r7
 80072d6:	f7f8 ffe7 	bl	80002a8 <__aeabi_dsub>
 80072da:	a335      	add	r3, pc, #212	; (adr r3, 80073b0 <__ieee754_pow+0x740>)
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	f7f9 f99a 	bl	8000618 <__aeabi_dmul>
 80072e4:	a334      	add	r3, pc, #208	; (adr r3, 80073b8 <__ieee754_pow+0x748>)
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	4606      	mov	r6, r0
 80072ec:	460f      	mov	r7, r1
 80072ee:	4620      	mov	r0, r4
 80072f0:	4629      	mov	r1, r5
 80072f2:	f7f9 f991 	bl	8000618 <__aeabi_dmul>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4630      	mov	r0, r6
 80072fc:	4639      	mov	r1, r7
 80072fe:	f7f8 ffd5 	bl	80002ac <__adddf3>
 8007302:	9a07      	ldr	r2, [sp, #28]
 8007304:	4b37      	ldr	r3, [pc, #220]	; (80073e4 <__ieee754_pow+0x774>)
 8007306:	4413      	add	r3, r2
 8007308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730c:	f7f8 ffce 	bl	80002ac <__adddf3>
 8007310:	4682      	mov	sl, r0
 8007312:	9805      	ldr	r0, [sp, #20]
 8007314:	468b      	mov	fp, r1
 8007316:	f7f9 f915 	bl	8000544 <__aeabi_i2d>
 800731a:	9a07      	ldr	r2, [sp, #28]
 800731c:	4b32      	ldr	r3, [pc, #200]	; (80073e8 <__ieee754_pow+0x778>)
 800731e:	4413      	add	r3, r2
 8007320:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007324:	4606      	mov	r6, r0
 8007326:	460f      	mov	r7, r1
 8007328:	4652      	mov	r2, sl
 800732a:	465b      	mov	r3, fp
 800732c:	ec51 0b18 	vmov	r0, r1, d8
 8007330:	f7f8 ffbc 	bl	80002ac <__adddf3>
 8007334:	4642      	mov	r2, r8
 8007336:	464b      	mov	r3, r9
 8007338:	f7f8 ffb8 	bl	80002ac <__adddf3>
 800733c:	4632      	mov	r2, r6
 800733e:	463b      	mov	r3, r7
 8007340:	f7f8 ffb4 	bl	80002ac <__adddf3>
 8007344:	2000      	movs	r0, #0
 8007346:	4632      	mov	r2, r6
 8007348:	463b      	mov	r3, r7
 800734a:	4604      	mov	r4, r0
 800734c:	460d      	mov	r5, r1
 800734e:	f7f8 ffab 	bl	80002a8 <__aeabi_dsub>
 8007352:	4642      	mov	r2, r8
 8007354:	464b      	mov	r3, r9
 8007356:	f7f8 ffa7 	bl	80002a8 <__aeabi_dsub>
 800735a:	ec53 2b18 	vmov	r2, r3, d8
 800735e:	f7f8 ffa3 	bl	80002a8 <__aeabi_dsub>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4650      	mov	r0, sl
 8007368:	4659      	mov	r1, fp
 800736a:	e610      	b.n	8006f8e <__ieee754_pow+0x31e>
 800736c:	2401      	movs	r4, #1
 800736e:	e6a1      	b.n	80070b4 <__ieee754_pow+0x444>
 8007370:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80073c0 <__ieee754_pow+0x750>
 8007374:	e617      	b.n	8006fa6 <__ieee754_pow+0x336>
 8007376:	bf00      	nop
 8007378:	4a454eef 	.word	0x4a454eef
 800737c:	3fca7e28 	.word	0x3fca7e28
 8007380:	93c9db65 	.word	0x93c9db65
 8007384:	3fcd864a 	.word	0x3fcd864a
 8007388:	a91d4101 	.word	0xa91d4101
 800738c:	3fd17460 	.word	0x3fd17460
 8007390:	518f264d 	.word	0x518f264d
 8007394:	3fd55555 	.word	0x3fd55555
 8007398:	db6fabff 	.word	0xdb6fabff
 800739c:	3fdb6db6 	.word	0x3fdb6db6
 80073a0:	33333303 	.word	0x33333303
 80073a4:	3fe33333 	.word	0x3fe33333
 80073a8:	e0000000 	.word	0xe0000000
 80073ac:	3feec709 	.word	0x3feec709
 80073b0:	dc3a03fd 	.word	0xdc3a03fd
 80073b4:	3feec709 	.word	0x3feec709
 80073b8:	145b01f5 	.word	0x145b01f5
 80073bc:	be3e2fe0 	.word	0xbe3e2fe0
 80073c0:	00000000 	.word	0x00000000
 80073c4:	3ff00000 	.word	0x3ff00000
 80073c8:	7ff00000 	.word	0x7ff00000
 80073cc:	43400000 	.word	0x43400000
 80073d0:	0003988e 	.word	0x0003988e
 80073d4:	000bb679 	.word	0x000bb679
 80073d8:	08007d40 	.word	0x08007d40
 80073dc:	3ff00000 	.word	0x3ff00000
 80073e0:	40080000 	.word	0x40080000
 80073e4:	08007d60 	.word	0x08007d60
 80073e8:	08007d50 	.word	0x08007d50
 80073ec:	a3b5      	add	r3, pc, #724	; (adr r3, 80076c4 <__ieee754_pow+0xa54>)
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	4640      	mov	r0, r8
 80073f4:	4649      	mov	r1, r9
 80073f6:	f7f8 ff59 	bl	80002ac <__adddf3>
 80073fa:	4622      	mov	r2, r4
 80073fc:	ec41 0b1a 	vmov	d10, r0, r1
 8007400:	462b      	mov	r3, r5
 8007402:	4630      	mov	r0, r6
 8007404:	4639      	mov	r1, r7
 8007406:	f7f8 ff4f 	bl	80002a8 <__aeabi_dsub>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	ec51 0b1a 	vmov	r0, r1, d10
 8007412:	f7f9 fb91 	bl	8000b38 <__aeabi_dcmpgt>
 8007416:	2800      	cmp	r0, #0
 8007418:	f47f ae04 	bne.w	8007024 <__ieee754_pow+0x3b4>
 800741c:	4aa4      	ldr	r2, [pc, #656]	; (80076b0 <__ieee754_pow+0xa40>)
 800741e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007422:	4293      	cmp	r3, r2
 8007424:	f340 8108 	ble.w	8007638 <__ieee754_pow+0x9c8>
 8007428:	151b      	asrs	r3, r3, #20
 800742a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800742e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007432:	fa4a f303 	asr.w	r3, sl, r3
 8007436:	445b      	add	r3, fp
 8007438:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800743c:	4e9d      	ldr	r6, [pc, #628]	; (80076b4 <__ieee754_pow+0xa44>)
 800743e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007442:	4116      	asrs	r6, r2
 8007444:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007448:	2000      	movs	r0, #0
 800744a:	ea23 0106 	bic.w	r1, r3, r6
 800744e:	f1c2 0214 	rsb	r2, r2, #20
 8007452:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007456:	fa4a fa02 	asr.w	sl, sl, r2
 800745a:	f1bb 0f00 	cmp.w	fp, #0
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4620      	mov	r0, r4
 8007464:	4629      	mov	r1, r5
 8007466:	bfb8      	it	lt
 8007468:	f1ca 0a00 	rsblt	sl, sl, #0
 800746c:	f7f8 ff1c 	bl	80002a8 <__aeabi_dsub>
 8007470:	ec41 0b19 	vmov	d9, r0, r1
 8007474:	4642      	mov	r2, r8
 8007476:	464b      	mov	r3, r9
 8007478:	ec51 0b19 	vmov	r0, r1, d9
 800747c:	f7f8 ff16 	bl	80002ac <__adddf3>
 8007480:	a37b      	add	r3, pc, #492	; (adr r3, 8007670 <__ieee754_pow+0xa00>)
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	2000      	movs	r0, #0
 8007488:	4604      	mov	r4, r0
 800748a:	460d      	mov	r5, r1
 800748c:	f7f9 f8c4 	bl	8000618 <__aeabi_dmul>
 8007490:	ec53 2b19 	vmov	r2, r3, d9
 8007494:	4606      	mov	r6, r0
 8007496:	460f      	mov	r7, r1
 8007498:	4620      	mov	r0, r4
 800749a:	4629      	mov	r1, r5
 800749c:	f7f8 ff04 	bl	80002a8 <__aeabi_dsub>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4640      	mov	r0, r8
 80074a6:	4649      	mov	r1, r9
 80074a8:	f7f8 fefe 	bl	80002a8 <__aeabi_dsub>
 80074ac:	a372      	add	r3, pc, #456	; (adr r3, 8007678 <__ieee754_pow+0xa08>)
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	f7f9 f8b1 	bl	8000618 <__aeabi_dmul>
 80074b6:	a372      	add	r3, pc, #456	; (adr r3, 8007680 <__ieee754_pow+0xa10>)
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	4680      	mov	r8, r0
 80074be:	4689      	mov	r9, r1
 80074c0:	4620      	mov	r0, r4
 80074c2:	4629      	mov	r1, r5
 80074c4:	f7f9 f8a8 	bl	8000618 <__aeabi_dmul>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4640      	mov	r0, r8
 80074ce:	4649      	mov	r1, r9
 80074d0:	f7f8 feec 	bl	80002ac <__adddf3>
 80074d4:	4604      	mov	r4, r0
 80074d6:	460d      	mov	r5, r1
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4630      	mov	r0, r6
 80074de:	4639      	mov	r1, r7
 80074e0:	f7f8 fee4 	bl	80002ac <__adddf3>
 80074e4:	4632      	mov	r2, r6
 80074e6:	463b      	mov	r3, r7
 80074e8:	4680      	mov	r8, r0
 80074ea:	4689      	mov	r9, r1
 80074ec:	f7f8 fedc 	bl	80002a8 <__aeabi_dsub>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4620      	mov	r0, r4
 80074f6:	4629      	mov	r1, r5
 80074f8:	f7f8 fed6 	bl	80002a8 <__aeabi_dsub>
 80074fc:	4642      	mov	r2, r8
 80074fe:	4606      	mov	r6, r0
 8007500:	460f      	mov	r7, r1
 8007502:	464b      	mov	r3, r9
 8007504:	4640      	mov	r0, r8
 8007506:	4649      	mov	r1, r9
 8007508:	f7f9 f886 	bl	8000618 <__aeabi_dmul>
 800750c:	a35e      	add	r3, pc, #376	; (adr r3, 8007688 <__ieee754_pow+0xa18>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	4604      	mov	r4, r0
 8007514:	460d      	mov	r5, r1
 8007516:	f7f9 f87f 	bl	8000618 <__aeabi_dmul>
 800751a:	a35d      	add	r3, pc, #372	; (adr r3, 8007690 <__ieee754_pow+0xa20>)
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f7f8 fec2 	bl	80002a8 <__aeabi_dsub>
 8007524:	4622      	mov	r2, r4
 8007526:	462b      	mov	r3, r5
 8007528:	f7f9 f876 	bl	8000618 <__aeabi_dmul>
 800752c:	a35a      	add	r3, pc, #360	; (adr r3, 8007698 <__ieee754_pow+0xa28>)
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	f7f8 febb 	bl	80002ac <__adddf3>
 8007536:	4622      	mov	r2, r4
 8007538:	462b      	mov	r3, r5
 800753a:	f7f9 f86d 	bl	8000618 <__aeabi_dmul>
 800753e:	a358      	add	r3, pc, #352	; (adr r3, 80076a0 <__ieee754_pow+0xa30>)
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	f7f8 feb0 	bl	80002a8 <__aeabi_dsub>
 8007548:	4622      	mov	r2, r4
 800754a:	462b      	mov	r3, r5
 800754c:	f7f9 f864 	bl	8000618 <__aeabi_dmul>
 8007550:	a355      	add	r3, pc, #340	; (adr r3, 80076a8 <__ieee754_pow+0xa38>)
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	f7f8 fea9 	bl	80002ac <__adddf3>
 800755a:	4622      	mov	r2, r4
 800755c:	462b      	mov	r3, r5
 800755e:	f7f9 f85b 	bl	8000618 <__aeabi_dmul>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4640      	mov	r0, r8
 8007568:	4649      	mov	r1, r9
 800756a:	f7f8 fe9d 	bl	80002a8 <__aeabi_dsub>
 800756e:	4604      	mov	r4, r0
 8007570:	460d      	mov	r5, r1
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4640      	mov	r0, r8
 8007578:	4649      	mov	r1, r9
 800757a:	f7f9 f84d 	bl	8000618 <__aeabi_dmul>
 800757e:	2200      	movs	r2, #0
 8007580:	ec41 0b19 	vmov	d9, r0, r1
 8007584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007588:	4620      	mov	r0, r4
 800758a:	4629      	mov	r1, r5
 800758c:	f7f8 fe8c 	bl	80002a8 <__aeabi_dsub>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	ec51 0b19 	vmov	r0, r1, d9
 8007598:	f7f9 f968 	bl	800086c <__aeabi_ddiv>
 800759c:	4632      	mov	r2, r6
 800759e:	4604      	mov	r4, r0
 80075a0:	460d      	mov	r5, r1
 80075a2:	463b      	mov	r3, r7
 80075a4:	4640      	mov	r0, r8
 80075a6:	4649      	mov	r1, r9
 80075a8:	f7f9 f836 	bl	8000618 <__aeabi_dmul>
 80075ac:	4632      	mov	r2, r6
 80075ae:	463b      	mov	r3, r7
 80075b0:	f7f8 fe7c 	bl	80002ac <__adddf3>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4620      	mov	r0, r4
 80075ba:	4629      	mov	r1, r5
 80075bc:	f7f8 fe74 	bl	80002a8 <__aeabi_dsub>
 80075c0:	4642      	mov	r2, r8
 80075c2:	464b      	mov	r3, r9
 80075c4:	f7f8 fe70 	bl	80002a8 <__aeabi_dsub>
 80075c8:	460b      	mov	r3, r1
 80075ca:	4602      	mov	r2, r0
 80075cc:	493a      	ldr	r1, [pc, #232]	; (80076b8 <__ieee754_pow+0xa48>)
 80075ce:	2000      	movs	r0, #0
 80075d0:	f7f8 fe6a 	bl	80002a8 <__aeabi_dsub>
 80075d4:	ec41 0b10 	vmov	d0, r0, r1
 80075d8:	ee10 3a90 	vmov	r3, s1
 80075dc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80075e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075e4:	da2b      	bge.n	800763e <__ieee754_pow+0x9ce>
 80075e6:	4650      	mov	r0, sl
 80075e8:	f000 f966 	bl	80078b8 <scalbn>
 80075ec:	ec51 0b10 	vmov	r0, r1, d0
 80075f0:	ec53 2b18 	vmov	r2, r3, d8
 80075f4:	f7ff bbed 	b.w	8006dd2 <__ieee754_pow+0x162>
 80075f8:	4b30      	ldr	r3, [pc, #192]	; (80076bc <__ieee754_pow+0xa4c>)
 80075fa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80075fe:	429e      	cmp	r6, r3
 8007600:	f77f af0c 	ble.w	800741c <__ieee754_pow+0x7ac>
 8007604:	4b2e      	ldr	r3, [pc, #184]	; (80076c0 <__ieee754_pow+0xa50>)
 8007606:	440b      	add	r3, r1
 8007608:	4303      	orrs	r3, r0
 800760a:	d009      	beq.n	8007620 <__ieee754_pow+0x9b0>
 800760c:	ec51 0b18 	vmov	r0, r1, d8
 8007610:	2200      	movs	r2, #0
 8007612:	2300      	movs	r3, #0
 8007614:	f7f9 fa72 	bl	8000afc <__aeabi_dcmplt>
 8007618:	3800      	subs	r0, #0
 800761a:	bf18      	it	ne
 800761c:	2001      	movne	r0, #1
 800761e:	e447      	b.n	8006eb0 <__ieee754_pow+0x240>
 8007620:	4622      	mov	r2, r4
 8007622:	462b      	mov	r3, r5
 8007624:	f7f8 fe40 	bl	80002a8 <__aeabi_dsub>
 8007628:	4642      	mov	r2, r8
 800762a:	464b      	mov	r3, r9
 800762c:	f7f9 fa7a 	bl	8000b24 <__aeabi_dcmpge>
 8007630:	2800      	cmp	r0, #0
 8007632:	f43f aef3 	beq.w	800741c <__ieee754_pow+0x7ac>
 8007636:	e7e9      	b.n	800760c <__ieee754_pow+0x99c>
 8007638:	f04f 0a00 	mov.w	sl, #0
 800763c:	e71a      	b.n	8007474 <__ieee754_pow+0x804>
 800763e:	ec51 0b10 	vmov	r0, r1, d0
 8007642:	4619      	mov	r1, r3
 8007644:	e7d4      	b.n	80075f0 <__ieee754_pow+0x980>
 8007646:	491c      	ldr	r1, [pc, #112]	; (80076b8 <__ieee754_pow+0xa48>)
 8007648:	2000      	movs	r0, #0
 800764a:	f7ff bb30 	b.w	8006cae <__ieee754_pow+0x3e>
 800764e:	2000      	movs	r0, #0
 8007650:	2100      	movs	r1, #0
 8007652:	f7ff bb2c 	b.w	8006cae <__ieee754_pow+0x3e>
 8007656:	4630      	mov	r0, r6
 8007658:	4639      	mov	r1, r7
 800765a:	f7ff bb28 	b.w	8006cae <__ieee754_pow+0x3e>
 800765e:	9204      	str	r2, [sp, #16]
 8007660:	f7ff bb7a 	b.w	8006d58 <__ieee754_pow+0xe8>
 8007664:	2300      	movs	r3, #0
 8007666:	f7ff bb64 	b.w	8006d32 <__ieee754_pow+0xc2>
 800766a:	bf00      	nop
 800766c:	f3af 8000 	nop.w
 8007670:	00000000 	.word	0x00000000
 8007674:	3fe62e43 	.word	0x3fe62e43
 8007678:	fefa39ef 	.word	0xfefa39ef
 800767c:	3fe62e42 	.word	0x3fe62e42
 8007680:	0ca86c39 	.word	0x0ca86c39
 8007684:	be205c61 	.word	0xbe205c61
 8007688:	72bea4d0 	.word	0x72bea4d0
 800768c:	3e663769 	.word	0x3e663769
 8007690:	c5d26bf1 	.word	0xc5d26bf1
 8007694:	3ebbbd41 	.word	0x3ebbbd41
 8007698:	af25de2c 	.word	0xaf25de2c
 800769c:	3f11566a 	.word	0x3f11566a
 80076a0:	16bebd93 	.word	0x16bebd93
 80076a4:	3f66c16c 	.word	0x3f66c16c
 80076a8:	5555553e 	.word	0x5555553e
 80076ac:	3fc55555 	.word	0x3fc55555
 80076b0:	3fe00000 	.word	0x3fe00000
 80076b4:	000fffff 	.word	0x000fffff
 80076b8:	3ff00000 	.word	0x3ff00000
 80076bc:	4090cbff 	.word	0x4090cbff
 80076c0:	3f6f3400 	.word	0x3f6f3400
 80076c4:	652b82fe 	.word	0x652b82fe
 80076c8:	3c971547 	.word	0x3c971547

080076cc <__ieee754_sqrt>:
 80076cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d0:	ec55 4b10 	vmov	r4, r5, d0
 80076d4:	4e55      	ldr	r6, [pc, #340]	; (800782c <__ieee754_sqrt+0x160>)
 80076d6:	43ae      	bics	r6, r5
 80076d8:	ee10 0a10 	vmov	r0, s0
 80076dc:	ee10 3a10 	vmov	r3, s0
 80076e0:	462a      	mov	r2, r5
 80076e2:	4629      	mov	r1, r5
 80076e4:	d110      	bne.n	8007708 <__ieee754_sqrt+0x3c>
 80076e6:	ee10 2a10 	vmov	r2, s0
 80076ea:	462b      	mov	r3, r5
 80076ec:	f7f8 ff94 	bl	8000618 <__aeabi_dmul>
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	4620      	mov	r0, r4
 80076f6:	4629      	mov	r1, r5
 80076f8:	f7f8 fdd8 	bl	80002ac <__adddf3>
 80076fc:	4604      	mov	r4, r0
 80076fe:	460d      	mov	r5, r1
 8007700:	ec45 4b10 	vmov	d0, r4, r5
 8007704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007708:	2d00      	cmp	r5, #0
 800770a:	dc10      	bgt.n	800772e <__ieee754_sqrt+0x62>
 800770c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007710:	4330      	orrs	r0, r6
 8007712:	d0f5      	beq.n	8007700 <__ieee754_sqrt+0x34>
 8007714:	b15d      	cbz	r5, 800772e <__ieee754_sqrt+0x62>
 8007716:	ee10 2a10 	vmov	r2, s0
 800771a:	462b      	mov	r3, r5
 800771c:	ee10 0a10 	vmov	r0, s0
 8007720:	f7f8 fdc2 	bl	80002a8 <__aeabi_dsub>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	f7f9 f8a0 	bl	800086c <__aeabi_ddiv>
 800772c:	e7e6      	b.n	80076fc <__ieee754_sqrt+0x30>
 800772e:	1512      	asrs	r2, r2, #20
 8007730:	d074      	beq.n	800781c <__ieee754_sqrt+0x150>
 8007732:	07d4      	lsls	r4, r2, #31
 8007734:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007738:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800773c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007740:	bf5e      	ittt	pl
 8007742:	0fda      	lsrpl	r2, r3, #31
 8007744:	005b      	lslpl	r3, r3, #1
 8007746:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800774a:	2400      	movs	r4, #0
 800774c:	0fda      	lsrs	r2, r3, #31
 800774e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007752:	107f      	asrs	r7, r7, #1
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	2516      	movs	r5, #22
 8007758:	4620      	mov	r0, r4
 800775a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800775e:	1886      	adds	r6, r0, r2
 8007760:	428e      	cmp	r6, r1
 8007762:	bfde      	ittt	le
 8007764:	1b89      	suble	r1, r1, r6
 8007766:	18b0      	addle	r0, r6, r2
 8007768:	18a4      	addle	r4, r4, r2
 800776a:	0049      	lsls	r1, r1, #1
 800776c:	3d01      	subs	r5, #1
 800776e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007772:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007776:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800777a:	d1f0      	bne.n	800775e <__ieee754_sqrt+0x92>
 800777c:	462a      	mov	r2, r5
 800777e:	f04f 0e20 	mov.w	lr, #32
 8007782:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007786:	4281      	cmp	r1, r0
 8007788:	eb06 0c05 	add.w	ip, r6, r5
 800778c:	dc02      	bgt.n	8007794 <__ieee754_sqrt+0xc8>
 800778e:	d113      	bne.n	80077b8 <__ieee754_sqrt+0xec>
 8007790:	459c      	cmp	ip, r3
 8007792:	d811      	bhi.n	80077b8 <__ieee754_sqrt+0xec>
 8007794:	f1bc 0f00 	cmp.w	ip, #0
 8007798:	eb0c 0506 	add.w	r5, ip, r6
 800779c:	da43      	bge.n	8007826 <__ieee754_sqrt+0x15a>
 800779e:	2d00      	cmp	r5, #0
 80077a0:	db41      	blt.n	8007826 <__ieee754_sqrt+0x15a>
 80077a2:	f100 0801 	add.w	r8, r0, #1
 80077a6:	1a09      	subs	r1, r1, r0
 80077a8:	459c      	cmp	ip, r3
 80077aa:	bf88      	it	hi
 80077ac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80077b0:	eba3 030c 	sub.w	r3, r3, ip
 80077b4:	4432      	add	r2, r6
 80077b6:	4640      	mov	r0, r8
 80077b8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80077bc:	f1be 0e01 	subs.w	lr, lr, #1
 80077c0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80077c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80077cc:	d1db      	bne.n	8007786 <__ieee754_sqrt+0xba>
 80077ce:	430b      	orrs	r3, r1
 80077d0:	d006      	beq.n	80077e0 <__ieee754_sqrt+0x114>
 80077d2:	1c50      	adds	r0, r2, #1
 80077d4:	bf13      	iteet	ne
 80077d6:	3201      	addne	r2, #1
 80077d8:	3401      	addeq	r4, #1
 80077da:	4672      	moveq	r2, lr
 80077dc:	f022 0201 	bicne.w	r2, r2, #1
 80077e0:	1063      	asrs	r3, r4, #1
 80077e2:	0852      	lsrs	r2, r2, #1
 80077e4:	07e1      	lsls	r1, r4, #31
 80077e6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80077ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80077ee:	bf48      	it	mi
 80077f0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80077f4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80077f8:	4614      	mov	r4, r2
 80077fa:	e781      	b.n	8007700 <__ieee754_sqrt+0x34>
 80077fc:	0ad9      	lsrs	r1, r3, #11
 80077fe:	3815      	subs	r0, #21
 8007800:	055b      	lsls	r3, r3, #21
 8007802:	2900      	cmp	r1, #0
 8007804:	d0fa      	beq.n	80077fc <__ieee754_sqrt+0x130>
 8007806:	02cd      	lsls	r5, r1, #11
 8007808:	d50a      	bpl.n	8007820 <__ieee754_sqrt+0x154>
 800780a:	f1c2 0420 	rsb	r4, r2, #32
 800780e:	fa23 f404 	lsr.w	r4, r3, r4
 8007812:	1e55      	subs	r5, r2, #1
 8007814:	4093      	lsls	r3, r2
 8007816:	4321      	orrs	r1, r4
 8007818:	1b42      	subs	r2, r0, r5
 800781a:	e78a      	b.n	8007732 <__ieee754_sqrt+0x66>
 800781c:	4610      	mov	r0, r2
 800781e:	e7f0      	b.n	8007802 <__ieee754_sqrt+0x136>
 8007820:	0049      	lsls	r1, r1, #1
 8007822:	3201      	adds	r2, #1
 8007824:	e7ef      	b.n	8007806 <__ieee754_sqrt+0x13a>
 8007826:	4680      	mov	r8, r0
 8007828:	e7bd      	b.n	80077a6 <__ieee754_sqrt+0xda>
 800782a:	bf00      	nop
 800782c:	7ff00000 	.word	0x7ff00000

08007830 <with_errno>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4604      	mov	r4, r0
 8007834:	460d      	mov	r5, r1
 8007836:	4616      	mov	r6, r2
 8007838:	f7fe fce8 	bl	800620c <__errno>
 800783c:	4629      	mov	r1, r5
 800783e:	6006      	str	r6, [r0, #0]
 8007840:	4620      	mov	r0, r4
 8007842:	bd70      	pop	{r4, r5, r6, pc}

08007844 <xflow>:
 8007844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007846:	4614      	mov	r4, r2
 8007848:	461d      	mov	r5, r3
 800784a:	b108      	cbz	r0, 8007850 <xflow+0xc>
 800784c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007850:	e9cd 2300 	strd	r2, r3, [sp]
 8007854:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007858:	4620      	mov	r0, r4
 800785a:	4629      	mov	r1, r5
 800785c:	f7f8 fedc 	bl	8000618 <__aeabi_dmul>
 8007860:	2222      	movs	r2, #34	; 0x22
 8007862:	b003      	add	sp, #12
 8007864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007868:	f7ff bfe2 	b.w	8007830 <with_errno>

0800786c <__math_uflow>:
 800786c:	b508      	push	{r3, lr}
 800786e:	2200      	movs	r2, #0
 8007870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007874:	f7ff ffe6 	bl	8007844 <xflow>
 8007878:	ec41 0b10 	vmov	d0, r0, r1
 800787c:	bd08      	pop	{r3, pc}

0800787e <__math_oflow>:
 800787e:	b508      	push	{r3, lr}
 8007880:	2200      	movs	r2, #0
 8007882:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007886:	f7ff ffdd 	bl	8007844 <xflow>
 800788a:	ec41 0b10 	vmov	d0, r0, r1
 800788e:	bd08      	pop	{r3, pc}

08007890 <fabs>:
 8007890:	ec51 0b10 	vmov	r0, r1, d0
 8007894:	ee10 2a10 	vmov	r2, s0
 8007898:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800789c:	ec43 2b10 	vmov	d0, r2, r3
 80078a0:	4770      	bx	lr

080078a2 <finite>:
 80078a2:	b082      	sub	sp, #8
 80078a4:	ed8d 0b00 	vstr	d0, [sp]
 80078a8:	9801      	ldr	r0, [sp, #4]
 80078aa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80078ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80078b2:	0fc0      	lsrs	r0, r0, #31
 80078b4:	b002      	add	sp, #8
 80078b6:	4770      	bx	lr

080078b8 <scalbn>:
 80078b8:	b570      	push	{r4, r5, r6, lr}
 80078ba:	ec55 4b10 	vmov	r4, r5, d0
 80078be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80078c2:	4606      	mov	r6, r0
 80078c4:	462b      	mov	r3, r5
 80078c6:	b99a      	cbnz	r2, 80078f0 <scalbn+0x38>
 80078c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80078cc:	4323      	orrs	r3, r4
 80078ce:	d036      	beq.n	800793e <scalbn+0x86>
 80078d0:	4b39      	ldr	r3, [pc, #228]	; (80079b8 <scalbn+0x100>)
 80078d2:	4629      	mov	r1, r5
 80078d4:	ee10 0a10 	vmov	r0, s0
 80078d8:	2200      	movs	r2, #0
 80078da:	f7f8 fe9d 	bl	8000618 <__aeabi_dmul>
 80078de:	4b37      	ldr	r3, [pc, #220]	; (80079bc <scalbn+0x104>)
 80078e0:	429e      	cmp	r6, r3
 80078e2:	4604      	mov	r4, r0
 80078e4:	460d      	mov	r5, r1
 80078e6:	da10      	bge.n	800790a <scalbn+0x52>
 80078e8:	a32b      	add	r3, pc, #172	; (adr r3, 8007998 <scalbn+0xe0>)
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	e03a      	b.n	8007966 <scalbn+0xae>
 80078f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80078f4:	428a      	cmp	r2, r1
 80078f6:	d10c      	bne.n	8007912 <scalbn+0x5a>
 80078f8:	ee10 2a10 	vmov	r2, s0
 80078fc:	4620      	mov	r0, r4
 80078fe:	4629      	mov	r1, r5
 8007900:	f7f8 fcd4 	bl	80002ac <__adddf3>
 8007904:	4604      	mov	r4, r0
 8007906:	460d      	mov	r5, r1
 8007908:	e019      	b.n	800793e <scalbn+0x86>
 800790a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800790e:	460b      	mov	r3, r1
 8007910:	3a36      	subs	r2, #54	; 0x36
 8007912:	4432      	add	r2, r6
 8007914:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007918:	428a      	cmp	r2, r1
 800791a:	dd08      	ble.n	800792e <scalbn+0x76>
 800791c:	2d00      	cmp	r5, #0
 800791e:	a120      	add	r1, pc, #128	; (adr r1, 80079a0 <scalbn+0xe8>)
 8007920:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007924:	da1c      	bge.n	8007960 <scalbn+0xa8>
 8007926:	a120      	add	r1, pc, #128	; (adr r1, 80079a8 <scalbn+0xf0>)
 8007928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800792c:	e018      	b.n	8007960 <scalbn+0xa8>
 800792e:	2a00      	cmp	r2, #0
 8007930:	dd08      	ble.n	8007944 <scalbn+0x8c>
 8007932:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007936:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800793a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800793e:	ec45 4b10 	vmov	d0, r4, r5
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007948:	da19      	bge.n	800797e <scalbn+0xc6>
 800794a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800794e:	429e      	cmp	r6, r3
 8007950:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007954:	dd0a      	ble.n	800796c <scalbn+0xb4>
 8007956:	a112      	add	r1, pc, #72	; (adr r1, 80079a0 <scalbn+0xe8>)
 8007958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e2      	bne.n	8007926 <scalbn+0x6e>
 8007960:	a30f      	add	r3, pc, #60	; (adr r3, 80079a0 <scalbn+0xe8>)
 8007962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007966:	f7f8 fe57 	bl	8000618 <__aeabi_dmul>
 800796a:	e7cb      	b.n	8007904 <scalbn+0x4c>
 800796c:	a10a      	add	r1, pc, #40	; (adr r1, 8007998 <scalbn+0xe0>)
 800796e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0b8      	beq.n	80078e8 <scalbn+0x30>
 8007976:	a10e      	add	r1, pc, #56	; (adr r1, 80079b0 <scalbn+0xf8>)
 8007978:	e9d1 0100 	ldrd	r0, r1, [r1]
 800797c:	e7b4      	b.n	80078e8 <scalbn+0x30>
 800797e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007982:	3236      	adds	r2, #54	; 0x36
 8007984:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007988:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800798c:	4620      	mov	r0, r4
 800798e:	4b0c      	ldr	r3, [pc, #48]	; (80079c0 <scalbn+0x108>)
 8007990:	2200      	movs	r2, #0
 8007992:	e7e8      	b.n	8007966 <scalbn+0xae>
 8007994:	f3af 8000 	nop.w
 8007998:	c2f8f359 	.word	0xc2f8f359
 800799c:	01a56e1f 	.word	0x01a56e1f
 80079a0:	8800759c 	.word	0x8800759c
 80079a4:	7e37e43c 	.word	0x7e37e43c
 80079a8:	8800759c 	.word	0x8800759c
 80079ac:	fe37e43c 	.word	0xfe37e43c
 80079b0:	c2f8f359 	.word	0xc2f8f359
 80079b4:	81a56e1f 	.word	0x81a56e1f
 80079b8:	43500000 	.word	0x43500000
 80079bc:	ffff3cb0 	.word	0xffff3cb0
 80079c0:	3c900000 	.word	0x3c900000

080079c4 <_init>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	bf00      	nop
 80079c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ca:	bc08      	pop	{r3}
 80079cc:	469e      	mov	lr, r3
 80079ce:	4770      	bx	lr

080079d0 <_fini>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	bf00      	nop
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr
